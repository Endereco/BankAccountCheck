<?php

/**
 * BankAccount
 *
 * PHP Version 7
 *
 * @category  Class
 * @package   Src
 * @author    Florian Dreßler <florian.dressler@mobilemojo.de>
 * @copyright 2018 mobilemojo – Apps & eCommerce UG (haftungsbeschränkt) & Co. KG
 *            (https://www.mobilemojo.de/)
 * @license   http://opensource.org/licenses/gpl-3.0 GNU General Public License,
 *            version 3 (GPLv3)
 *
 * @link https://www.endereco.de
 */

namespace Endereco\BankAccountCheck;

/**
 * BankAccount
 *
 * Checks the check number of a bank number
 *
 * PHP Version 7
 *
 * @category  Class
 * @package   Src
 * @author    Florian Dreßler <florian.dressler@mobilemojo.de>
 * @copyright 2018 mobilemojo – Apps & eCommerce UG (haftungsbeschränkt) & Co. KG
 *            (https://www.mobilemojo.de/)
 * @license   http://opensource.org/licenses/gpl-3.0 GNU General Public License,
 *            version 3 (GPLv3)
 *
 * @link https://www.endereco.de
 */

class BankAccount
{
    public static $object;
    public static $checkSumFunction = array(
    "10000000" => "09",
    "10010010" => "24",
    "10010123" => "09",
    "10010300" => "09",
    "10010424" => "09",
    "10010500" => "09",
    "10011001" => "09",
    "10017997" => "09",
    "10020200" => "60",
    "10020500" => "09",
    "10020510" => "09",
    "10020520" => "09",
    "10020890" => "99",
    "10030200" => "09",
    "10030400" => "09",
    "10030500" => "09",
    "10030600" => "88",
    "10030700" => "16",
    "10030730" => "16",
    "10031000" => "09",
    "10033300" => "09",
    "10040000" => "13",
    "10040005" => "13",
    "10040010" => "09",
    "10040048" => "13",
    "10040060" => "09",
    "10040061" => "09",
    "10040062" => "09",
    "10040063" => "09",
    "10040085" => "13",
    "10045050" => "13",
    "10050000" => "B8",
    "10050005" => "C6",
    "10050006" => "D1",
    "10050007" => "D4",
    "10050008" => "E2",
    "10050020" => "B8",
    "10050500" => "09",
    "10050999" => "09",
    "10060198" => "06",
    "10061006" => "09",
    "10070000" => "63",
    "10070024" => "63",
    "10070100" => "63",
    "10070124" => "63",
    "10070324" => "63",
    "10070397" => "63",
    "10070398" => "63",
    "10070399" => "63",
    "10070848" => "63",
    "10071324" => "63",
    "10072324" => "63",
    "10077777" => "63",
    "10080000" => "76",
    "10080005" => "76",
    "10080006" => "76",
    "10080055" => "76",
    "10080057" => "76",
    "10080085" => "09",
    "10080086" => "09",
    "10080087" => "09",
    "10080088" => "76",
    "10080089" => "09",
    "10080900" => "76",
    "10089260" => "09",
    "10089999" => "09",
    "10090000" => "06",
    "10090300" => "09",
    "10090900" => "91",
    "10110300" => "09",
    "10110400" => "09",
    "10110600" => "17",
    "10120100" => "94",
    "10120800" => "09",
    "10130600" => "06",
    "10130800" => "01",
    "10220500" => "00",
    "10220600" => "19",
    "10310600" => "09",
    "11010100" => "09",
    "11010101" => "09",
    "11010111" => "09",
    "12016836" => "09",
    "12030000" => "00",
    "12030900" => "10",
    "12040000" => "13",
    "12050555" => "09",
    "12060000" => "09",
    "12070000" => "63",
    "12070024" => "63",
    "12070070" => "09",
    "12070088" => "09",
    "12070400" => "63",
    "12070424" => "63",
    "12080000" => "76",
    "12096597" => "A8",
    "13000000" => "09",
    "13040000" => "13",
    "13050000" => "20",
    "13051042" => "C0",
    "13061008" => "32",
    "13061078" => "32",
    "13061088" => "32",
    "13061128" => "32",
    "13070000" => "63",
    "13070024" => "63",
    "13070405" => "63",
    "13070424" => "63",
    "13080000" => "76",
    "13090000" => "32",
    "13091054" => "32",
    "13091084" => "06",
    "14040000" => "13",
    "14051000" => "20",
    "14051362" => "20",
    "14051462" => "C0",
    "14052000" => "20",
    "14061308" => "32",
    "14061438" => "32",
    "14080000" => "76",
    "14080011" => "76",
    "14091464" => "32",
    "15000000" => "09",
    "15040068" => "13",
    "15050100" => "20",
    "15050200" => "20",
    "15050400" => "20",
    "15050500" => "20",
    "15051732" => "C0",
    "15061618" => "32",
    "15061638" => "32",
    "15061698" => "32",
    "15080000" => "76",
    "15091674" => "06",
    "15091704" => "06",
    "16010300" => "09",
    "16020086" => "99",
    "16040000" => "13",
    "16050000" => "20",
    "16050101" => "20",
    "16050202" => "20",
    "16050500" => "09",
    "16060122" => "32",
    "16061938" => "32",
    "16062008" => "28",
    "16062073" => "32",
    "16080000" => "76",
    "16091994" => "32",
    "17020086" => "99",
    "17040000" => "13",
    "17052000" => "20",
    "17052302" => "C0",
    "17054040" => "20",
    "17055050" => "20",
    "17056060" => "20",
    "17062428" => "32",
    "17080000" => "76",
    "17092404" => "32",
    "18020086" => "99",
    "18040000" => "13",
    "18050000" => "20",
    "18051000" => "20",
    "18055000" => "20",
    "18062678" => "32",
    "18062758" => "32",
    "18080000" => "76",
    "18092684" => "32",
    "18092744" => "32",
    "20000000" => "09",
    "20010020" => "24",
    "20010424" => "09",
    "20020200" => "09",
    "20020500" => "09",
    "20020900" => "09",
    "20030000" => "68",
    "20030133" => "10",
    "20030300" => "09",
    "20030301" => "09",
    "20030400" => "C3",
    "20030600" => "19",
    "20030700" => "10",
    "20040000" => "13",
    "20040005" => "13",
    "20040020" => "09",
    "20040040" => "13",
    "20040048" => "13",
    "20040050" => "13",
    "20040060" => "09",
    "20040061" => "09",
    "20040062" => "09",
    "20040063" => "09",
    "20041111" => "13",
    "20041133" => "13",
    "20041144" => "13",
    "20041155" => "13",
    "20041166" => "13",
    "20041177" => "13",
    "20041188" => "13",
    "20041199" => "13",
    "20050000" => "C5",
    "20050550" => "00",
    "20060000" => "09",
    "20069111" => "32",
    "20069125" => "33",
    "20069130" => "32",
    "20069144" => "33",
    "20069177" => "32",
    "20069232" => "33",
    "20069641" => "33",
    "20069780" => "28",
    "20069782" => "28",
    "20069786" => "28",
    "20069800" => "28",
    "20069812" => "28",
    "20069815" => "28",
    "20069861" => "33",
    "20069882" => "33",
    "20069965" => "28",
    "20069989" => "28",
    "20070000" => "63",
    "20070024" => "63",
    "20070404" => "63",
    "20070424" => "63",
    "20080000" => "76",
    "20080055" => "76",
    "20080057" => "76",
    "20080085" => "09",
    "20080086" => "09",
    "20080087" => "09",
    "20080088" => "09",
    "20080089" => "09",
    "20080091" => "09",
    "20080092" => "09",
    "20080093" => "09",
    "20080094" => "09",
    "20080095" => "09",
    "20089200" => "09",
    "20090400" => "09",
    "20090500" => "81",
    "20090700" => "50",
    "20090745" => "50",
    "20090900" => "91",
    "20110022" => "09",
    "20110700" => "09",
    "20110800" => "09",
    "20120000" => "00",
    "20120100" => "09",
    "20120200" => "60",
    "20120400" => "E0",
    "20120520" => "09",
    "20120600" => "09",
    "20120700" => "16",
    "20130400" => "00",
    "20130600" => "09",
    "20133300" => "09",
    "20190003" => "10",
    "20190077" => "10",
    "20190109" => "48",
    "20190206" => "10",
    "20190301" => "10",
    "20190800" => "28",
    "20210200" => "19",
    "20210300" => "09",
    "20220100" => "09",
    "20220400" => "09",
    "20220800" => "09",
    "20230300" => "09",
    "20230600" => "06",
    "20230800" => "09",
    "20310300" => "09",
    "20320500" => "09",
    "20690500" => "09",
    "20730001" => "09",
    "20730002" => "09",
    "20730003" => "09",
    "20730004" => "09",
    "20730005" => "09",
    "20730006" => "09",
    "20730007" => "09",
    "20730008" => "09",
    "20730009" => "09",
    "20730010" => "09",
    "20730011" => "09",
    "20730012" => "09",
    "20730013" => "09",
    "20730014" => "09",
    "20730015" => "09",
    "20730016" => "09",
    "20730017" => "09",
    "20730018" => "09",
    "20730019" => "09",
    "20730020" => "09",
    "20730021" => "09",
    "20730022" => "09",
    "20730023" => "99",
    "20730024" => "09",
    "20730025" => "09",
    "20730026" => "09",
    "20730027" => "09",
    "20730028" => "09",
    "20730029" => "09",
    "20730030" => "09",
    "20730031" => "09",
    "20730032" => "09",
    "20730033" => "09",
    "20730034" => "09",
    "20730035" => "09",
    "20730036" => "09",
    "20730037" => "09",
    "20730038" => "09",
    "20730039" => "09",
    "20730040" => "09",
    "20730041" => "09",
    "20730042" => "09",
    "20730043" => "09",
    "20730044" => "09",
    "20730045" => "09",
    "20730046" => "09",
    "20730047" => "09",
    "20730048" => "09",
    "20730049" => "09",
    "20730050" => "09",
    "20730052" => "09",
    "20730055" => "09",
    "20730056" => "09",
    "20730057" => "09",
    "20730058" => "09",
    "20730059" => "09",
    "20730060" => "09",
    "20730061" => "09",
    "20730062" => "09",
    "20730063" => "09",
    "20730064" => "09",
    "20730065" => "09",
    "20730066" => "09",
    "20730067" => "09",
    "20730068" => "09",
    "20730069" => "09",
    "20730070" => "09",
    "20730071" => "09",
    "20730072" => "09",
    "20730073" => "09",
    "20730074" => "09",
    "20730075" => "09",
    "20730076" => "09",
    "20730077" => "09",
    "20730078" => "09",
    "20730079" => "09",
    "20730080" => "09",
    "20730081" => "09",
    "20730082" => "09",
    "20730083" => "09",
    "20730084" => "09",
    "20730085" => "09",
    "20730086" => "09",
    "20730087" => "09",
    "20730088" => "09",
    "20730089" => "09",
    "20730090" => "09",
    "20730091" => "09",
    "20730092" => "09",
    "20730093" => "09",
    "20730094" => "09",
    "20730095" => "09",
    "20730096" => "09",
    "20730097" => "09",
    "20730098" => "09",
    "20730099" => "09",
    "20750000" => "00",
    "21000000" => "09",
    "21020600" => "19",
    "21040010" => "13",
    "21042076" => "13",
    "21050000" => "C5",
    "21050170" => "74",
    "21051275" => "A2",
    "21051580" => "00",
    "21052090" => "00",
    "21070020" => "63",
    "21070024" => "63",
    "21080050" => "76",
    "21089201" => "09",
    "21090007" => "10",
    "21090099" => "10",
    "21090900" => "91",
    "21092023" => "48",
    "21240040" => "13",
    "21241540" => "13",
    "21261089" => "33",
    "21261227" => "33",
    "21270020" => "63",
    "21270024" => "63",
    "21280002" => "76",
    "21290016" => "48",
    "21340010" => "13",
    "21352240" => "A7",
    "21390008" => "32",
    "21392218" => "33",
    "21440045" => "13",
    "21450000" => "C2",
    "21451205" => "00",
    "21452030" => "A2",
    "21463603" => "32",
    "21464671" => "33",
    "21480003" => "76",
    "21510600" => "19",
    "21520100" => "06",
    "21540060" => "13",
    "21565316" => "33",
    "21570011" => "63",
    "21570024" => "63",
    "21570202" => "63",
    "21570224" => "63",
    "21580000" => "76",
    "21661719" => "32",
    "21690020" => "32",
    "21740043" => "13",
    "21741674" => "13",
    "21741825" => "13",
    "21750000" => "C8",
    "21751230" => "00",
    "21762550" => "32",
    "21763542" => "32",
    "21770011" => "63",
    "21770024" => "63",
    "21791805" => "33",
    "21791906" => "32",
    "21840078" => "13",
    "21841328" => "13",
    "21852310" => "09",
    "21860418" => "32",
    "21890022" => "32",
    "22140028" => "13",
    "22141028" => "13",
    "22141428" => "13",
    "22141628" => "13",
    "22150000" => "A2",
    "22151730" => "D6",
    "22163114" => "33",
    "22180000" => "76",
    "22181400" => "76",
    "22190030" => "48",
    "22191405" => "48",
    "22240073" => "13",
    "22250020" => "A2",
    "22280000" => "76",
    "22290031" => "10",
    "23000000" => "09",
    "23040022" => "13",
    "23050000" => "C5",
    "23050101" => "00",
    "23051030" => "A2",
    "23052750" => "A2",
    "23061220" => "32",
    "23062124" => "33",
    "23063129" => "33",
    "23064107" => "32",
    "23070203" => "63",
    "23070224" => "63",
    "23070700" => "63",
    "23070710" => "63",
    "23080040" => "76",
    "23089201" => "09",
    "23090142" => "10",
    "24040000" => "13",
    "24050110" => "00",
    "24060300" => "28",
    "24061392" => "28",
    "24070024" => "63",
    "24070075" => "63",
    "24070324" => "63",
    "24070368" => "63",
    "24080000" => "76",
    "24090041" => "28",
    "24121000" => "09",
    "24140041" => "13",
    "24150001" => "00",
    "24151005" => "00",
    "24151116" => "00",
    "24151235" => "00",
    "24161594" => "28",
    "24162898" => "28",
    "24180000" => "76",
    "24180001" => "76",
    "24191015" => "28",
    "25000000" => "09",
    "25010030" => "24",
    "25010424" => "09",
    "25010600" => "01",
    "25010900" => "28",
    "25020200" => "60",
    "25020600" => "41",
    "25040060" => "09",
    "25040061" => "09",
    "25040066" => "13",
    "25050000" => "27",
    "25050055" => "09",
    "25050066" => "09",
    "25050180" => "A3",
    "25050299" => "A3",
    "25055500" => "09",
    "25060000" => "09",
    "25060180" => "09",
    "25069168" => "28",
    "25069262" => "28",
    "25069270" => "28",
    "25069503" => "28",
    "25070024" => "63",
    "25070066" => "63",
    "25070070" => "63",
    "25070077" => "63",
    "25070084" => "63",
    "25070086" => "63",
    "25070324" => "63",
    "25070370" => "63",
    "25080020" => "76",
    "25080085" => "09",
    "25089220" => "09",
    "25090300" => "28",
    "25090500" => "09",
    "25090900" => "91",
    "25120510" => "09",
    "25151270" => "00",
    "25151371" => "00",
    "25152375" => "00",
    "25152490" => "00",
    "25190001" => "28",
    "25190088" => "28",
    "25193331" => "28",
    "25250001" => "00",
    "25260010" => "28",
    "25410200" => "09",
    "25440047" => "13",
    "25450001" => "00",
    "25450110" => "00",
    "25451345" => "00",
    "25462160" => "28",
    "25462680" => "28",
    "25470024" => "63",
    "25470073" => "63",
    "25471024" => "63",
    "25471073" => "63",
    "25480021" => "76",
    "25491273" => "28",
    "25541426" => "13",
    "25551480" => "00",
    "25591413" => "28",
    "25621327" => "61",
    "25641302" => "13",
    "25650106" => "00",
    "25651325" => "00",
    "25662540" => "28",
    "25663584" => "28",
    "25690009" => "28",
    "25690010" => "28",
    "25691633" => "28",
    "25691699" => "28",
    "25740061" => "13",
    "25750001" => "00",
    "25761894" => "28",
    "25770024" => "63",
    "25770069" => "63",
    "25780022" => "76",
    "25791516" => "28",
    "25791635" => "28",
    "25840048" => "13",
    "25841403" => "13",
    "25841708" => "13",
    "25850110" => "00",
    "25851335" => "00",
    "25851660" => "00",
    "25861990" => "28",
    "25862292" => "28",
    "25863489" => "28",
    "25891636" => "28",
    "25940033" => "13",
    "25950001" => "B1",
    "25950130" => "B1",
    "25970024" => "63",
    "25970074" => "63",
    "25971024" => "63",
    "25971071" => "63",
    "25980027" => "76",
    "25990011" => "28",
    "25991528" => "28",
    "26000000" => "09",
    "26040030" => "13",
    "26050001" => "00",
    "26051260" => "00",
    "26051450" => "00",
    "26061291" => "48",
    "26061556" => "28",
    "26062433" => "32",
    "26070024" => "63",
    "26070072" => "63",
    "26080024" => "76",
    "26090050" => "28",
    "26240039" => "13",
    "26250001" => "00",
    "26251425" => "00",
    "26261396" => "28",
    "26261492" => "28",
    "26261693" => "28",
    "26271424" => "63",
    "26271471" => "63",
    "26280020" => "76",
    "26281420" => "76",
    "26340056" => "13",
    "26341072" => "13",
    "26350001" => "00",
    "26351015" => "00",
    "26351445" => "00",
    "26500000" => "09",
    "26520017" => "61",
    "26521703" => "61",
    "26522319" => "61",
    "26540070" => "13",
    "26550105" => "00",
    "26551540" => "00",
    "26552286" => "00",
    "26562490" => "28",
    "26563960" => "28",
    "26565928" => "28",
    "26566939" => "28",
    "26567943" => "28",
    "26570024" => "63",
    "26570090" => "63",
    "26580070" => "76",
    "26589210" => "09",
    "26590025" => "28",
    "26620010" => "61",
    "26621413" => "61",
    "26640049" => "13",
    "26650001" => "00",
    "26660060" => "28",
    "26661380" => "28",
    "26661494" => "28",
    "26662932" => "28",
    "26691213" => "28",
    "26720028" => "61",
    "26740044" => "13",
    "26750001" => "00",
    "26760005" => "28",
    "26770024" => "63",
    "26770095" => "63",
    "26840032" => "13",
    "26850001" => "00",
    "26851410" => "00",
    "26851620" => "22",
    "26870024" => "63",
    "26870032" => "63",
    "26880063" => "76",
    "26890019" => "28",
    "26891484" => "28",
    "26941053" => "13",
    "26951311" => "00",
    "26971024" => "63",
    "26971038" => "63",
    "26981062" => "76",
    "26989221" => "09",
    "26991066" => "50",
    "27010200" => "09",
    "27020000" => "D8",
    "27020001" => "D8",
    "27020003" => "D8",
    "27020004" => "D8",
    "27020800" => "D8",
    "27032500" => "09",
    "27040080" => "13",
    "27062290" => "28",
    "27070024" => "63",
    "27070030" => "63",
    "27070031" => "63",
    "27070034" => "63",
    "27070041" => "63",
    "27070042" => "63",
    "27070043" => "63",
    "27070079" => "63",
    "27070324" => "63",
    "27070369" => "63",
    "27072524" => "63",
    "27072537" => "63",
    "27072724" => "63",
    "27072736" => "63",
    "27080060" => "76",
    "27089221" => "09",
    "27090900" => "91",
    "27092555" => "28",
    "27131300" => "32",
    "27240004" => "13",
    "27290087" => "47",
    "27893359" => "48",
    "27893760" => "28",
    "28000000" => "09",
    "28020050" => "61",
    "28021002" => "61",
    "28021301" => "61",
    "28021504" => "61",
    "28021623" => "61",
    "28021705" => "61",
    "28021906" => "61",
    "28022015" => "61",
    "28022412" => "61",
    "28022511" => "61",
    "28022620" => "61",
    "28022822" => "61",
    "28023224" => "61",
    "28023325" => "61",
    "28030300" => "09",
    "28040046" => "13",
    "28042865" => "13",
    "28050100" => "00",
    "28060228" => "28",
    "28061410" => "28",
    "28061501" => "28",
    "28061679" => "28",
    "28061822" => "28",
    "28062165" => "28",
    "28062249" => "28",
    "28062299" => "28",
    "28062560" => "28",
    "28062740" => "28",
    "28062913" => "28",
    "28063253" => "28",
    "28063526" => "28",
    "28063607" => "28",
    "28064179" => "28",
    "28064241" => "28",
    "28065061" => "28",
    "28065108" => "28",
    "28065286" => "28",
    "28066103" => "28",
    "28066214" => "28",
    "28066620" => "28",
    "28067068" => "28",
    "28067170" => "28",
    "28067257" => "28",
    "28068218" => "28",
    "28069052" => "28",
    "28069092" => "28",
    "28069109" => "28",
    "28069128" => "28",
    "28069138" => "28",
    "28069293" => "28",
    "28069381" => "28",
    "28069706" => "28",
    "28069755" => "28",
    "28069773" => "28",
    "28069878" => "28",
    "28069926" => "28",
    "28069930" => "28",
    "28069935" => "28",
    "28069956" => "28",
    "28069991" => "28",
    "28069994" => "28",
    "28070024" => "63",
    "28070057" => "63",
    "28220026" => "61",
    "28222208" => "61",
    "28222621" => "61",
    "28240023" => "13",
    "28250110" => "00",
    "28252760" => "00",
    "28262254" => "10",
    "28262673" => "28",
    "28270024" => "63",
    "28270056" => "63",
    "28280012" => "76",
    "28290063" => "00",
    "28291551" => "28",
    "28320014" => "61",
    "28321816" => "61",
    "28350000" => "00",
    "28361592" => "28",
    "28420007" => "61",
    "28421030" => "61",
    "28440037" => "13",
    "28450000" => "00",
    "28470024" => "63",
    "28470091" => "63",
    "28520009" => "61",
    "28521518" => "61",
    "28540034" => "13",
    "28550000" => "00",
    "28562297" => "28",
    "28562716" => "28",
    "28562863" => "28",
    "28563749" => "28",
    "28570024" => "63",
    "28570092" => "63",
    "28590075" => "28",
    "28591579" => "28",
    "28591654" => "28",
    "29000000" => "09",
    "29020000" => "09",
    "29020200" => "09",
    "29030400" => "09",
    "29040060" => "09",
    "29040061" => "09",
    "29040090" => "13",
    "29050000" => "29",
    "29050101" => "00",
    "29070024" => "63",
    "29070050" => "63",
    "29070051" => "63",
    "29070052" => "63",
    "29070058" => "63",
    "29070059" => "63",
    "29070324" => "63",
    "29070367" => "63",
    "29080010" => "76",
    "29089210" => "09",
    "29090900" => "91",
    "29121731" => "61",
    "29151700" => "00",
    "29152300" => "00",
    "29152550" => "00",
    "29152670" => "00",
    "29162394" => "28",
    "29162453" => "28",
    "29162697" => "28",
    "29165545" => "28",
    "29165681" => "28",
    "29166568" => "28",
    "29167624" => "28",
    "29172624" => "63",
    "29172655" => "63",
    "29190024" => "28",
    "29190330" => "28",
    "29190399" => "28",
    "29240024" => "13",
    "29250000" => "10",
    "29250150" => "10",
    "29262722" => "28",
    "29265747" => "28",
    "29280011" => "76",
    "29290034" => "28",
    "30000000" => "09",
    "30010400" => "09",
    "30010444" => "09",
    "30010700" => "09",
    "30018800" => "09",
    "30020500" => "60",
    "30020700" => "09",
    "30020900" => "57",
    "30022000" => "08",
    "30025500" => "08",
    "30030100" => "56",
    "30030500" => "05",
    "30030600" => "06",
    "30030880" => "56",
    "30030889" => "00",
    "30030900" => "00",
    "30040000" => "13",
    "30040005" => "13",
    "30040048" => "13",
    "30040060" => "09",
    "30040061" => "09",
    "30040062" => "09",
    "30040063" => "09",
    "30050000" => "08",
    "30050110" => "00",
    "30060010" => "44",
    "30060601" => "A4",
    "30060992" => "91",
    "30070010" => "63",
    "30070024" => "63",
    "30070207" => "63",
    "30070224" => "63",
    "30080000" => "76",
    "30080005" => "76",
    "30080022" => "76",
    "30080038" => "76",
    "30080041" => "76",
    "30080053" => "76",
    "30080055" => "76",
    "30080057" => "76",
    "30080061" => "76",
    "30080074" => "76",
    "30080080" => "09",
    "30080081" => "09",
    "30080082" => "09",
    "30080083" => "09",
    "30080084" => "09",
    "30080085" => "09",
    "30080086" => "09",
    "30080087" => "09",
    "30080088" => "09",
    "30080089" => "09",
    "30080095" => "76",
    "30089300" => "09",
    "30089302" => "09",
    "30110300" => "09",
    "30130100" => "09",
    "30130200" => "09",
    "30130600" => "06",
    "30150001" => "09",
    "30150200" => "00",
    "30160213" => "06",
    "30160266" => "06",
    "30220190" => "99",
    "30330800" => "01",
    "30351220" => "00",
    "30520000" => "09",
    "30520037" => "28",
    "30524400" => "18",
    "30530000" => "09",
    "30530500" => "28",
    "30550000" => "00",
    "30551240" => "00",
    "30560090" => "06",
    "30560548" => "06",
    "30560591" => "06",
    "31010833" => "09",
    "31040015" => "13",
    "31040060" => "09",
    "31040061" => "09",
    "31050000" => "00",
    "31060181" => "06",
    "31060517" => "06",
    "31062154" => "06",
    "31062553" => "06",
    "31070001" => "63",
    "31070024" => "63",
    "31070206" => "63",
    "31070224" => "63",
    "31080015" => "76",
    "31080061" => "76",
    "31251220" => "00",
    "31261282" => "06",
    "31263359" => "06",
    "31460290" => "06",
    "31470004" => "63",
    "31470024" => "63",
    "32040024" => "13",
    "32050000" => "00",
    "32051996" => "00",
    "32060362" => "06",
    "32061384" => "06",
    "32061414" => "06",
    "32070024" => "63",
    "32070080" => "63",
    "32080010" => "76",
    "32250050" => "00",
    "32440023" => "13",
    "32450000" => "00",
    "32460422" => "06",
    "32470024" => "63",
    "32470077" => "63",
    "33020000" => "09",
    "33020190" => "99",
    "33030000" => "06",
    "33040001" => "13",
    "33040310" => "13",
    "33050000" => "00",
    "33060098" => "06",
    "33060592" => "51",
    "33070024" => "63",
    "33070090" => "63",
    "33080001" => "09",
    "33080030" => "76",
    "33080085" => "09",
    "33080086" => "09",
    "33080087" => "09",
    "33080088" => "09",
    "33440035" => "13",
    "33450000" => "00",
    "33451220" => "00",
    "34040049" => "13",
    "34050000" => "00",
    "34051350" => "00",
    "34051570" => "00",
    "34060094" => "00",
    "34070024" => "63",
    "34070093" => "63",
    "34080031" => "76",
    "34240050" => "13",
    "34250000" => "00",
    "34270024" => "63",
    "34270094" => "63",
    "34280032" => "76",
    "35040038" => "13",
    "35040085" => "13",
    "35050000" => "00",
    "35060190" => "06",
    "35060199" => "06",
    "35060386" => "40",
    "35070024" => "63",
    "35070030" => "63",
    "35080070" => "76",
    "35080085" => "09",
    "35080086" => "09",
    "35080087" => "09",
    "35080088" => "09",
    "35080089" => "09",
    "35090300" => "09",
    "35251000" => "00",
    "35261248" => "06",
    "35450000" => "00",
    "35451460" => "00",
    "35451775" => "00",
    "35461106" => "06",
    "35640064" => "13",
    "35650000" => "00",
    "35660501" => "06",
    "35660599" => "06",
    "35850000" => "00",
    "35860245" => "06",
    "36000000" => "09",
    "36010043" => "24",
    "36010200" => "09",
    "36010424" => "09",
    "36020030" => "10",
    "36020186" => "99",
    "36033300" => "09",
    "36040039" => "13",
    "36040060" => "09",
    "36040061" => "09",
    "36040085" => "13",
    "36050105" => "78",
    "36060192" => "06",
    "36060295" => "06",
    "36060488" => "34",
    "36060591" => "51",
    "36070024" => "63",
    "36070050" => "63",
    "36070208" => "63",
    "36070224" => "63",
    "36080080" => "76",
    "36080085" => "09",
    "36089321" => "09",
    "36240045" => "13",
    "36250000" => "06",
    "36270024" => "63",
    "36270048" => "63",
    "36280071" => "76",
    "36540046" => "13",
    "36550000" => "00",
    "36570024" => "63",
    "36570049" => "63",
    "36580072" => "76",
    "37000000" => "09",
    "37010050" => "24",
    "37010600" => "09",
    "37010699" => "09",
    "37011000" => "24",
    "37019000" => "09",
    "37020090" => "99",
    "37020200" => "09",
    "37020400" => "09",
    "37020500" => "09",
    "37020600" => "09",
    "37020900" => "09",
    "37021500" => "09",
    "37021548" => "09",
    "37030200" => "09",
    "37030700" => "19",
    "37030800" => "06",
    "37040037" => "09",
    "37040044" => "13",
    "37040048" => "13",
    "37040060" => "09",
    "37040061" => "09",
    "37050198" => "00",
    "37050299" => "B5",
    "37060120" => "06",
    "37060193" => "06",
    "37060194" => "06",
    "37060590" => "51",
    "37060993" => "91",
    "37062124" => "06",
    "37062365" => "06",
    "37062600" => "06",
    "37063367" => "06",
    "37069101" => "06",
    "37069103" => "06",
    "37069125" => "06",
    "37069153" => "06",
    "37069164" => "06",
    "37069252" => "06",
    "37069302" => "06",
    "37069303" => "06",
    "37069306" => "06",
    "37069322" => "06",
    "37069330" => "06",
    "37069331" => "06",
    "37069342" => "06",
    "37069354" => "06",
    "37069355" => "06",
    "37069381" => "06",
    "37069401" => "06",
    "37069405" => "06",
    "37069412" => "06",
    "37069427" => "06",
    "37069429" => "06",
    "37069472" => "06",
    "37069520" => "06",
    "37069521" => "06",
    "37069524" => "06",
    "37069627" => "06",
    "37069639" => "06",
    "37069642" => "06",
    "37069707" => "06",
    "37069720" => "06",
    "37069805" => "06",
    "37069833" => "06",
    "37069840" => "06",
    "37069991" => "06",
    "37070000" => "63",
    "37070024" => "63",
    "37070060" => "63",
    "37070209" => "63",
    "37070224" => "63",
    "37080040" => "76",
    "37080085" => "09",
    "37080086" => "09",
    "37080087" => "09",
    "37080088" => "09",
    "37080089" => "09",
    "37080090" => "09",
    "37080091" => "09",
    "37080092" => "09",
    "37080093" => "09",
    "37080094" => "09",
    "37080095" => "09",
    "37080096" => "76",
    "37080097" => "76",
    "37080098" => "09",
    "37080099" => "76",
    "37089340" => "09",
    "37089342" => "09",
    "37160087" => "06",
    "37161289" => "06",
    "37540050" => "13",
    "37551020" => "00",
    "37551440" => "00",
    "37551780" => "00",
    "37560092" => "06",
    "37570024" => "63",
    "37570064" => "63",
    "38010053" => "09",
    "38010700" => "09",
    "38010900" => "09",
    "38010999" => "06",
    "38011000" => "09",
    "38011001" => "09",
    "38011002" => "09",
    "38011003" => "09",
    "38011004" => "09",
    "38011005" => "09",
    "38011006" => "09",
    "38011007" => "09",
    "38011008" => "09",
    "38020090" => "99",
    "38040007" => "13",
    "38050000" => "00",
    "38051290" => "00",
    "38060186" => "06",
    "38070024" => "63",
    "38070059" => "63",
    "38070408" => "63",
    "38070424" => "63",
    "38070724" => "63",
    "38077724" => "63",
    "38080055" => "76",
    "38160220" => "06",
    "38250110" => "00",
    "38260082" => "06",
    "38440016" => "13",
    "38450000" => "00",
    "38452490" => "00",
    "38462135" => "06",
    "38470024" => "63",
    "38470091" => "63",
    "38621500" => "38",
    "38650000" => "00",
    "38651390" => "00",
    "39020000" => "09",
    "39040013" => "13",
    "39050000" => "00",
    "39060180" => "06",
    "39061981" => "06",
    "39070020" => "63",
    "39070024" => "63",
    "39070210" => "63",
    "39070224" => "63",
    "39080005" => "76",
    "39080098" => "76",
    "39080099" => "76",
    "39160191" => "06",
    "39161490" => "06",
    "39162980" => "06",
    "39362254" => "06",
    "39540052" => "13",
    "39550110" => "00",
    "39560201" => "06",
    "39570024" => "63",
    "39570061" => "63",
    "39580041" => "76",
    "40022000" => "08",
    "40030000" => "61",
    "40040028" => "13",
    "40050000" => "08",
    "40050150" => "00",
    "40055555" => "09",
    "40060000" => "44",
    "40060265" => "34",
    "40060300" => "34",
    "40060560" => "85",
    "40061238" => "34",
    "40069226" => "34",
    "40069266" => "34",
    "40069283" => "34",
    "40069348" => "34",
    "40069362" => "34",
    "40069363" => "34",
    "40069371" => "34",
    "40069408" => "34",
    "40069477" => "34",
    "40069546" => "34",
    "40069600" => "34",
    "40069601" => "34",
    "40069606" => "34",
    "40069622" => "34",
    "40069709" => "34",
    "40069716" => "34",
    "40070024" => "63",
    "40070080" => "63",
    "40070211" => "63",
    "40070224" => "63",
    "40080040" => "76",
    "40080085" => "09",
    "40090900" => "91",
    "40150001" => "09",
    "40153768" => "01",
    "40154006" => "00",
    "40154476" => "00",
    "40154530" => "00",
    "40154702" => "00",
    "40160050" => "34",
    "40163720" => "34",
    "40164024" => "34",
    "40164256" => "34",
    "40164352" => "34",
    "40164528" => "34",
    "40164618" => "34",
    "40164901" => "34",
    "40165366" => "34",
    "40166439" => "34",
    "40166800" => "34",
    "40340030" => "13",
    "40350005" => "00",
    "40351060" => "00",
    "40351220" => "00",
    "40361627" => "34",
    "40361906" => "34",
    "40363433" => "34",
    "40370024" => "63",
    "40370079" => "63",
    "41040018" => "13",
    "41041000" => "13",
    "41050095" => "00",
    "41051605" => "00",
    "41051845" => "00",
    "41061011" => "34",
    "41061903" => "34",
    "41062215" => "34",
    "41070024" => "63",
    "41070049" => "63",
    "41240048" => "13",
    "41250035" => "00",
    "41260006" => "34",
    "41261324" => "34",
    "41261419" => "34",
    "41262501" => "34",
    "41280043" => "76",
    "41440018" => "13",
    "41450075" => "00",
    "41451750" => "00",
    "41460116" => "34",
    "41462295" => "34",
    "41650001" => "00",
    "41651770" => "00",
    "41651815" => "00",
    "41651965" => "00",
    "41652560" => "00",
    "41660124" => "34",
    "41661206" => "34",
    "41661504" => "34",
    "41661719" => "34",
    "41662465" => "34",
    "41662557" => "34",
    "41663335" => "34",
    "41670024" => "63",
    "41670027" => "63",
    "41670028" => "63",
    "41670029" => "63",
    "41670030" => "63",
    "42030600" => "06",
    "42040040" => "13",
    "42050001" => "25",
    "42070024" => "63",
    "42070062" => "63",
    "42080082" => "76",
    "42260001" => "34",
    "42450040" => "00",
    "42451220" => "00",
    "42461435" => "34",
    "42640048" => "13",
    "42650150" => "00",
    "42651315" => "00",
    "42661008" => "34",
    "42661088" => "34",
    "42661330" => "34",
    "42661717" => "34",
    "42662320" => "34",
    "42680081" => "76",
    "42840005" => "13",
    "42850035" => "00",
    "42860003" => "34",
    "42861239" => "34",
    "42861387" => "34",
    "42861515" => "34",
    "42861608" => "34",
    "42861814" => "34",
    "42862451" => "34",
    "42870024" => "63",
    "42870077" => "63",
    "43000000" => "09",
    "43040036" => "13",
    "43050001" => "00",
    "43051040" => "00",
    "43060129" => "34",
    "43060967" => "34",
    "43060988" => "34",
    "43070024" => "63",
    "43070061" => "63",
    "43080083" => "76",
    "43250030" => "00",
    "44000000" => "09",
    "44010046" => "24",
    "44020090" => "99",
    "44040037" => "13",
    "44040060" => "09",
    "44040061" => "09",
    "44040085" => "13",
    "44050000" => "08",
    "44050199" => "06",
    "44060122" => "34",
    "44064406" => "09",
    "44070024" => "63",
    "44070050" => "63",
    "44080050" => "76",
    "44080055" => "76",
    "44080057" => "76",
    "44080085" => "09",
    "44089320" => "09",
    "44090920" => "91",
    "44152370" => "00",
    "44152490" => "00",
    "44160014" => "34",
    "44340037" => "13",
    "44350060" => "00",
    "44351380" => "00",
    "44351740" => "00",
    "44361342" => "34",
    "44540022" => "13",
    "44550045" => "00",
    "44551210" => "00",
    "44570004" => "63",
    "44570024" => "63",
    "44580070" => "76",
    "44580085" => "09",
    "44761312" => "34",
    "44761534" => "34",
    "45000000" => "09",
    "45040042" => "13",
    "45050001" => "E4",
    "45051485" => "00",
    "45060009" => "34",
    "45061524" => "34",
    "45070002" => "63",
    "45070024" => "63",
    "45080060" => "76",
    "45240056" => "13",
    "45250035" => "00",
    "45251480" => "00",
    "45251515" => "00",
    "45260041" => "34",
    "45260475" => "34",
    "45261547" => "34",
    "45450050" => "00",
    "45451060" => "00",
    "45451555" => "09",
    "45660029" => "34",
    "45840026" => "13",
    "45841031" => "13",
    "45850005" => "00",
    "45851020" => "00",
    "45851665" => "00",
    "45860033" => "34",
    "45861434" => "34",
    "45861617" => "34",
    "46040033" => "13",
    "46050001" => "00",
    "46051240" => "00",
    "46051733" => "00",
    "46051875" => "00",
    "46052855" => "00",
    "46053480" => "00",
    "46060040" => "34",
    "46061724" => "34",
    "46062817" => "34",
    "46063405" => "34",
    "46070024" => "63",
    "46070090" => "63",
    "46080010" => "76",
    "46240016" => "13",
    "46250049" => "00",
    "46251590" => "00",
    "46251630" => "00",
    "46260023" => "34",
    "46261607" => "34",
    "46261822" => "34",
    "46262456" => "34",
    "46441003" => "13",
    "46451012" => "00",
    "46451250" => "00",
    "46461126" => "34",
    "46462271" => "34",
    "46464453" => "34",
    "46640018" => "13",
    "46650005" => "00",
    "46660022" => "34",
    "46670007" => "63",
    "46670024" => "63",
    "46670204" => "63",
    "46670224" => "63",
    "47000000" => "09",
    "47240047" => "13",
    "47250101" => "00",
    "47251550" => "00",
    "47251740" => "00",
    "47260121" => "34",
    "47260234" => "34",
    "47260307" => "34",
    "47261429" => "34",
    "47261603" => "34",
    "47262626" => "34",
    "47262703" => "34",
    "47263472" => "34",
    "47264367" => "34",
    "47265383" => "34",
    "47267216" => "34",
    "47270024" => "63",
    "47270029" => "63",
    "47460028" => "34",
    "47640051" => "13",
    "47650130" => "00",
    "47651225" => "00",
    "47670023" => "63",
    "47670024" => "63",
    "47670205" => "63",
    "47670224" => "63",
    "47691200" => "34",
    "47840065" => "13",
    "47840080" => "09",
    "47850065" => "A7",
    "47852760" => "00",
    "47853355" => "00",
    "47853520" => "00",
    "47860125" => "34",
    "47861317" => "34",
    "47861518" => "34",
    "47861806" => "34",
    "47862261" => "34",
    "47862447" => "34",
    "47863373" => "34",
    "47880031" => "76",
    "48000000" => "09",
    "48020086" => "99",
    "48020151" => "32",
    "48021900" => "34",
    "48040035" => "13",
    "48040060" => "09",
    "48040061" => "09",
    "48050161" => "00",
    "48051580" => "00",
    "48060036" => "34",
    "48062051" => "34",
    "48062466" => "34",
    "48070020" => "63",
    "48070024" => "63",
    "48070040" => "63",
    "48070042" => "63",
    "48070043" => "63",
    "48070044" => "63",
    "48070045" => "63",
    "48070050" => "63",
    "48070052" => "63",
    "48080020" => "76",
    "48089350" => "09",
    "48250110" => "00",
    "48291490" => "34",
    "49040043" => "13",
    "49050101" => "00",
    "49051065" => "00",
    "49051285" => "00",
    "49051990" => "00",
    "49060127" => "34",
    "49060392" => "34",
    "49061470" => "34",
    "49061510" => "34",
    "49070024" => "63",
    "49070028" => "63",
    "49080025" => "76",
    "49092650" => "34",
    "49240096" => "13",
    "49262364" => "34",
    "49440043" => "13",
    "49450120" => "00",
    "49490070" => "34",
    "50000000" => "09",
    "50010060" => "24",
    "50010200" => "09",
    "50010424" => "09",
    "50010517" => "C1",
    "50010700" => "B7",
    "50010900" => "09",
    "50010910" => "09",
    "50012800" => "28",
    "50016600" => "09",
    "50020000" => "28",
    "50020200" => "60",
    "50020400" => "09",
    "50020500" => "09",
    "50020700" => "09",
    "50020800" => "09",
    "50021000" => "60",
    "50021100" => "60",
    "50021120" => "60",
    "50022200" => "09",
    "50024024" => "09",
    "50025000" => "10",
    "50030000" => "09",
    "50030010" => "09",
    "50030100" => "00",
    "50030500" => "09",
    "50030600" => "09",
    "50030700" => "09",
    "50031000" => "06",
    "50033300" => "09",
    "50038800" => "09",
    "50040000" => "13",
    "50040005" => "13",
    "50040010" => "13",
    "50040011" => "13",
    "50040012" => "13",
    "50040013" => "13",
    "50040014" => "13",
    "50040015" => "13",
    "50040033" => "09",
    "50040038" => "13",
    "50040040" => "13",
    "50040048" => "13",
    "50040050" => "09",
    "50040051" => "13",
    "50040052" => "13",
    "50040060" => "09",
    "50040061" => "09",
    "50040062" => "09",
    "50040063" => "09",
    "50040075" => "13",
    "50040084" => "13",
    "50040085" => "13",
    "50040086" => "13",
    "50040087" => "13",
    "50040088" => "13",
    "50040099" => "13",
    "50042500" => "13",
    "50044444" => "13",
    "50047010" => "13",
    "50050000" => "00",
    "50050201" => "96",
    "50050222" => "19",
    "50050999" => "00",
    "50060000" => "09",
    "50060400" => "09",
    "50060412" => "09",
    "50060413" => "09",
    "50060414" => "09",
    "50060415" => "09",
    "50060416" => "09",
    "50060417" => "09",
    "50060418" => "09",
    "50060419" => "09",
    "50060420" => "09",
    "50060421" => "09",
    "50060422" => "09",
    "50060423" => "09",
    "50060424" => "09",
    "50060425" => "09",
    "50060474" => "09",
    "50061741" => "32",
    "50069126" => "32",
    "50069146" => "32",
    "50069187" => "32",
    "50069241" => "32",
    "50069345" => "32",
    "50069455" => "32",
    "50069477" => "32",
    "50069693" => "32",
    "50069842" => "32",
    "50069976" => "32",
    "50070010" => "63",
    "50070011" => "63",
    "50070024" => "63",
    "50070324" => "63",
    "50070371" => "63",
    "50070435" => "63",
    "50070436" => "63",
    "50070437" => "63",
    "50070438" => "63",
    "50070439" => "63",
    "50073019" => "63",
    "50073024" => "63",
    "50073081" => "63",
    "50080000" => "76",
    "50080015" => "76",
    "50080025" => "76",
    "50080035" => "76",
    "50080055" => "76",
    "50080057" => "76",
    "50080060" => "76",
    "50080061" => "76",
    "50080077" => "09",
    "50080079" => "76",
    "50080080" => "76",
    "50080082" => "76",
    "50080086" => "09",
    "50080087" => "09",
    "50080088" => "09",
    "50080089" => "09",
    "50080091" => "09",
    "50080092" => "76",
    "50080099" => "76",
    "50080300" => "76",
    "50083007" => "76",
    "50083838" => "76",
    "50089400" => "09",
    "50090500" => "73",
    "50090900" => "91",
    "50092100" => "06",
    "50092200" => "06",
    "50092900" => "06",
    "50093000" => "06",
    "50093010" => "06",
    "50093400" => "06",
    "50110200" => "09",
    "50110300" => "10",
    "50110400" => "09",
    "50110500" => "09",
    "50110636" => "09",
    "50110700" => "09",
    "50110800" => "09",
    "50110801" => "94",
    "50110855" => "09",
    "50110900" => "09",
    "50120000" => "09",
    "50120100" => "09",
    "50120383" => "D9",
    "50120500" => "66",
    "50120600" => "09",
    "50120800" => "00",
    "50120900" => "06",
    "50123400" => "28",
    "50127000" => "09",
    "50130000" => "09",
    "50130200" => "09",
    "50130400" => "10",
    "50130600" => "09",
    "50131000" => "E1",
    "50190000" => "06",
    "50190300" => "06",
    "50190400" => "06",
    "50210200" => "18",
    "50210212" => "18",
    "50210295" => "09",
    "50210800" => "06",
    "50210900" => "06",
    "50220085" => "09",
    "50220101" => "09",
    "50220300" => "09",
    "50220500" => "00",
    "50220707" => "00",
    "50220900" => "00",
    "50230000" => "00",
    "50230600" => "06",
    "50230700" => "00",
    "50230800" => "09",
    "50230888" => "09",
    "50234500" => "09",
    "50250200" => "09",
    "50310400" => "46",
    "50310900" => "09",
    "50320000" => "00",
    "50320191" => "99",
    "50320500" => "09",
    "50320600" => "09",
    "50320900" => "09",
    "50324000" => "31",
    "50324040" => "31",
    "50330000" => "06",
    "50330200" => "06",
    "50330201" => "06",
    "50330300" => "09",
    "50330500" => "09",
    "50330600" => "09",
    "50334400" => "09",
    "50400000" => "09",
    "50510300" => "09",
    "50520190" => "99",
    "50522222" => "09",
    "50530000" => "06",
    "50540028" => "13",
    "50550020" => "06",
    "50560102" => "32",
    "50561315" => "32",
    "50570018" => "63",
    "50570024" => "63",
    "50580005" => "76",
    "50580085" => "09",
    "50590000" => "06",
    "50592200" => "32",
    "50640015" => "13",
    "50650023" => "00",
    "50652124" => "00",
    "50661639" => "32",
    "50661816" => "06",
    "50662299" => "32",
    "50662669" => "32",
    "50663699" => "32",
    "50670009" => "63",
    "50670024" => "63",
    "50680002" => "76",
    "50680085" => "09",
    "50690000" => "32",
    "50691300" => "09",
    "50692100" => "06",
    "50740048" => "13",
    "50750094" => "01",
    "50761333" => "06",
    "50763319" => "32",
    "50780006" => "76",
    "50790000" => "32",
    "50793300" => "06",
    "50794300" => "32",
    "50810900" => "09",
    "50820292" => "99",
    "50835800" => "09",
    "50840005" => "13",
    "50850049" => "00",
    "50850150" => "06",
    "50851952" => "00",
    "50852553" => "00",
    "50852651" => "00",
    "50861393" => "32",
    "50861501" => "32",
    "50862311" => "32",
    "50862408" => "32",
    "50862703" => "32",
    "50862835" => "32",
    "50862903" => "32",
    "50863513" => "32",
    "50865224" => "32",
    "50865503" => "32",
    "50870005" => "63",
    "50870024" => "63",
    "50870324" => "63",
    "50870393" => "63",
    "50880050" => "76",
    "50880085" => "09",
    "50880086" => "09",
    "50890000" => "06",
    "50950068" => "00",
    "50951469" => "01",
    "50961206" => "32",
    "50961312" => "32",
    "50961592" => "32",
    "50961685" => "32",
    "50970004" => "63",
    "50970024" => "63",
    "51010400" => "09",
    "51020000" => "60",
    "51020186" => "99",
    "51040038" => "13",
    "51050015" => "A2",
    "51051000" => "56",
    "51070021" => "63",
    "51070024" => "63",
    "51080060" => "76",
    "51080085" => "09",
    "51080086" => "09",
    "51089410" => "09",
    "51090000" => "06",
    "51091500" => "06",
    "51091501" => "06",
    "51091700" => "06",
    "51091711" => "06",
    "51140029" => "13",
    "51150018" => "00",
    "51151919" => "00",
    "51161606" => "32",
    "51170010" => "63",
    "51170024" => "63",
    "51180041" => "76",
    "51190000" => "06",
    "51191800" => "06",
    "51192200" => "32",
    "51210600" => "09",
    "51210606" => "09",
    "51210699" => "09",
    "51210700" => "06",
    "51210800" => "09",
    "51210801" => "09",
    "51210802" => "09",
    "51211000" => "09",
    "51220200" => "09",
    "51220400" => "09",
    "51220700" => "09",
    "51220800" => "09",
    "51220900" => "09",
    "51220910" => "50",
    "51230500" => "09",
    "51230502" => "09",
    "51230555" => "09",
    "51230600" => "09",
    "51230800" => "09",
    "51230801" => "09",
    "51230802" => "09",
    "51230805" => "09",
    "51250000" => "06",
    "51300000" => "09",
    "51340013" => "13",
    "51343224" => "13",
    "51350025" => "10",
    "51351526" => "00",
    "51352227" => "00",
    "51361021" => "32",
    "51370008" => "63",
    "51370024" => "63",
    "51380040" => "76",
    "51380085" => "09",
    "51390000" => "06",
    "51410600" => "09",
    "51410700" => "09",
    "51410800" => "09",
    "51420200" => "11",
    "51420300" => "17",
    "51420600" => "09",
    "51430400" => "09",
    "51432100" => "09",
    "51540037" => "13",
    "51550035" => "00",
    "51570008" => "63",
    "51570024" => "63",
    "51580044" => "76",
    "51591300" => "06",
    "51640043" => "13",
    "51650045" => "00",
    "51690000" => "06",
    "51691500" => "06",
    "51752267" => "00",
    "51762434" => "06",
    "51850079" => "06",
    "51861325" => "06",
    "51861403" => "32",
    "51861616" => "32",
    "51861806" => "32",
    "51961023" => "32",
    "51961515" => "32",
    "51961801" => "32",
    "51990000" => "06",
    "52040021" => "13",
    "52050000" => "00",
    "52050353" => "05",
    "52051373" => "00",
    "52051555" => "00",
    "52051877" => "00",
    "52052154" => "00",
    "52053458" => "00",
    "52060000" => "09",
    "52060208" => "32",
    "52060410" => "32",
    "52060420" => "32",
    "52061303" => "32",
    "52062200" => "32",
    "52062601" => "32",
    "52063369" => "32",
    "52063550" => "32",
    "52064156" => "32",
    "52065220" => "32",
    "52069013" => "32",
    "52069029" => "32",
    "52069065" => "32",
    "52069149" => "32",
    "52069519" => "32",
    "52070012" => "63",
    "52070024" => "63",
    "52071212" => "63",
    "52071224" => "63",
    "52080080" => "76",
    "52080085" => "09",
    "52090000" => "06",
    "52240006" => "13",
    "52250030" => "00",
    "52260385" => "32",
    "52270012" => "63",
    "52270024" => "63",
    "52350005" => "00",
    "52360059" => "32",
    "52410300" => "09",
    "52410310" => "09",
    "52410400" => "19",
    "52411000" => "09",
    "52411010" => "09",
    "52420000" => "09",
    "52420300" => "09",
    "52420600" => "30",
    "52420700" => "09",
    "52430000" => "00",
    "53040012" => "13",
    "53050180" => "01",
    "53051396" => "01",
    "53060180" => "32",
    "53061230" => "32",
    "53061313" => "32",
    "53062035" => "32",
    "53062350" => "32",
    "53064023" => "32",
    "53070007" => "63",
    "53070024" => "63",
    "53070324" => "63",
    "53070394" => "63",
    "53080030" => "76",
    "53093200" => "32",
    "53093255" => "32",
    "53240048" => "13",
    "53250000" => "A6",
    "53260145" => "32",
    "53261202" => "32",
    "53261342" => "32",
    "53262073" => "32",
    "53262455" => "32",
    "53270012" => "63",
    "53270024" => "63",
    "53280081" => "76",
    "53290000" => "06",
    "53340024" => "13",
    "53350000" => "06",
    "53361724" => "32",
    "53370008" => "63",
    "53370024" => "63",
    "53380042" => "76",
    "53381843" => "76",
    "54020090" => "99",
    "54030011" => "09",
    "54040042" => "13",
    "54050110" => "00",
    "54050220" => "00",
    "54051550" => "00",
    "54051660" => "B2",
    "54051990" => "00",
    "54061650" => "32",
    "54062027" => "32",
    "54070024" => "63",
    "54070092" => "63",
    "54080021" => "76",
    "54090000" => "06",
    "54091700" => "06",
    "54091800" => "06",
    "54092400" => "06",
    "54220091" => "99",
    "54240032" => "13",
    "54250010" => "00",
    "54261700" => "32",
    "54270024" => "63",
    "54270096" => "63",
    "54280023" => "76",
    "54290000" => "06",
    "54291200" => "32",
    "54500000" => "09",
    "54510067" => "24",
    "54520194" => "99",
    "54540033" => "13",
    "54550010" => "00",
    "54550120" => "00",
    "54561310" => "32",
    "54570024" => "63",
    "54570094" => "63",
    "54580020" => "76",
    "54620093" => "99",
    "54640035" => "13",
    "54651240" => "00",
    "54661800" => "32",
    "54663270" => "32",
    "54670024" => "63",
    "54670095" => "63",
    "54680022" => "76",
    "54691200" => "06",
    "54750010" => "00",
    "54790000" => "06",
    "54850010" => "00",
    "54851440" => "00",
    "54861190" => "32",
    "54862390" => "32",
    "54862500" => "32",
    "54891300" => "06",
    "55000000" => "09",
    "55010400" => "01",
    "55010424" => "09",
    "55010625" => "09",
    "55010800" => "09",
    "55020000" => "60",
    "55020100" => "09",
    "55020486" => "99",
    "55020500" => "09",
    "55020555" => "09",
    "55020600" => "09",
    "55020700" => "16",
    "55030500" => "09",
    "55033300" => "09",
    "55040022" => "13",
    "55040060" => "09",
    "55040061" => "09",
    "55050000" => "59",
    "55050120" => "00",
    "55060321" => "32",
    "55060417" => "32",
    "55060611" => "32",
    "55061303" => "32",
    "55061507" => "32",
    "55061907" => "32",
    "55070024" => "63",
    "55070040" => "63",
    "55070324" => "63",
    "55070396" => "63",
    "55080044" => "76",
    "55080065" => "76",
    "55080085" => "09",
    "55080086" => "09",
    "55080088" => "76",
    "55090500" => "09",
    "55091200" => "06",
    "55150098" => "09",
    "55160195" => "06",
    "55190000" => "00",
    "55340041" => "13",
    "55350010" => "03",
    "55361202" => "32",
    "55362071" => "32",
    "55390000" => "06",
    "56020086" => "99",
    "56050180" => "00",
    "56051790" => "00",
    "56061151" => "38",
    "56061472" => "38",
    "56062227" => "40",
    "56070024" => "63",
    "56070040" => "63",
    "56090000" => "38",
    "56240050" => "13",
    "56250030" => "B2",
    "56261735" => "38",
    "56270024" => "63",
    "56270044" => "63",
    "56290000" => "06",
    "57000000" => "09",
    "57020086" => "99",
    "57020301" => "09",
    "57020500" => "D7",
    "57020600" => "09",
    "57040044" => "13",
    "57050120" => "00",
    "57051001" => "00",
    "57051870" => "00",
    "57060000" => "44",
    "57062675" => "38",
    "57064221" => "38",
    "57069067" => "38",
    "57069081" => "38",
    "57069144" => "38",
    "57069238" => "38",
    "57069257" => "38",
    "57069315" => "38",
    "57069361" => "38",
    "57069727" => "38",
    "57069806" => "09",
    "57070024" => "63",
    "57070045" => "63",
    "57070324" => "63",
    "57070395" => "63",
    "57080070" => "76",
    "57090000" => "64",
    "57090010" => "64",
    "57090900" => "91",
    "57091000" => "06",
    "57091100" => "06",
    "57092800" => "06",
    "57263015" => "38",
    "57351030" => "00",
    "57361476" => "38",
    "57363243" => "38",
    "57391200" => "06",
    "57391500" => "06",
    "57391800" => "06",
    "57450120" => "00",
    "57460117" => "38",
    "57461759" => "09",
    "57470024" => "63",
    "57470047" => "63",
    "57650010" => "00",
    "57661253" => "38",
    "57662263" => "38",
    "57751310" => "00",
    "57761591" => "34",
    "57761599" => "34",
    "57762265" => "38",
    "58520086" => "99",
    "58540035" => "13",
    "58550130" => "00",
    "58560103" => "38",
    "58560294" => "06",
    "58561626" => "38",
    "58561771" => "38",
    "58564788" => "38",
    "58570024" => "63",
    "58570048" => "63",
    "58580074" => "76",
    "58590900" => "91",
    "58650030" => "00",
    "58651240" => "00",
    "58660101" => "38",
    "58661901" => "38",
    "58662653" => "38",
    "58668818" => "38",
    "58691500" => "38",
    "58751230" => "00",
    "58760954" => "38",
    "58761343" => "38",
    "58771224" => "63",
    "58771242" => "63",
    "59000000" => "09",
    "59010011" => "09",
    "59010012" => "09",
    "59010013" => "09",
    "59010014" => "09",
    "59010015" => "09",
    "59010016" => "09",
    "59010017" => "09",
    "59010018" => "09",
    "59010019" => "09",
    "59010021" => "09",
    "59010022" => "09",
    "59010023" => "09",
    "59010024" => "09",
    "59010025" => "09",
    "59010026" => "09",
    "59010027" => "09",
    "59010028" => "09",
    "59010029" => "09",
    "59010031" => "09",
    "59010032" => "09",
    "59010033" => "09",
    "59010034" => "09",
    "59010035" => "09",
    "59010036" => "09",
    "59010037" => "09",
    "59010038" => "09",
    "59010039" => "09",
    "59010040" => "09",
    "59010041" => "09",
    "59010042" => "09",
    "59010044" => "09",
    "59010045" => "09",
    "59010047" => "09",
    "59010048" => "09",
    "59010049" => "09",
    "59010051" => "09",
    "59010052" => "09",
    "59010053" => "09",
    "59010054" => "09",
    "59010055" => "09",
    "59010056" => "09",
    "59010057" => "09",
    "59010058" => "09",
    "59010059" => "09",
    "59010061" => "09",
    "59010062" => "09",
    "59010063" => "09",
    "59010064" => "09",
    "59010065" => "09",
    "59010066" => "24",
    "59010068" => "09",
    "59010069" => "09",
    "59010071" => "09",
    "59010072" => "09",
    "59010073" => "09",
    "59010074" => "09",
    "59010400" => "32",
    "59020090" => "99",
    "59020400" => "09",
    "59040000" => "13",
    "59050000" => "27",
    "59050101" => "E3",
    "59051090" => "21",
    "59070000" => "63",
    "59070070" => "63",
    "59080090" => "76",
    "59090900" => "91",
    "59092000" => "06",
    "59099550" => "06",
    "59190000" => "06",
    "59190200" => "06",
    "59251020" => "00",
    "59252046" => "C9",
    "59291000" => "06",
    "59291200" => "06",
    "59320087" => "99",
    "59350110" => "00",
    "59351040" => "00",
    "59390100" => "06",
    "59391200" => "06",
    "59392000" => "06",
    "59392200" => "06",
    "59393000" => "06",
    "59450010" => "00",
    "59491300" => "06",
    "60000000" => "09",
    "60010070" => "24",
    "60010424" => "09",
    "60010700" => "09",
    "60020030" => "65",
    "60020100" => "09",
    "60020290" => "99",
    "60020300" => "09",
    "60030000" => "A3",
    "60030100" => "10",
    "60030200" => "10",
    "60030600" => "09",
    "60030666" => "09",
    "60030700" => "09",
    "60030900" => "06",
    "60031000" => "00",
    "60033000" => "09",
    "60035810" => "06",
    "60040060" => "09",
    "60040061" => "09",
    "60040071" => "13",
    "60040075" => "13",
    "60050000" => "09",
    "60050009" => "09",
    "60050101" => "01",
    "60060000" => "09",
    "60060202" => "09",
    "60060396" => "10",
    "60062775" => "10",
    "60062909" => "10",
    "60069017" => "10",
    "60069066" => "10",
    "60069075" => "10",
    "60069147" => "10",
    "60069158" => "10",
    "60069206" => "10",
    "60069224" => "10",
    "60069235" => "10",
    "60069239" => "10",
    "60069242" => "10",
    "60069245" => "10",
    "60069251" => "10",
    "60069302" => "10",
    "60069303" => "10",
    "60069308" => "10",
    "60069315" => "10",
    "60069336" => "10",
    "60069343" => "10",
    "60069346" => "10",
    "60069350" => "10",
    "60069355" => "10",
    "60069378" => "10",
    "60069387" => "10",
    "60069417" => "10",
    "60069419" => "10",
    "60069420" => "10",
    "60069431" => "10",
    "60069442" => "10",
    "60069455" => "10",
    "60069457" => "10",
    "60069461" => "10",
    "60069462" => "10",
    "60069463" => "10",
    "60069476" => "10",
    "60069485" => "10",
    "60069505" => "10",
    "60069517" => "10",
    "60069527" => "10",
    "60069538" => "10",
    "60069544" => "10",
    "60069545" => "10",
    "60069553" => "10",
    "60069564" => "10",
    "60069595" => "10",
    "60069639" => "10",
    "60069648" => "10",
    "60069669" => "10",
    "60069673" => "10",
    "60069680" => "10",
    "60069685" => "10",
    "60069705" => "10",
    "60069706" => "10",
    "60069710" => "09",
    "60069714" => "10",
    "60069727" => "10",
    "60069738" => "10",
    "60069766" => "10",
    "60069795" => "10",
    "60069798" => "10",
    "60069817" => "10",
    "60069832" => "10",
    "60069842" => "10",
    "60069858" => "10",
    "60069860" => "10",
    "60069876" => "10",
    "60069896" => "10",
    "60069904" => "10",
    "60069905" => "10",
    "60069911" => "10",
    "60069926" => "10",
    "60069927" => "10",
    "60069931" => "10",
    "60069950" => "10",
    "60069976" => "10",
    "60069980" => "10",
    "60070024" => "63",
    "60070070" => "63",
    "60070214" => "63",
    "60070224" => "63",
    "60080000" => "76",
    "60080055" => "76",
    "60080057" => "76",
    "60080085" => "09",
    "60080086" => "09",
    "60080087" => "09",
    "60080088" => "09",
    "60089450" => "09",
    "60090100" => "10",
    "60090133" => "10",
    "60090300" => "10",
    "60090700" => "10",
    "60090800" => "87",
    "60090900" => "91",
    "60120200" => "60",
    "60120500" => "09",
    "60133300" => "09",
    "60241074" => "13",
    "60250010" => "01",
    "60261329" => "10",
    "60261622" => "10",
    "60261818" => "10",
    "60262063" => "10",
    "60262693" => "10",
    "60270024" => "63",
    "60270073" => "63",
    "60290110" => "10",
    "60291120" => "10",
    "60320291" => "99",
    "60340071" => "13",
    "60350130" => "01",
    "60361923" => "10",
    "60380002" => "76",
    "60390000" => "10",
    "60390300" => "10",
    "60391310" => "10",
    "60391420" => "10",
    "60410600" => "09",
    "60420000" => "06",
    "60420020" => "06",
    "60420021" => "06",
    "60420186" => "99",
    "60422000" => "06",
    "60440073" => "13",
    "60450050" => "01",
    "60460142" => "10",
    "60462808" => "10",
    "60470024" => "63",
    "60470082" => "63",
    "60480008" => "76",
    "60490150" => "10",
    "60491430" => "10",
    "60661906" => "10",
    "60663084" => "10",
    "60670024" => "63",
    "60670070" => "63",
    "61030000" => "09",
    "61040014" => "13",
    "61050000" => "01",
    "61060500" => "10",
    "61070024" => "63",
    "61070078" => "63",
    "61080006" => "76",
    "61091200" => "10",
    "61120286" => "99",
    "61140071" => "13",
    "61150020" => "01",
    "61161696" => "10",
    "61170024" => "63",
    "61170076" => "63",
    "61180004" => "76",
    "61190110" => "10",
    "61191310" => "10",
    "61240048" => "13",
    "61261213" => "10",
    "61261339" => "10",
    "61262258" => "10",
    "61262345" => "10",
    "61281007" => "76",
    "61290120" => "10",
    "61340079" => "13",
    "61361722" => "10",
    "61361975" => "10",
    "61370024" => "63",
    "61370086" => "63",
    "61390140" => "10",
    "61391410" => "10",
    "61420086" => "99",
    "61440086" => "13",
    "61450050" => "01",
    "61480001" => "76",
    "61490150" => "10",
    "61491010" => "10",
    "62020000" => "16",
    "62020100" => "09",
    "62040060" => "13",
    "62050000" => "01",
    "62061991" => "10",
    "62062215" => "10",
    "62062643" => "10",
    "62063263" => "10",
    "62070024" => "63",
    "62070081" => "63",
    "62080012" => "76",
    "62090100" => "10",
    "62091400" => "10",
    "62091600" => "10",
    "62091800" => "10",
    "62220000" => "09",
    "62240048" => "13",
    "62250030" => "01",
    "62251550" => "01",
    "62280012" => "76",
    "62290110" => "10",
    "62291020" => "10",
    "62391420" => "10",
    "63000000" => "09",
    "63020086" => "99",
    "63040053" => "13",
    "63050000" => "01",
    "63061486" => "10",
    "63070024" => "63",
    "63070088" => "63",
    "63080015" => "76",
    "63080085" => "09",
    "63090100" => "10",
    "63091010" => "10",
    "63091200" => "10",
    "63091300" => "10",
    "63220090" => "99",
    "63240016" => "13",
    "63250030" => "01",
    "63290110" => "10",
    "64000000" => "09",
    "64020186" => "99",
    "64040033" => "13",
    "64040045" => "13",
    "64050000" => "01",
    "64061854" => "10",
    "64070024" => "63",
    "64070085" => "63",
    "64070215" => "63",
    "64070224" => "63",
    "64080014" => "76",
    "64090100" => "10",
    "64091200" => "10",
    "64091300" => "10",
    "64140036" => "13",
    "64150020" => "01",
    "64161397" => "10",
    "64161608" => "10",
    "64161956" => "10",
    "64163225" => "10",
    "64180014" => "76",
    "64190110" => "10",
    "64191030" => "10",
    "64191210" => "10",
    "64191700" => "10",
    "64240048" => "13",
    "64240071" => "13",
    "64250040" => "01",
    "64251060" => "01",
    "64261363" => "10",
    "64261626" => "10",
    "64261853" => "10",
    "64262408" => "10",
    "64290120" => "10",
    "64291010" => "10",
    "64291420" => "10",
    "64292020" => "10",
    "64292310" => "10",
    "64350070" => "01",
    "64361359" => "10",
    "64380011" => "76",
    "64390130" => "10",
    "65020186" => "99",
    "65040073" => "13",
    "65050110" => "01",
    "65061219" => "10",
    "65062577" => "10",
    "65063086" => "10",
    "65070024" => "63",
    "65070084" => "63",
    "65080009" => "76",
    "65090100" => "10",
    "65091040" => "10",
    "65091300" => "10",
    "65091600" => "10",
    "65092010" => "10",
    "65092200" => "10",
    "65093020" => "10",
    "65110200" => "71",
    "65140072" => "13",
    "65161497" => "10",
    "65162832" => "10",
    "65180005" => "76",
    "65190110" => "10",
    "65191500" => "10",
    "65340004" => "13",
    "65341204" => "13",
    "65351050" => "01",
    "65351260" => "01",
    "65361469" => "10",
    "65361898" => "10",
    "65361989" => "10",
    "65362499" => "10",
    "65370024" => "63",
    "65370075" => "63",
    "65380003" => "76",
    "65390120" => "10",
    "65391210" => "10",
    "65392030" => "10",
    "65440087" => "13",
    "65450070" => "01",
    "65461878" => "10",
    "65462231" => "10",
    "65491320" => "10",
    "65491510" => "10",
    "66000000" => "09",
    "66010075" => "24",
    "66010200" => "09",
    "66010700" => "09",
    "66020020" => "65",
    "66020286" => "99",
    "66020500" => "09",
    "66020566" => "09",
    "66030600" => "06",
    "66040018" => "13",
    "66040026" => "13",
    "66050000" => "09",
    "66050101" => "00",
    "66051220" => "00",
    "66060000" => "09",
    "66060300" => "06",
    "66061407" => "06",
    "66061724" => "06",
    "66062138" => "06",
    "66062366" => "06",
    "66069103" => "06",
    "66069104" => "06",
    "66069342" => "06",
    "66070004" => "63",
    "66070024" => "63",
    "66070213" => "63",
    "66070224" => "63",
    "66080052" => "76",
    "66090800" => "B3",
    "66090900" => "91",
    "66091200" => "06",
    "66190000" => "06",
    "66240002" => "13",
    "66250030" => "00",
    "66251434" => "00",
    "66261092" => "06",
    "66261416" => "06",
    "66270001" => "63",
    "66270024" => "63",
    "66280053" => "76",
    "66290000" => "06",
    "66291300" => "06",
    "66291400" => "06",
    "66340018" => "13",
    "66350036" => "03",
    "66391200" => "06",
    "66391600" => "06",
    "66432700" => "09",
    "66440084" => "13",
    "66450050" => "03",
    "66451346" => "03",
    "66451548" => "03",
    "66451862" => "03",
    "66452776" => "03",
    "66470024" => "63",
    "66470035" => "63",
    "66490000" => "06",
    "66491800" => "06",
    "66492600" => "06",
    "66492700" => "06",
    "66550070" => "00",
    "66562053" => "06",
    "66562300" => "06",
    "66640035" => "13",
    "66650085" => "06",
    "66661244" => "06",
    "66661329" => "06",
    "66661454" => "42",
    "66662155" => "06",
    "66662220" => "06",
    "66670006" => "63",
    "66670024" => "63",
    "66680013" => "76",
    "66690000" => "43",
    "66692300" => "06",
    "66762332" => "06",
    "66762433" => "06",
    "67020190" => "99",
    "67040031" => "13",
    "67040060" => "09",
    "67040061" => "09",
    "67040085" => "13",
    "67050505" => "06",
    "67051203" => "00",
    "67060031" => "06",
    "67070010" => "63",
    "67070024" => "63",
    "67080050" => "76",
    "67080085" => "09",
    "67080086" => "09",
    "67089440" => "09",
    "67090000" => "06",
    "67092300" => "06",
    "67220286" => "99",
    "67230000" => "92",
    "67230001" => "92",
    "67240039" => "13",
    "67250020" => "06",
    "67262243" => "06",
    "67262550" => "06",
    "67270003" => "63",
    "67270024" => "63",
    "67280051" => "76",
    "67290000" => "06",
    "67290100" => "06",
    "67291700" => "06",
    "67291900" => "06",
    "67292200" => "06",
    "67352565" => "00",
    "67390000" => "06",
    "67450048" => "00",
    "67460041" => "06",
    "67461424" => "06",
    "67461733" => "06",
    "67462368" => "06",
    "68000000" => "09",
    "68020186" => "99",
    "68030000" => "32",
    "68040007" => "13",
    "68050101" => "01",
    "68051004" => "00",
    "68051207" => "00",
    "68052230" => "00",
    "68052328" => "00",
    "68052863" => "00",
    "68061505" => "06",
    "68062105" => "06",
    "68062730" => "06",
    "68063479" => "06",
    "68064222" => "06",
    "68070024" => "63",
    "68070030" => "63",
    "68070212" => "63",
    "68070224" => "63",
    "68080030" => "76",
    "68080031" => "76",
    "68080085" => "09",
    "68080086" => "09",
    "68090000" => "06",
    "68090900" => "91",
    "68091900" => "06",
    "68092000" => "06",
    "68092300" => "06",
    "68270024" => "63",
    "68270033" => "63",
    "68290000" => "06",
    "68340058" => "13",
    "68350048" => "00",
    "68351557" => "00",
    "68351865" => "00",
    "68370024" => "63",
    "68370034" => "63",
    "68390000" => "06",
    "68391500" => "06",
    "68452290" => "00",
    "68462427" => "06",
    "68490000" => "06",
    "68492200" => "06",
    "69020190" => "99",
    "69040045" => "13",
    "69050001" => "00",
    "69051410" => "00",
    "69051620" => "00",
    "69051725" => "00",
    "69061800" => "06",
    "69070024" => "63",
    "69070032" => "63",
    "69091200" => "06",
    "69091600" => "06",
    "69220186" => "99",
    "69240075" => "13",
    "69250035" => "00",
    "69251445" => "00",
    "69251755" => "00",
    "69270024" => "63",
    "69270038" => "63",
    "69280035" => "76",
    "69290000" => "06",
    "69291000" => "06",
    "69291099" => "06",
    "69362032" => "06",
    "69400000" => "09",
    "69440007" => "13",
    "69440060" => "09",
    "69450065" => "03",
    "69470024" => "63",
    "69470039" => "63",
    "69490000" => "06",
    "69491700" => "06",
    "70000000" => "09",
    "70010080" => "24",
    "70010424" => "09",
    "70010500" => "09",
    "70010555" => "01",
    "70010570" => "09",
    "70010800" => "11",
    "70011100" => "06",
    "70011110" => "06",
    "70011200" => "17",
    "70011300" => "16",
    "70011400" => "09",
    "70011500" => "09",
    "70011600" => "06",
    "70011700" => "01",
    "70011900" => "10",
    "70012000" => "09",
    "70012300" => "17",
    "70012400" => "09",
    "70012600" => "06",
    "70012700" => "09",
    "70012900" => "09",
    "70013000" => "67",
    "70013010" => "67",
    "70013100" => "32",
    "70013199" => "32",
    "70013400" => "09",
    "70013500" => "06",
    "70015000" => "09",
    "70015015" => "09",
    "70015025" => "09",
    "70015035" => "09",
    "70017000" => "09",
    "70020270" => "95",
    "70020300" => "09",
    "70020500" => "09",
    "70020570" => "09",
    "70020800" => "09",
    "70021180" => "99",
    "70022200" => "16",
    "70025175" => "99",
    "70030014" => "00",
    "70030300" => "09",
    "70030400" => "10",
    "70031000" => "00",
    "70032500" => "09",
    "70033100" => "09",
    "70035000" => "61",
    "70040041" => "13",
    "70040045" => "13",
    "70040048" => "13",
    "70040060" => "09",
    "70040061" => "09",
    "70040062" => "09",
    "70040063" => "09",
    "70040070" => "09",
    "70045050" => "13",
    "70050000" => "09",
    "70051003" => "00",
    "70051540" => "00",
    "70051995" => "00",
    "70052060" => "00",
    "70053070" => "00",
    "70054306" => "00",
    "70070010" => "63",
    "70070024" => "63",
    "70070324" => "63",
    "70070362" => "63",
    "70080000" => "76",
    "70080056" => "76",
    "70080057" => "76",
    "70080085" => "09",
    "70080086" => "09",
    "70080087" => "09",
    "70080088" => "09",
    "70089470" => "09",
    "70089472" => "09",
    "70090100" => "88",
    "70090124" => "10",
    "70090500" => "81",
    "70091500" => "88",
    "70091510" => "88",
    "70091600" => "88",
    "70091900" => "88",
    "70093200" => "88",
    "70093400" => "88",
    "70110088" => "09",
    "70110500" => "09",
    "70120100" => "09",
    "70120400" => "00",
    "70120500" => "D2",
    "70120600" => "09",
    "70120700" => "00",
    "70130700" => "09",
    "70130799" => "09",
    "70130800" => "88",
    "70133300" => "09",
    "70150000" => "00",
    "70160000" => "09",
    "70163370" => "88",
    "70166486" => "88",
    "70169132" => "88",
    "70169165" => "88",
    "70169168" => "88",
    "70169186" => "88",
    "70169190" => "88",
    "70169191" => "88",
    "70169195" => "88",
    "70169310" => "88",
    "70169331" => "88",
    "70169333" => "88",
    "70169351" => "88",
    "70169356" => "88",
    "70169382" => "88",
    "70169383" => "88",
    "70169388" => "88",
    "70169402" => "88",
    "70169410" => "88",
    "70169413" => "88",
    "70169450" => "88",
    "70169459" => "88",
    "70169460" => "88",
    "70169464" => "88",
    "70169465" => "88",
    "70169466" => "88",
    "70169470" => "88",
    "70169474" => "88",
    "70169476" => "88",
    "70169509" => "88",
    "70169521" => "88",
    "70169524" => "88",
    "70169530" => "88",
    "70169538" => "88",
    "70169541" => "88",
    "70169543" => "88",
    "70169558" => "88",
    "70169566" => "88",
    "70169568" => "88",
    "70169571" => "88",
    "70169575" => "88",
    "70169576" => "88",
    "70169585" => "88",
    "70169598" => "88",
    "70169599" => "88",
    "70169602" => "88",
    "70169605" => "88",
    "70169614" => "88",
    "70169619" => "88",
    "70169653" => "88",
    "70169693" => "88",
    "70190000" => "88",
    "70190010" => "88",
    "70220000" => "09",
    "70220200" => "60",
    "70220300" => "09",
    "70220800" => "07",
    "70220900" => "61",
    "70230600" => "06",
    "70250150" => "00",
    "70320090" => "99",
    "70321194" => "99",
    "70322192" => "99",
    "70350000" => "00",
    "70351030" => "00",
    "70362595" => "88",
    "70380006" => "76",
    "70390000" => "88",
    "70390010" => "88",
    "70391800" => "88",
    "71020072" => "99",
    "71021270" => "99",
    "71022182" => "99",
    "71023173" => "99",
    "71050000" => "00",
    "71051010" => "00",
    "71052050" => "00",
    "71061009" => "88",
    "71062802" => "88",
    "71090000" => "88",
    "71120077" => "99",
    "71120078" => "99",
    "71121176" => "99",
    "71122183" => "99",
    "71140041" => "13",
    "71141041" => "13",
    "71142041" => "13",
    "71150000" => "00",
    "71151020" => "00",
    "71152570" => "00",
    "71152680" => "00",
    "71160000" => "88",
    "71160161" => "88",
    "71161964" => "88",
    "71162355" => "88",
    "71162804" => "88",
    "71165150" => "88",
    "71180005" => "76",
    "71190000" => "88",
    "71191000" => "88",
    "72000000" => "09",
    "72012300" => "26",
    "72020070" => "99",
    "72020700" => "23",
    "72021271" => "99",
    "72021876" => "99",
    "72030014" => "00",
    "72030227" => "00",
    "72030260" => "09",
    "72040046" => "13",
    "72050000" => "00",
    "72050101" => "00",
    "72051210" => "00",
    "72051840" => "00",
    "72062152" => "88",
    "72069002" => "88",
    "72069005" => "88",
    "72069034" => "88",
    "72069036" => "88",
    "72069043" => "88",
    "72069105" => "88",
    "72069113" => "88",
    "72069114" => "88",
    "72069119" => "88",
    "72069123" => "88",
    "72069126" => "88",
    "72069132" => "88",
    "72069135" => "88",
    "72069155" => "88",
    "72069179" => "88",
    "72069181" => "88",
    "72069193" => "88",
    "72069209" => "88",
    "72069220" => "88",
    "72069235" => "88",
    "72069263" => "88",
    "72069274" => "88",
    "72069308" => "88",
    "72069329" => "88",
    "72069736" => "88",
    "72069789" => "88",
    "72070001" => "63",
    "72070024" => "63",
    "72070324" => "63",
    "72070365" => "63",
    "72080001" => "76",
    "72090000" => "88",
    "72090500" => "84",
    "72090900" => "91",
    "72091800" => "10",
    "72120078" => "99",
    "72122181" => "99",
    "72140052" => "13",
    "72150000" => "00",
    "72151340" => "00",
    "72151650" => "00",
    "72151880" => "00",
    "72152070" => "00",
    "72160818" => "88",
    "72169013" => "88",
    "72169080" => "88",
    "72169218" => "88",
    "72169246" => "88",
    "72169380" => "88",
    "72169745" => "88",
    "72169756" => "88",
    "72169764" => "88",
    "72169812" => "88",
    "72169831" => "88",
    "72170007" => "63",
    "72170024" => "63",
    "72170324" => "63",
    "72170363" => "63",
    "72180002" => "76",
    "72191600" => "88",
    "72220074" => "99",
    "72223182" => "99",
    "72250000" => "00",
    "72250160" => "00",
    "72251520" => "A3",
    "72261754" => "88",
    "72262401" => "88",
    "72290100" => "88",
    "73050000" => "00",
    "73061191" => "88",
    "73090000" => "88",
    "73120075" => "99",
    "73140046" => "13",
    "73150000" => "00",
    "73160000" => "88",
    "73180011" => "76",
    "73190000" => "88",
    "73191500" => "10",
    "73311600" => "09",
    "73320073" => "99",
    "73321177" => "99",
    "73322380" => "99",
    "73331700" => "09",
    "73340046" => "13",
    "73350000" => "00",
    "73351635" => "00",
    "73369264" => "88",
    "73369821" => "88",
    "73369823" => "88",
    "73369826" => "88",
    "73369851" => "88",
    "73369854" => "88",
    "73369859" => "88",
    "73369871" => "88",
    "73369881" => "88",
    "73369902" => "88",
    "73369918" => "88",
    "73369920" => "88",
    "73369933" => "88",
    "73369936" => "88",
    "73369954" => "88",
    "73370008" => "63",
    "73370024" => "63",
    "73380004" => "76",
    "73390000" => "88",
    "73392000" => "88",
    "73420071" => "99",
    "73421478" => "99",
    "73440048" => "13",
    "73450000" => "00",
    "73451450" => "00",
    "73460046" => "88",
    "73480013" => "76",
    "74020074" => "99",
    "74020100" => "60",
    "74020150" => "60",
    "74040082" => "13",
    "74050000" => "00",
    "74051230" => "00",
    "74061101" => "88",
    "74061564" => "88",
    "74061670" => "88",
    "74061813" => "88",
    "74061814" => "88",
    "74062490" => "88",
    "74062786" => "88",
    "74064593" => "88",
    "74065782" => "88",
    "74066749" => "88",
    "74067000" => "88",
    "74069744" => "88",
    "74069752" => "88",
    "74069758" => "88",
    "74069768" => "88",
    "74090000" => "88",
    "74092400" => "88",
    "74120071" => "99",
    "74131000" => "09",
    "74140048" => "13",
    "74150000" => "00",
    "74151450" => "00",
    "74160025" => "88",
    "74161608" => "88",
    "74164149" => "88",
    "74165013" => "88",
    "74180009" => "76",
    "74190000" => "88",
    "74191000" => "88",
    "74220075" => "99",
    "74221170" => "99",
    "74240062" => "13",
    "74250000" => "00",
    "74251020" => "00",
    "74260110" => "88",
    "74261024" => "88",
    "74290000" => "88",
    "74290100" => "98",
    "74320073" => "99",
    "74340077" => "13",
    "74350000" => "11",
    "74351430" => "00",
    "74351740" => "10",
    "74361211" => "88",
    "74362663" => "88",
    "74364689" => "88",
    "74366666" => "88",
    "74369068" => "88",
    "74369088" => "88",
    "74369130" => "88",
    "74369146" => "88",
    "74369656" => "88",
    "74369662" => "88",
    "74369704" => "88",
    "74380007" => "76",
    "74390000" => "88",
    "74391300" => "88",
    "74391400" => "88",
    "74392300" => "88",
    "75000000" => "09",
    "75020073" => "99",
    "75021174" => "99",
    "75040062" => "13",
    "75050000" => "00",
    "75051040" => "00",
    "75051565" => "00",
    "75060150" => "88",
    "75061168" => "88",
    "75061851" => "88",
    "75062026" => "88",
    "75069014" => "88",
    "75069015" => "88",
    "75069020" => "88",
    "75069038" => "88",
    "75069050" => "88",
    "75069055" => "88",
    "75069061" => "88",
    "75069078" => "88",
    "75069081" => "88",
    "75069094" => "88",
    "75069110" => "88",
    "75069171" => "88",
    "75070013" => "63",
    "75070024" => "63",
    "75080003" => "76",
    "75090000" => "88",
    "75090300" => "88",
    "75090500" => "84",
    "75090900" => "91",
    "75091400" => "88",
    "75220070" => "99",
    "75240000" => "13",
    "75250000" => "00",
    "75261700" => "88",
    "75290000" => "88",
    "75320075" => "99",
    "75340090" => "13",
    "75350000" => "00",
    "75351960" => "00",
    "75360011" => "88",
    "75362039" => "88",
    "75363189" => "88",
    "75390000" => "88",
    "76000000" => "09",
    "76010085" => "24",
    "76020070" => "99",
    "76020099" => "09",
    "76026000" => "C7",
    "76030080" => "01",
    "76030600" => "06",
    "76030800" => "01",
    "76032000" => "06",
    "76032001" => "06",
    "76035000" => "55",
    "76040060" => "09",
    "76040061" => "13",
    "76040062" => "09",
    "76040065" => "13",
    "76050000" => "09",
    "76050101" => "49",
    "76052080" => "00",
    "76060000" => "09",
    "76060618" => "88",
    "76060620" => "88",
    "76061025" => "88",
    "76061482" => "88",
    "76069369" => "88",
    "76069372" => "88",
    "76069378" => "88",
    "76069404" => "88",
    "76069409" => "88",
    "76069410" => "88",
    "76069440" => "88",
    "76069441" => "88",
    "76069448" => "88",
    "76069449" => "88",
    "76069462" => "88",
    "76069468" => "88",
    "76069486" => "88",
    "76069512" => "88",
    "76069553" => "88",
    "76069559" => "88",
    "76069564" => "88",
    "76069576" => "88",
    "76069598" => "88",
    "76069602" => "88",
    "76069611" => "88",
    "76069635" => "88",
    "76069663" => "88",
    "76069669" => "88",
    "76070012" => "63",
    "76070024" => "63",
    "76070324" => "63",
    "76070361" => "63",
    "76080040" => "76",
    "76080053" => "76",
    "76080055" => "09",
    "76080085" => "09",
    "76080086" => "09",
    "76089480" => "09",
    "76089482" => "09",
    "76090400" => "88",
    "76090500" => "81",
    "76090900" => "91",
    "76211900" => "88",
    "76220073" => "99",
    "76230000" => "11",
    "76240011" => "13",
    "76250000" => "00",
    "76251020" => "00",
    "76260451" => "88",
    "76320072" => "99",
    "76340061" => "13",
    "76350000" => "49",
    "76351040" => "00",
    "76351560" => "00",
    "76360033" => "88",
    "76391000" => "88",
    "76420080" => "99",
    "76450000" => "A5",
    "76460015" => "88",
    "76461485" => "88",
    "76520071" => "99",
    "76550000" => "00",
    "76551020" => "00",
    "76551540" => "00",
    "76551860" => "00",
    "76560060" => "88",
    "76591000" => "88",
    "77020070" => "99",
    "77040080" => "13",
    "77050000" => "00",
    "77060100" => "88",
    "77061004" => "88",
    "77061425" => "88",
    "77062014" => "88",
    "77062139" => "88",
    "77069044" => "88",
    "77069051" => "88",
    "77069052" => "88",
    "77069091" => "88",
    "77069461" => "88",
    "77069739" => "88",
    "77069746" => "88",
    "77069764" => "88",
    "77069782" => "88",
    "77069836" => "88",
    "77069868" => "88",
    "77069870" => "88",
    "77069906" => "88",
    "77069908" => "88",
    "77091800" => "88",
    "77120073" => "99",
    "77140061" => "13",
    "77150000" => "00",
    "77190000" => "88",
    "77300000" => "09",
    "77320072" => "99",
    "77322200" => "00",
    "77340076" => "13",
    "77350110" => "00",
    "77361600" => "88",
    "77363749" => "88",
    "77365792" => "88",
    "78020070" => "99",
    "78040081" => "13",
    "78050000" => "00",
    "78055050" => "00",
    "78060896" => "88",
    "78140000" => "13",
    "78160069" => "88",
    "78161575" => "88",
    "78320076" => "99",
    "78340091" => "13",
    "78350000" => "00",
    "78360000" => "88",
    "79000000" => "09",
    "79020076" => "99",
    "79030001" => "09",
    "79032038" => "00",
    "79040047" => "13",
    "79050000" => "00",
    "79061000" => "88",
    "79062106" => "88",
    "79063060" => "88",
    "79063122" => "88",
    "79065028" => "88",
    "79069001" => "88",
    "79069010" => "88",
    "79069031" => "88",
    "79069150" => "88",
    "79069165" => "88",
    "79069181" => "88",
    "79069188" => "88",
    "79069213" => "88",
    "79069271" => "88",
    "79070016" => "63",
    "79070024" => "63",
    "79080052" => "76",
    "79080085" => "09",
    "79090000" => "88",
    "79161058" => "88",
    "79161499" => "88",
    "79190000" => "88",
    "79320075" => "99",
    "79330111" => "09",
    "79340054" => "13",
    "79350000" => "00",
    "79350101" => "00",
    "79351010" => "00",
    "79351730" => "00",
    "79353090" => "00",
    "79362081" => "88",
    "79363016" => "88",
    "79363151" => "88",
    "79364069" => "88",
    "79380051" => "76",
    "79520070" => "99",
    "79540049" => "13",
    "79550000" => "00",
    "79561348" => "88",
    "79562514" => "88",
    "79565568" => "88",
    "79567531" => "88",
    "79568518" => "88",
    "79570024" => "63",
    "79570051" => "63",
    "79570324" => "63",
    "79570364" => "63",
    "79580099" => "76",
    "79589402" => "09",
    "79590000" => "88",
    "79650000" => "00",
    "79665540" => "88",
    "79666548" => "88",
    "79668509" => "88",
    "79690000" => "88",
    "80020086" => "99",
    "80020087" => "99",
    "80040000" => "13",
    "80050500" => "20",
    "80053000" => "20",
    "80053572" => "C0",
    "80053622" => "C0",
    "80053722" => "C0",
    "80053762" => "B6",
    "80054000" => "20",
    "80055008" => "20",
    "80055500" => "20",
    "80062608" => "32",
    "80063508" => "28",
    "80063558" => "32",
    "80063598" => "32",
    "80063628" => "32",
    "80063648" => "28",
    "80063678" => "32",
    "80063718" => "32",
    "80080000" => "76",
    "80093574" => "32",
    "80093784" => "32",
    "80550101" => "20",
    "80550200" => "20",
    "81000000" => "09",
    "81020500" => "09",
    "81040000" => "13",
    "81050555" => "20",
    "81052000" => "20",
    "81053272" => "C0",
    "81054000" => "20",
    "81055000" => "20",
    "81055555" => "20",
    "81063028" => "32",
    "81063238" => "32",
    "81068106" => "09",
    "81069052" => "32",
    "81070000" => "63",
    "81070024" => "63",
    "81080000" => "76",
    "81093034" => "32",
    "81093054" => "32",
    "81093274" => "32",
    "82000000" => "09",
    "82020086" => "99",
    "82020087" => "99",
    "82020088" => "99",
    "82040000" => "13",
    "82040085" => "13",
    "82050000" => "00",
    "82051000" => "20",
    "82052020" => "20",
    "82054052" => "C0",
    "82055000" => "20",
    "82056060" => "20",
    "82057070" => "20",
    "82060197" => "06",
    "82064038" => "32",
    "82064088" => "32",
    "82064168" => "32",
    "82064188" => "32",
    "82064228" => "32",
    "82070000" => "63",
    "82070024" => "63",
    "82070324" => "63",
    "82070366" => "63",
    "82080000" => "76",
    "82094004" => "06",
    "82094054" => "32",
    "83020086" => "99",
    "83020087" => "99",
    "83020088" => "99",
    "83040000" => "13",
    "83050000" => "20",
    "83050200" => "20",
    "83050303" => "20",
    "83050505" => "20",
    "83053030" => "20",
    "83064488" => "32",
    "83064568" => "32",
    "83065408" => "32",
    "83080000" => "76",
    "83094444" => "32",
    "83094454" => "06",
    "83094494" => "32",
    "83094495" => "32",
    "84020087" => "99",
    "84040000" => "13",
    "84050000" => "20",
    "84051010" => "20",
    "84054040" => "20",
    "84054722" => "20",
    "84055050" => "20",
    "84064798" => "88",
    "84069065" => "32",
    "84080000" => "76",
    "84094754" => "32",
    "84094755" => "32",
    "84094814" => "32",
    "85000000" => "09",
    "85010500" => "09",
    "85020086" => "99",
    "85020500" => "09",
    "85040000" => "13",
    "85040060" => "09",
    "85040061" => "09",
    "85050100" => "20",
    "85050300" => "20",
    "85055000" => "20",
    "85060000" => "32",
    "85065028" => "32",
    "85080000" => "76",
    "85080085" => "09",
    "85080086" => "09",
    "85080200" => "76",
    "85089270" => "09",
    "85090000" => "06",
    "85094984" => "06",
    "85095004" => "06",
    "85550000" => "20",
    "85590000" => "06",
    "85590100" => "06",
    "85591000" => "06",
    "86000000" => "09",
    "86010090" => "24",
    "86010424" => "09",
    "86020086" => "99",
    "86020500" => "09",
    "86033300" => "09",
    "86040000" => "13",
    "86040060" => "09",
    "86040061" => "09",
    "86050000" => "09",
    "86050200" => "20",
    "86050600" => "20",
    "86055002" => "20",
    "86055462" => "C0",
    "86055592" => "D0",
    "86065448" => "32",
    "86065468" => "06",
    "86065483" => "06",
    "86069070" => "06",
    "86070000" => "63",
    "86070024" => "63",
    "86070407" => "63",
    "86070424" => "63",
    "86080000" => "76",
    "86080055" => "76",
    "86080057" => "76",
    "86080085" => "09",
    "86080086" => "09",
    "86089280" => "09",
    "86095484" => "06",
    "86095554" => "06",
    "86095604" => "06",
    "87000000" => "09",
    "87020086" => "99",
    "87020087" => "99",
    "87020088" => "99",
    "87040000" => "13",
    "87050000" => "20",
    "87051000" => "20",
    "87052000" => "20",
    "87054000" => "20",
    "87055000" => "20",
    "87058000" => "20",
    "87069075" => "06",
    "87069077" => "06",
    "87070000" => "63",
    "87070024" => "63",
    "87070406" => "63",
    "87070424" => "63",
    "87080000" => "76",
    "87095824" => "06",
    "87095899" => "09",
    "87095934" => "06",
    "87095974" => "06",
    "87096124" => "06",
    "87096214" => "06"
    );

    /**
     * Check if the country is supported
     *
     * @param String $countryCode to check country code
     *
     * @return bool ture if the country is supported
     */
    public static function isCountrySupported($countryCode)
    {
        if (strtolower($countryCode) === strtolower('DE')) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * Check if the bank code is supported
     *
     * @param String $bankCode the bank code to check
     *
     * @return bool true if it is supported
     */
    public static function isBankCodeSupported($bankCode)
    {
        if (array_key_exists($bankCode, self::$checkSumFunction)) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * Return the check method for a bank code
     *
     * @param $bankCode bank code
     *
     * @return string with the check method
     */
    public static function getCheckMethod($bankCode)
    {
        return self::$checkSumFunction[$bankCode];
    }

    /**
     * Checks the check number of a bank account number
     * The bank account number will be extracted by the iban
     *
     * @param String $bankAccountNumber bank account number to check
     * @param array  $bankCode          bank code
     *
     * @return boolean true if the check number is valid else false
     */
    public static function isValid($bankAccountNumber, $bankCode)
    {
        $calculateMethodKey = self::$checkSumFunction[$bankCode];

        if (strlen($bankAccountNumber) != 10) {
            for ($i = 0; $i < 10; $i++) {
                $bankAccountNumber = "0" . $bankAccountNumber;

                if (strlen($bankAccountNumber) == 10) {
                    break;
                }
            }
        }

        switch ($calculateMethodKey)
        {
        case "00":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod00($bankAccountNumber);

        case "01":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod01($bankAccountNumber);

        case "02":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod02($bankAccountNumber);

        case "03":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod03($bankAccountNumber);

        case "04":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod04($bankAccountNumber);

        case "05":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod05($bankAccountNumber);

        case "06":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod06($bankAccountNumber);

        case "07":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod07($bankAccountNumber);

        case "08":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod08($bankAccountNumber);

        case "09":
            return true;

        case "10":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod10($bankAccountNumber);

        case "11":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod11($bankAccountNumber);

        case "12":
            return true;

        case "13":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod13($bankAccountNumber);

        case "14":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod14($bankAccountNumber);

        case "15":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod15($bankAccountNumber);

        case "16":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod16($bankAccountNumber);

        case "17":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod17($bankAccountNumber);

        case "18":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod18($bankAccountNumber);

        case "19":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod19($bankAccountNumber);

        case "20":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod20($bankAccountNumber);

        case "21":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod21($bankAccountNumber);

        case "22":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod22($bankAccountNumber);

        case "23":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod23($bankAccountNumber);

        case "24":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod24($bankAccountNumber);

        case "25":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod25($bankAccountNumber);

        case "26":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod26($bankAccountNumber);

        case "27":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod27($bankAccountNumber);

        case "28":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod28($bankAccountNumber);

        case "29":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod29($bankAccountNumber);

        case "30":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod30($bankAccountNumber);

        case "31":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod31($bankAccountNumber);

        case "32":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod32($bankAccountNumber);

        case "33":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod33($bankAccountNumber);

        case "34":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod34($bankAccountNumber);

        case "35":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod35($bankAccountNumber);

        case "36":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod36($bankAccountNumber);

        case "37":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod37($bankAccountNumber);

        case "38":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod38($bankAccountNumber);

        case "39":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod39($bankAccountNumber);

        case "40":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod40($bankAccountNumber);

        case "41":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod41($bankAccountNumber);

        case "42":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod42($bankAccountNumber);

        case "43":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod43($bankAccountNumber);

        case "44":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod44($bankAccountNumber);

        case "45":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod45($bankAccountNumber);

        case "46":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod46($bankAccountNumber);

        case "47":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod47($bankAccountNumber);

        case "48":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod48($bankAccountNumber);

        case "49":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod49($bankAccountNumber);

        case "50":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod50($bankAccountNumber);

        case "51":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod51($bankAccountNumber);

        case "52":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod52($bankAccountNumber, $bankCode);

        case "53":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod53($bankAccountNumber, $bankCode);

        case "54":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod54($bankAccountNumber);

        case "55":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod55($bankAccountNumber);

        case "56":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod56($bankAccountNumber);

        case "57":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod57($bankAccountNumber);

        case "58":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod58($bankAccountNumber);

        case "59":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod59($bankAccountNumber);

        case "60":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod60($bankAccountNumber);

        case "61":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod61($bankAccountNumber);

        case "62":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod62($bankAccountNumber);

        case "63":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod63($bankAccountNumber);

        case "64":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod64($bankAccountNumber);

        case "65":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod65($bankAccountNumber);

        case "66":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod66($bankAccountNumber);

        case "67":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod67($bankAccountNumber);

        case "68":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod68($bankAccountNumber);

        case "69":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod69($bankAccountNumber);

        case "70":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod70($bankAccountNumber);

        case "71":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod71($bankAccountNumber);

        case "72":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod72($bankAccountNumber);

        case "73":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod73($bankAccountNumber);

        case "74":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod74($bankAccountNumber);

        case "75":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod75($bankAccountNumber);

        case "76":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod76($bankAccountNumber);

        case "77":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod77($bankAccountNumber);

        case "78":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod78($bankAccountNumber);

        case "79":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod79($bankAccountNumber);

        case "80":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod80($bankAccountNumber);

        case "81":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod81($bankAccountNumber);

        case "82":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod82($bankAccountNumber);

        case "83":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod83($bankAccountNumber);

        case "84":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod84($bankAccountNumber);

        case "85":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod85($bankAccountNumber);

        case "86":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod86($bankAccountNumber);

        case "87":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod87($bankAccountNumber);

        case "88":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod88($bankAccountNumber);

        case "89":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod89($bankAccountNumber);

        case "90":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod90($bankAccountNumber);

        case "91":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod91($bankAccountNumber);

        case "92":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod92($bankAccountNumber);

        case "93":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod93($bankAccountNumber);

        case "94":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod94($bankAccountNumber);

        case "95":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod95($bankAccountNumber);

        case "96":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod96($bankAccountNumber);

        case "97":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod97($bankAccountNumber);

        case "98":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod98($bankAccountNumber);

        case "99":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethod99($bankAccountNumber);

        case "A1":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethodA1($bankAccountNumber);

        case "A2":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethodA2($bankAccountNumber);

        case "A3":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethodA3($bankAccountNumber);

        case "A4":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethodA4($bankAccountNumber);

        case "A5":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethodA5($bankAccountNumber);

        case "A6":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethodA6($bankAccountNumber);

        case "A7":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethodA7($bankAccountNumber);

        case "A8":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethodA8($bankAccountNumber);

        case "A9":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethodA9($bankAccountNumber);

        case "B0":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethodB0($bankAccountNumber);

        case "B1":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethodB1($bankAccountNumber);

        case "B2":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethodB2($bankAccountNumber);

        case "B3":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethodB3($bankAccountNumber);

        case "B4":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethodB4($bankAccountNumber);

        case "B5":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethodB5($bankAccountNumber);

        case "B6":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethodB6($bankAccountNumber, $bankCode);

        case "B7":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethodB7($bankAccountNumber);

        case "B8":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethodB8($bankAccountNumber);

        case "B9":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethodB9($bankAccountNumber);

        case "C0":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethodC0($bankAccountNumber, $bankCode);

        case "C1":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethodC1($bankAccountNumber);

        case "C2":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethodC2($bankAccountNumber);

        case "C3":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethodC3($bankAccountNumber);

        case "C4":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethodC4($bankAccountNumber);

        case "C5":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethodC5($bankAccountNumber);

        case "C6":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethodC6($bankAccountNumber);

        case "C7":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethodC7($bankAccountNumber);

        case "C8":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethodC8($bankAccountNumber);

        case "C9":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethodC9($bankAccountNumber);

        case "D0":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethodD0($bankAccountNumber);

        case "D1":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethodD1($bankAccountNumber);

        case "D2":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethodD2($bankAccountNumber);

        case "D3":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethodD3($bankAccountNumber);

        case "D4":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethodD4($bankAccountNumber);

        case "D5":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethodD5($bankAccountNumber);

        case "D6":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethodD6($bankAccountNumber);

        case "D7":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethodD7($bankAccountNumber);

        case "D8":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethodD8($bankAccountNumber);

        case "D9":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethodD9($bankAccountNumber);

        case "E0":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethodE0($bankAccountNumber);

        case "E1":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethodE1($bankAccountNumber);

        case "E2":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethodE2($bankAccountNumber);

        case "E3":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethodE3($bankAccountNumber);

        case "E4":
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return (new self)->_isCheckNumberValidWithMethodE4($bankAccountNumber);

        default:
            (new self)->_saveReporting($bankAccountNumber, $bankCode, $calculateMethodKey);
            return true;
        }
    }

    /**
     * Save the Reporting with iban and the calculate key
     *
     * @param $bankAccountNumber       String bank account
     * @param $bankCode                String bank code
     * @param $checkNumberCalculateKey String calculate key
     *
     * @return null
     */
    function _saveReporting($bankAccountNumber, $bankCode, $checkNumberCalculateKey) : void
    {
        if (!empty(self::$object)) {
            self::$object->save($bankAccountNumber, $bankCode, $checkNumberCalculateKey);
        }
    }

    /**
     * Set the to save object
     *
     * @param $object object to save
     *
     * @return null
     */
    public function setSaveObject($object)
    {
        self::$object = $object;
    }

    /**
     * Checks the check number of bank account number with method '00'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod00($bankAccountNumber)
    {
        $weighting = array(2, 1, 2, 1, 2, 1, 2, 1, 2, 1);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '01'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod01($bankAccountNumber)
    {
        $weighting = array(3, 7, 1, 3, 7, 1, 3, 7, 1, 3);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod01($bankAccountNumber, $weighting);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '02'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod02($bankAccountNumber)
    {
        $weighting = array(2, 3, 4, 5, 6, 7, 8, 9, 2, 3);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod02($bankAccountNumber, $weighting);

        // if calculatedCheckNumber is false it is not possible to calculate a check number
        if (is_bool($calculatedCheckNumber)) {
            if (!$calculatedCheckNumber) {
                return false;
            }
        }

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '03'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod03($bankAccountNumber)
    {
        $weighting = array(2, 1, 2, 1, 2, 1, 2, 1, 2, 1);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        //the calculation of 03 is like 01
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod01($bankAccountNumber, $weighting);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '04'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod04($bankAccountNumber)
    {
        $weighting = array(2, 3, 4, 5, 6, 7, 2, 3, 4, 5);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        //the calculation of 04 is like 02
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod02($bankAccountNumber, $weighting);

        // if calculatedCheckNumber is false it is not possible to calculate a check number
        if (is_bool($calculatedCheckNumber)) {
            if (!$calculatedCheckNumber) {
                return false;
            }
        }

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '05'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod05($bankAccountNumber)
    {
        $weighting = array(7, 3, 1, 7, 3, 1, 7, 3, 1, 7);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        //the calculation of 05 is like 01
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod01($bankAccountNumber, $weighting);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '06'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod06($bankAccountNumber)
    {
        $weighting = array(2, 3, 4, 5, 6, 7, 2, 3, 4, 5);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '07'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod07($bankAccountNumber)
    {
        $weighting = array(2, 3, 4, 5, 6, 7, 8, 9, 10);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        //the calculation of 07 is like 02
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod02($bankAccountNumber, $weighting);

        // if calculatedCheckNumber is false it is not possible to calculate a check number
        if (is_bool($calculatedCheckNumber)) {
            if (!$calculatedCheckNumber) {
                return false;
            }
        }

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '08'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod08($bankAccountNumber)
    {
        if (intval($bankAccountNumber) < 60000) {
            return true;
        }

        $weighting = array(2, 1, 2, 1, 2, 1, 2, 1, 2, 1);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '10'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod10($bankAccountNumber)
    {
        $weighting = array(2, 3, 4, 5, 6, 7, 8, 9, 10);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        //the calculation of 10 is like 06
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '11'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod11($bankAccountNumber)
    {
        $weighting = array(2, 3, 4, 5, 6, 7, 8, 9, 10);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod11($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '13'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod13($bankAccountNumber)
    {
        $weighting = array(2, 1, 2, 1, 2, 1, 2, 1, 2, 1);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod13($bankAccountNumber, $weighting);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '14'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod14($bankAccountNumber)
    {
        $weighting = array(2, 3, 4, 5, 6, 7, 0, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod02($bankAccountNumber, $weighting);

        // if calculatedCheckNumber is false it is not possible to calculate a check number
        if (is_bool($calculatedCheckNumber)) {
            if (!$calculatedCheckNumber) {
                return false;
            }
        }

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '15'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod15($bankAccountNumber)
    {
        $weighting = array(2, 3, 4, 5, 0, 0, 0, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '16'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod16($bankAccountNumber)
    {
        $weighting = array(2, 3, 4, 5, 6, 7, 2, 3, 4, 5);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod16($bankAccountNumber, $weighting);

        // if calculatedCheckNumber is true than is is valid
        if (is_bool($calculatedCheckNumber)) {
            if ($calculatedCheckNumber) {
                return true;
            }
        }

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '17'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod17($bankAccountNumber)
    {
        $weighting = array(2, 1, 2, 1, 2, 1);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 3, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod17Version1($bankAccountNumber, $weighting);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '18'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod18($bankAccountNumber)
    {
        $weighting = array(3, 9, 7, 1, 3, 9, 7, 1, 3, 9, 7);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        //the calculation of 18 is like 01
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod01($bankAccountNumber, $weighting);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '19'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod19($bankAccountNumber)
    {
        $weighting = array(2, 3, 4, 5, 6, 7, 8, 9, 1, 2);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        //the calculation of 19 is like 06
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '20'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod20($bankAccountNumber)
    {
        $weighting = array(2, 3, 4, 5, 6, 7, 8, 9, 3);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        //the calculation of 20 is like 06
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '21'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod21($bankAccountNumber)
    {
        $weighting = array(2, 1, 2, 1, 2, 1, 2, 1, 2, 1);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod21($bankAccountNumber, $weighting);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '22'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod22($bankAccountNumber)
    {
        $weighting = array(3, 1, 3, 1, 3, 1, 3, 1, 3, 1);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod22($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '23'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod23($bankAccountNumber)
    {
        $weighting = array(0, 0, 0, 2, 3, 4, 5, 6, 7, 2, 3, 4, 5);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod16($bankAccountNumber, $weighting);

        // if calculatedCheckNumber is true than is is valid
        if (is_bool($calculatedCheckNumber)) {
            if ($calculatedCheckNumber) {
                return true;
            }
        }

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '24'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod24($bankAccountNumber)
    {
        $weighting = array(1, 2, 3, 1, 2, 3, 1, 2, 3, 1);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod24($bankAccountNumber, $weighting);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '25'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod25($bankAccountNumber)
    {
        $weighting = array(2, 3, 4, 5, 6, 7, 8, 9);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

        $kindOfBandAccountNumber = substr($bankAccountNumber, 1, 1);

        if ($calculatedCheckNumber == 0) {
            if (in_array($kindOfBandAccountNumber, array("8", "9"))) {
                return true;
            } else {
                return false;
            }
        }

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '26'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod26($bankAccountNumber)
    {
        $begin = substr($bankAccountNumber, 0, 2);

        if ($begin == "00") {
            $weighting = array(0, 2, 3, 4, 5, 6, 7, 2, 0, 0, 0);
            $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, false);

            return ($expectedCheckNumber == $calculatedCheckNumber);
        } else {
            $weighting = array(0, 0, 0, 2, 3, 4, 5, 6, 7, 2, 0, 0, 0);
            $expectedCheckNumber = substr($bankAccountNumber, 7, 1);
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, false);

            return ($expectedCheckNumber == $calculatedCheckNumber);
        }
    }

    /**
     * Checks the check number of bank account number with method '27'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod27($bankAccountNumber)
    {
        if (intval($bankAccountNumber) >= 1 && intval($bankAccountNumber) <= 999999999) {
            $weighting = array(2, 1, 2, 1, 2, 1, 2, 1, 2, 1);
            $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

            return ($expectedCheckNumber == $calculatedCheckNumber);
        } else {
            $transformationsRows = "143214321";

            $transformationsRow1 = str_split("0159374826");
            $transformationsRow2 = str_split("0176983254");
            $transformationsRow3 = str_split("0184629573");
            $transformationsRow4 = str_split("0123456789");

            $transformationsTable
                = array ("1" => $transformationsRow1, "2" => $transformationsRow2,
                "3" => $transformationsRow3, "4" => $transformationsRow4);

            $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethodM10H(
                $bankAccountNumber, $transformationsTable, $transformationsRows
            );

            return ($expectedCheckNumber == $calculatedCheckNumber);
        }
    }

    /**
     * Checks the check number of bank account number with method '28'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod28($bankAccountNumber)
    {
        $weighting = array(2, 3, 4, 5, 6, 7, 8);
        $expectedCheckNumber = substr($bankAccountNumber, 7, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod28($bankAccountNumber, $weighting);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '27'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod29($bankAccountNumber)
    {
        $transformationsRows = "143214321";

        $transformationsRow1 = str_split("0159374826");
        $transformationsRow2 = str_split("0176983254");
        $transformationsRow3 = str_split("0184629573");
        $transformationsRow4 = str_split("0123456789");

        $transformationsTable = array (
            "1" => $transformationsRow1, "2" => $transformationsRow2,
            "3" => $transformationsRow3, "4" => $transformationsRow4
        );

        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethodM10H(
            $bankAccountNumber, $transformationsTable, $transformationsRows
        );

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '27'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod30($bankAccountNumber)
    {
        $weighting = array(2, 0, 0, 0, 0, 1, 2, 1, 2);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod30($bankAccountNumber, $weighting);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '31'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod31($bankAccountNumber)
    {
        $weighting = array(9, 8, 7, 6, 5, 4, 3, 2, 1);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod31($bankAccountNumber, $weighting);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '32'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod32($bankAccountNumber)
    {
        $weighting = array(2, 3, 4, 5, 6, 7, 8, 9);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod32($bankAccountNumber, $weighting);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '33'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod33($bankAccountNumber)
    {
        $weighting = array(2, 3, 4, 5, 6, 0, 0, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        //the calculation of 33 is like 06
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '34'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod34($bankAccountNumber)
    {
        $weighting = array(2, 4, 8, 5, 10, 9, 7);
        $expectedCheckNumber = substr($bankAccountNumber, 7, 1);
        //the calculation of 34 is like 28
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod28($bankAccountNumber, $weighting);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '35'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod35($bankAccountNumber)
    {
        $weighting = array(2, 3, 4, 5, 6, 7, 8, 9, 10);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod35($bankAccountNumber, $weighting);

        $ninthNumbers = substr($bankAccountNumber, strlen($bankAccountNumber) - 2, 1);

        if ($calculatedCheckNumber == 10) {
            if ($ninthNumbers == $expectedCheckNumber) {
                return true;
            } else {
                return false;
            }
        }

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '36'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod36($bankAccountNumber)
    {
        $weighting = array(2, 4, 8, 5, 0, 0, 0, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '37'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod37($bankAccountNumber)
    {
        $weighting = array(2, 4, 8, 5, 10, 0, 0, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '38'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod38($bankAccountNumber)
    {
        $weighting = array(2, 4, 8, 5, 10, 9);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        //the calculation of 38 is like 32
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod32($bankAccountNumber, $weighting);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '39'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod39($bankAccountNumber)
    {
        $weighting = array(2, 4, 8, 5, 10, 9, 7, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        //the calculation of 38 is like 32
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod32($bankAccountNumber, $weighting);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '40'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod40($bankAccountNumber)
    {
        $weighting = array(2, 4, 8, 5, 10, 9, 7, 3, 6);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '41'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod41($bankAccountNumber)
    {
        $fourthNumber = substr($bankAccountNumber, 3, 1);

        if ($fourthNumber == "9") {
            $weighting = array(2, 1, 2, 1, 2, 1, 0, 0, 0, 0);
            $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

            return ($expectedCheckNumber == $calculatedCheckNumber);
        } else {
            $weighting = array(2, 1, 2, 1, 2, 1, 2, 1, 2, 1);
            $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

            return ($expectedCheckNumber == $calculatedCheckNumber);
        }
    }

    /**
     * Checks the check number of bank account number with method '42'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod42($bankAccountNumber)
    {
        $weighting = array(2, 3, 4, 5, 6, 7, 8, 9, 0);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '43'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod43($bankAccountNumber)
    {
        $weighting = array(1, 2, 3, 4, 5, 6, 7, 8, 9);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        //the calculation of 43 is like 01
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod01($bankAccountNumber, $weighting);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '44'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod44($bankAccountNumber)
    {
        $weighting = array(2, 4, 8, 5, 10, 0, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        //the calculation of 33 is like 06
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '45'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod45($bankAccountNumber)
    {
        $firstNumber = substr($bankAccountNumber, 0, 1);
        $fifthNumber = substr($bankAccountNumber, 4, 1);
        $firstTwoNumbers = substr($bankAccountNumber, 0, 2);

        if ($firstNumber == "0" || $fifthNumber == "1" || $firstTwoNumbers == "48") {
            return true;
        }

        $weighting = array(2, 1, 2, 1, 2, 1, 2, 1, 2, 1);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '46'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod46($bankAccountNumber)
    {
        $weighting = array(0, 0, 0, 2, 3, 4, 5, 6, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, 7, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, false);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '47'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod47($bankAccountNumber)
    {
        $weighting = array(0, 2, 3, 4, 5, 6, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, 8, 1);
        //the calculation of 47 is like 06
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '48'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod48($bankAccountNumber)
    {
        $weighting = array(0, 2, 3, 4, 5, 6, 7, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, 8, 1);
        //the calculation of 48 is like 06
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '49'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod49($bankAccountNumber)
    {
        // first method (00)
        $weighting = array(2, 1, 2, 1, 2, 1, 2, 1, 2, 1);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        // return true if the check number is valid after the first method
        if ($isCheckNumberValid) {
            return true;
        }

        //second method (01)
        $weighting = array(3, 7, 1, 3, 7, 1, 3, 7, 1, 3);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod01($bankAccountNumber, $weighting);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '50'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod50($bankAccountNumber)
    {
        $weighting = array(0, 0, 0, 0, 2, 3, 4, 5, 6, 7);
        $expectedCheckNumber = substr($bankAccountNumber, 6, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, false);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '51'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod51($bankAccountNumber)
    {
        $kindOfBankAccount = substr($bankAccountNumber, 2, 1);
        // calculation if it is a "Sachkonten" (9)
        if (intval($kindOfBankAccount) == 9) {
            //first "Sachkonto" method (06)
            $weighting = array(2, 3, 4, 5, 6, 7, 8, 0, 0);
            $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

            $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

            //return true if the check number is valid after the first method
            if ($isCheckNumberValid) {
                return true;
            }

            //second "Sachkonto" method (06)
            $weighting = array(2, 3, 4, 5, 6, 7, 8, 9, 10);
            $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

            return ($expectedCheckNumber == $calculatedCheckNumber);
        }

        //first normal method (06)
        $weighting = array(2, 3, 4, 5, 6, 7, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        // return true if the check number is valid after the first method
        if ($isCheckNumberValid) {
            return true;
        }

        //second method (33)
        $isCheckNumberValid = (new self)->_isCheckNumberValidWithMethod33($bankAccountNumber);

        //return true if the check number is valid after the second method
        if ($isCheckNumberValid) {
            return true;
        }

        //third method (00)
        $weighting = array(2, 1, 2, 1, 2, 1, 0, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        //return true if the check number is valid after the third method
        if ($isCheckNumberValid) {
            return true;
        }

        //fourth method (06 with % 7)
        $lastCharOfBankAccount = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);

        //if the last char of the bank account is a 7, 8 or 9 and
        // the first 3 methods are failed the bank account is invalid
        if (in_array(intval($lastCharOfBankAccount), array(7, 8, 9))) {
            return false;
        }

        $weighting = array(2, 3, 4, 5, 6, 0, 0, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber
            = $this->_calculateCheckNumberWithMethod06WithMod7($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '52'
     *
     * @param $bankAccountNumber String bank account number to check
     * @param $bankCode          String bank code
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod52($bankAccountNumber, $bankCode)
    {
        //calculation if a "9" is before the check number
        $kindOfBankAccount = substr($bankAccountNumber, 0, 1);
        if (intval($kindOfBankAccount) == 9) {
            return (new self)->_isCheckNumberValidWithMethod20($bankAccountNumber);
        }

        $weighting = array(2, 4, 8, 5, 10, 9, 7, 3, 6, 1, 2, 4);

        // extract the bank code and bank account number of iban
        $bankAccountNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 8,  8);

        // extract the to use parts
        $partOfBankCode = substr($bankCode, 4, strlen($bankCode) - 4);
        $firstPartOfBankAccountNumber = substr($bankAccountNumber, 0, 1);
        $secondPartOfBankAccountNumber = substr($bankAccountNumber, 2, strlen($bankAccountNumber) - 2);

        // remove the leading "0"
        $partOfBankCode = strval(intval($partOfBankCode));
        $firstPartOfBankAccountNumber = strval(intval($firstPartOfBankAccountNumber));
        $secondPartOfBankAccountNumber = strval(intval($secondPartOfBankAccountNumber));

        $toCheckBankAccountNumber
            = $partOfBankCode . $firstPartOfBankAccountNumber . "0" . $secondPartOfBankAccountNumber;

        $temp = strval(intval($bankAccountNumber));
        $expectedCheckNumber = substr($temp, 1, 1);

        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod52($toCheckBankAccountNumber, $weighting);

        // if calculatedCheckNumber is false it is not possible to calculate a check number
        if (is_bool($calculatedCheckNumber)) {
            if (!$calculatedCheckNumber) {
                return false;
            }
        }

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '52'
     *
     * @param $bankAccountNumber String bank account number to check
     * @param $bankCode          String bank code
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod53($bankAccountNumber, $bankCode)
    {
        //calculation if a "9" is before the check number
        $kindOfBankAccount = substr($bankAccountNumber, 0, 1);
        if (intval($kindOfBankAccount) == 9) {
            return (new self)->_isCheckNumberValidWithMethod20($bankAccountNumber);
        }

        $weighting = array(2, 4, 8, 5, 10, 9, 7, 3, 6, 1, 2, 4);

        // extract the bank code and bank account number of iban
        $bankAccountNumber = substr($bankAccountNumber, 1,  9);

        // extract the to use parts
        $partOfBankCode = substr($bankCode, 4, strlen($bankCode) - 4);
        $firstPartOfBankAccountNumber = substr($bankAccountNumber, 0, 1);
        $secondPartOfBankAccountNumber = substr($bankAccountNumber, 3, strlen($bankAccountNumber) - 2);

        // remove the leading "0"
        $partOfBankCode = strval(intval($partOfBankCode));
        $firstPartOfBankAccountNumber = strval(intval($firstPartOfBankAccountNumber));
        $secondPartOfBankAccountNumber = strval(intval($secondPartOfBankAccountNumber));

        $toCheckBankAccountNumber
            = $partOfBankCode . $firstPartOfBankAccountNumber . "0" . $secondPartOfBankAccountNumber;

        $temp = strval(intval($bankAccountNumber));
        $expectedCheckNumber = substr($temp, 1, 1);

        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod52($toCheckBankAccountNumber, $weighting);

        // if calculatedCheckNumber is false it is not possible to calculate a check number
        if (is_bool($calculatedCheckNumber)) {
            if (!$calculatedCheckNumber) {
                return false;
            }
        }

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '54'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod54($bankAccountNumber)
    {
        $firstTwoNumbers = substr($bankAccountNumber, 0, 2);
        if ($firstTwoNumbers != "49") {
            return false;
        }

        $weighting = array(2, 3, 4, 5, 6, 7, 2, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod54($bankAccountNumber, $weighting);

        // if calculatedCheckNumber is false it is not possible to calculate a check number
        if (is_bool($calculatedCheckNumber)) {
            if (!$calculatedCheckNumber) {
                return false;
            }
        }

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '55'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod55($bankAccountNumber)
    {
        $weighting = array(2, 3, 4, 5, 6, 7, 8, 7, 8);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }



    /**
     * Checks the check number of bank account number with method '56'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod56($bankAccountNumber)
    {
        $firstNumber = substr($bankAccountNumber, 0, 1);

        $weighting = array(2, 1, 2, 1, 2, 1, 2, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        //the calculation of 60 is like 00
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod56($bankAccountNumber, $weighting);

        // replace the calculated check number
        if ($firstNumber == "9") {
            if ($calculatedCheckNumber == "10") {
                $calculatedCheckNumber = "7";
            }

            if ($calculatedCheckNumber == "11") {
                $calculatedCheckNumber = "8";
            }
        } else {
            if ($calculatedCheckNumber == "10" || $calculatedCheckNumber == "11") {
                return false;
            }
        }

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '57'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod57($bankAccountNumber)
    {
        $begin = substr($bankAccountNumber, 0, 2);

        switch ($begin)
        {
        case "00":
            return false;
        case "51":
        case "55":
        case "61":
        case "64":
        case "65":
        case "66":
        case "70":
        case "73":
        case "74":
        case "75":
        case "76":
        case "77":
        case "78":
        case "79":
        case "80":
        case "81":
        case "82":
        case "88":
        case "94":
        case "95":
            // first method (00)
            $firstSixNumbers = substr($bankAccountNumber, 0, 6);

            // if the first 6 numbers are 777777 or 888888 the check number is valid
            if (in_array($firstSixNumbers, array("777777", "888888"))) {
                return true;
            }

            $weighting = array(1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1);
            $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

            return ($expectedCheckNumber == $calculatedCheckNumber);

        case "32":
        case "33":
        case "34":
        case "35":
        case "36":
        case "37":
        case "38":
        case "39":
        case "41":
        case "52":
        case "53":
        case "54":
        case "56":
        case "57":
        case "58":
        case "59":
        case "60":
        case "62":
        case "63":
        case "67":
        case "68":
        case "69":
        case "71":
        case "72":
        case "83":
        case "84":
        case "85":
        case "86":
        case "87":
        case "89":
        case "90":
        case "92":
        case "93":
        case "96":
        case "97":
        case "98":
            // second method (00)
            $weighting = array(1, 2, 1, 2, 1, 2, 1, 0, 2, 1, 2);
            $expectedCheckNumber = substr($bankAccountNumber, 2, 1);
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, false);

            return ($expectedCheckNumber == $calculatedCheckNumber);

        case "40":
        case "50":
        case "91":
        case "99":
            // third method (09)
            return true;

        case "01":
        case "02":
        case "03":
        case "04":
        case "05":
        case "06":
        case "07":
        case "08":
        case "09":
        case "10":
        case "11":
        case "12":
        case "13":
        case "14":
        case "15":
        case "16":
        case "17":
        case "18":
        case "19":
        case "20":
        case "21":
        case "22":
        case "23":
        case "24":
        case "25":
        case "26":
        case "27":
        case "28":
        case "29":
        case "30":
        case "31":
            // fourth method

            $thirdAndFourthNumber = substr($bankAccountNumber, 2, 2);
            $seventhEighthNinthNumber = substr($bankAccountNumber, 6, 3);

            if ($bankAccountNumber == "0185125434") {
                return true;
            }

            if (intval($thirdAndFourthNumber) >= 1 && intval($thirdAndFourthNumber) <= 12) {
                if (intval($seventhEighthNinthNumber) < 500) {
                    return true;
                }
            }

            return false;
        default :
            return false;
        }
    }

    /**
     * Checks the check number of bank account number with method '58'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod58($bankAccountNumber)
    {
        $weighting = array(2, 3, 4, 5, 6, 0, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod02($bankAccountNumber, $weighting);

        // if calculatedCheckNumber is false it is not possible to calculate a check number
        if (is_bool($calculatedCheckNumber)) {
            if (!$calculatedCheckNumber) {
                return false;
            }
        }

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '58'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod59($bankAccountNumber)
    {
        $begin = substr($bankAccountNumber, 0, 2);

        if ($begin == "00") {
            return true;
        }

        $weighting = array(2, 1, 2, 1, 2, 1, 2, 1, 2, 1);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '60'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod60($bankAccountNumber)
    {
        $weighting = array(2, 1, 2, 1, 2, 1, 2, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        //the calculation of 60 is like 00
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '61'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod61($bankAccountNumber)
    {
        $weighting = array(2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2);
        $expectedCheckNumber = substr($bankAccountNumber, 7, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod61($bankAccountNumber, $weighting);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '62'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod62($bankAccountNumber)
    {
        $weighting = array(0, 0, 2, 1, 2, 1, 2, 0, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, 7, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '63'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod63($bankAccountNumber)
    {
        $weighting = array(2, 1, 2, 1, 2, 1, 2, 1);

        $begin = substr($bankAccountNumber, 0, 3);

        $expectedCheckNumber = -1;
        if ($begin != "000") {
            $expectedCheckNumber = substr($bankAccountNumber, 7, 1);
        } else {
            $expectedCheckNumber = substr($bankAccountNumber, 9, 1);
        }

        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod63($bankAccountNumber, $weighting);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '64'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod64($bankAccountNumber)
    {
        $weighting = array(9, 10, 5, 8, 4, 2, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, 6, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod64($bankAccountNumber, $weighting);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '65'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod65($bankAccountNumber)
    {
        $kindOfBankAccount = substr($bankAccountNumber, 8, 1);

        if ($kindOfBankAccount == "9") {
            $weighting = array(2, 1, 0, 2, 1, 2, 1, 2, 1, 2, 1);
            $expectedCheckNumber = substr($bankAccountNumber, 7, 1);
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, false);

            return ($expectedCheckNumber == $calculatedCheckNumber);
        } else {
            $weighting = array(0, 0, 0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1);
            $expectedCheckNumber = substr($bankAccountNumber, 7, 1);
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, false);

            return ($expectedCheckNumber == $calculatedCheckNumber);
        }
    }

    /**
     * Checks the check number of bank account number with method '66'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod66($bankAccountNumber)
    {
        $firstNumber = substr($bankAccountNumber, 0, 1);

        if ($firstNumber != "0") {
            return false;
        }

        $secondNumber = substr($bankAccountNumber, 1, 1);

        if ($secondNumber == "9") {
            return true;
        }

        $weighting = array(2, 3, 4, 5, 6, 0, 0, 7, 0);
        $expectedCheckNumber = substr($bankAccountNumber, -1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod66($bankAccountNumber, $weighting);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '67'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod67($bankAccountNumber)
    {
        $weighting = array(0, 0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1);
        $expectedCheckNumber = substr($bankAccountNumber, 7, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '68'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod68($bankAccountNumber)
    {
        switch (strlen($bankAccountNumber))
        {
        case 6:
        case 7:
        case 8:
        case 9:
            // calculation for a length of 6, 7, 8 or 9
            // return true if the bank account number has no check number
            if (intval($bankAccountNumber) >= 400000000 && intval($bankAccountNumber) <= 499999999) {
                return true;
            }

            // first method (00)
            $weighting = array(2, 1, 2, 1, 2, 1, 2, 1, 2);
            $expectedCheckNumber = substr($bankAccountNumber, -1);
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

            $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

            //return true if the check number is valid after the first method
            if ($isCheckNumberValid) {
                return true;
            }

            //second method (00)
            $weighting = array(2, 1, 2, 1, 2, 0, 0, 1, 2);
            $expectedCheckNumber = substr($bankAccountNumber, -1);
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

            return ($expectedCheckNumber == $calculatedCheckNumber);

        case 10:
            //calculation if the bank account has a length of 10
            //only method 00
            $weighting = array(2, 1, 2, 1, 2, 1, 0, 0, 0);
            $expectedCheckNumber = substr($bankAccountNumber, 9, 1);

            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);
            return ($expectedCheckNumber == $calculatedCheckNumber);

        default:
            // if the bank account number has the wrong length
            return false;
        }
    }

    /**
     * Checks the check number of bank account number with method '69'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod69($bankAccountNumber)
    {
        if (intval($bankAccountNumber) >=  9300000000 && intval($bankAccountNumber) <= 9399999999) {
            return true;
        }

        if (intval($bankAccountNumber) <= 9700000000 || intval($bankAccountNumber) >= 9799999999) {
            // first method
            $weighting = array(2, 3, 4, 5, 6, 7, 8);
            $expectedCheckNumber = substr($bankAccountNumber, 7, 1);
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod28($bankAccountNumber, $weighting);

            $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

            // return true it the check number is valid after the first method
            if ($isCheckNumberValid) {
                return true;
            }
        }

        // second method
        $transformationsRows = "143214321";

        $transformationsRow1 = str_split("0159374826");
        $transformationsRow2 = str_split("0176983254");
        $transformationsRow3 = str_split("0184629573");
        $transformationsRow4 = str_split("0123456789");

        $transformationsTable = array (
            "1" => $transformationsRow1, "2" => $transformationsRow2,
            "3" => $transformationsRow3, "4" => $transformationsRow4
        );

        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethodM10H(
            $bankAccountNumber, $transformationsTable, $transformationsRows
        );

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '70'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod70($bankAccountNumber)
    {
        $fourthNumber = substr($bankAccountNumber, 3, 1);
        $fourthAndFifthNumber = substr($bankAccountNumber, 3, 2);

        if ($fourthNumber == "5" || $fourthAndFifthNumber == "69") {
            $weighting = array(2, 3, 4, 5, 6, 7, 0, 0, 0, 0);
            $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

            return ($expectedCheckNumber == $calculatedCheckNumber);
        } else {
            $weighting = array(2, 3, 4, 5, 6, 7, 2, 3, 4, 5);
            $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

            return ($expectedCheckNumber == $calculatedCheckNumber);
        }
    }

    /**
     * Checks the check number of bank account number with method '71'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod71($bankAccountNumber)
    {
        $weighting = array(6, 5, 4, 3, 2, 1);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod71($bankAccountNumber, $weighting);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '72'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod72($bankAccountNumber)
    {
        $weighting = array(2, 1, 2, 1, 2, 1, 0, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '73'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod73($bankAccountNumber)
    {
        $kindOfBankAccount = substr($bankAccountNumber, 2, 1);
        // calculation method 51 if it is a "Sachkonten" (9)
        if (intval($kindOfBankAccount) == 9) {
            return (new self)->_isCheckNumberValidWithMethod51($bankAccountNumber);
        }

        //first normal method (00)
        $weighting = array(2, 1, 2, 1, 2, 1, 0, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, -1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        // return true if the check number is valid after the first method
        if ($isCheckNumberValid) {
            return true;
        }

        //second method (00)
        $weighting = array(2, 1, 2, 1, 2, 0, 0, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, -1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        // return true if the check number is valid after the second method
        if ($isCheckNumberValid) {
            return true;
        }

        $weighting = array(2, 1, 2, 1, 2, 0, 0, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, -1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00Modulo7($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '74'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod74($bankAccountNumber)
    {
        //first method (00)
        $weighting = array(2, 1, 2, 1, 2, 1, 2, 1, 2);
        $expectedCheckNumber = substr($bankAccountNumber, -1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);
        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        // return true if the check number is valid after the first method
        if ($isCheckNumberValid) {
            return true;
        }

        // if the bank account number begins with "0000" it must be checked with the method 00 with modulo 5
        $begin = substr($bankAccountNumber, 0, 4);
        if ($begin == "0000") {
            $weighting = array(2, 1, 2, 1, 2, 1, 2, 1, 2);
            $expectedCheckNumber = substr($bankAccountNumber, -1);
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00Modulo5($bankAccountNumber, $weighting);

            $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

            // return true if the check number is valid after this method
            if ($isCheckNumberValid) {
                return true;
            }
        }

        // second method (04)
        $weighting = array(2, 3, 4, 5, 6, 7, 2, 3, 4, 5);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        //the calculation of 04 is like 02
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod02($bankAccountNumber, $weighting);

        // if calculatedCheckNumber is false it is not possible to calculate a check number
        if (is_bool($calculatedCheckNumber)) {
            if (!$calculatedCheckNumber) {
                return false;
            }
        }

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '75'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod75($bankAccountNumber)
    {
        //remove beginning 0
        $bankAccountNumber = strval(intval($bankAccountNumber));

        switch (strlen($bankAccountNumber))
        {
        case 6:
            $weighting = array(2, 1, 2, 1, 2);
            $expectedCheckNumber = substr($bankAccountNumber, -1);
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

            return ($expectedCheckNumber == $calculatedCheckNumber);
        case 7:
            $weighting = array(2, 1, 2, 1, 2, 0);
            $expectedCheckNumber = substr($bankAccountNumber, -1);
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

            return ($expectedCheckNumber == $calculatedCheckNumber);
        case 9:
            $firstNumber = substr($bankAccountNumber, 0, 1);

            if ($firstNumber == "9") {
                $weighting = array(0, 0, 0, 2, 1, 2, 1, 2, 0);
                $expectedCheckNumber = substr($bankAccountNumber, 6, 1);
                $calculatedCheckNumber
                    = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, false);

                return ($expectedCheckNumber == $calculatedCheckNumber);
            } else {
                $weighting = array(0, 0, 0, 0, 2, 1, 2, 1, 2, 0);
                $expectedCheckNumber = substr($bankAccountNumber, 5, 1);
                $calculatedCheckNumber
                    = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, false);

                return ($expectedCheckNumber == $calculatedCheckNumber);
            }
        case 10:
            $weighting = array(0, 0, 0, 0, 2, 1, 2, 1, 2, 0);
            $expectedCheckNumber = substr(5, 1);
            $calculatedCheckNumber
                = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, false);

            return ($expectedCheckNumber == $calculatedCheckNumber);
        }
    }

    /**
     * Checks the check number of bank account number with method '76'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod76($bankAccountNumber)
    {
        $weighting = array(2, 3, 4, 5, 6, 7, 8, 9);
        $expectedCheckNumber = substr($bankAccountNumber, 7, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod76($bankAccountNumber, $weighting);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '77'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod77($bankAccountNumber)
    {
        // first method
        $weighting = array(1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0);

        // turn around the bank account number
        $bankAccountNumberReverse = strrev($bankAccountNumber);

        // split the bank account number
        $bankAccountNumberReverseSplitted = str_split($bankAccountNumberReverse);

        // convert every digits to a int
        foreach ($bankAccountNumberReverseSplitted as &$value) {
            $value = intval($value);
        }

        // multiply with the weighting
        $toCalculationArray = [];
        for ($i = 0; $i < count($bankAccountNumberReverseSplitted); $i++) {
            $toCalculationArray[] = $bankAccountNumberReverseSplitted[$i] * $weighting[$i];
        }

        // add up all the numbers
        $sum = array_sum($toCalculationArray);

        // calculate the modulo
        $rest = $sum % 11;

        // if the rest is 0 the bank account number is valid
        if ($rest == 0) {
            return true;
        }

        // second method
        $weighting = array(5, 4, 3, 4, 5, 0, 0, 0, 0, 0, 0);

        // turn around the bank account number
        $bankAccountNumberReverse = strrev($bankAccountNumber);

        // split the bank account number
        $bankAccountNumberReverseSplitted = str_split($bankAccountNumberReverse);

        // convert every digits to a int
        foreach ($bankAccountNumberReverseSplitted as &$value) {
            $value = intval($value);
        }

        // multiply with the weighting
        $toCalculationArray = [];
        for ($i = 0; $i < count($bankAccountNumberReverseSplitted); $i++) {
            $toCalculationArray[] = $bankAccountNumberReverseSplitted[$i] * $weighting[$i];
        }

        // add up all the numbers
        $sum = array_sum($toCalculationArray);

        // calculate the modulo
        $rest = $sum % 11;

        // if the rest is 0 the bank account number is valid
        if ($rest == 0) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * Checks the check number of bank account number with method '78'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod78($bankAccountNumber)
    {
        $begin = substr($bankAccountNumber, 0, 2);
        if ($begin == "00") {
            return true;
        }

        $weighting = array(2, 1, 2, 1, 2, 1, 2, 1, 2, 1);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '79'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod79($bankAccountNumber)
    {
        $firstNumber = substr($bankAccountNumber, 0, 1);

        switch ($firstNumber)
        {
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
            $weighting = array(2, 1, 2, 1, 2, 1, 2, 1, 2, 1);
            $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

            return ($expectedCheckNumber == $calculatedCheckNumber);
        case 9:
        case 1:
        case 2:
            $weighting = array(0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1);
            $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 2, 1);
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

            return ($expectedCheckNumber == $calculatedCheckNumber);
        case 0:
            return false;
        }
    }

    /**
     * Checks the check number of bank account number with method '80'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod80($bankAccountNumber)
    {
        $kindOfBankAccount = substr($bankAccountNumber, 2, 1);
        // calculation method 51 if it is a "Sachkonten" (9)
        if (intval($kindOfBankAccount) == 9) {
            return (new self)->_isCheckNumberValidWithMethod51($bankAccountNumber);
        }

        // first method (00)
        $weighting = array(2, 1, 2, 1, 2, 0, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 2, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

        $isCheckNumberValid = ($calculatedCheckNumber == $expectedCheckNumber);

        // return true if the check number is valid after the first method
        if ($isCheckNumberValid) {
            return true;
        }

        // second method (00)
        $weighting = array(2, 1, 2, 1, 2, 0, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 2, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00Modulo7($bankAccountNumber, $weighting);

        return ($calculatedCheckNumber == $expectedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '81'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod81($bankAccountNumber)
    {
        $kindOfBankAccount = substr($bankAccountNumber, 2, 1);
        // calculation method 51 if it is a "Sachkonten" (9)
        if (intval($kindOfBankAccount) == 9) {
            return (new self)->_isCheckNumberValidWithMethod51($bankAccountNumber);
        }

        // method 32
        $weighting = array(2, 3, 4, 5, 6, 7, 8, 9);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod32($bankAccountNumber, $weighting);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '82'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod82($bankAccountNumber)
    {
        $thirdAndFourthNumber = substr($bankAccountNumber, 2, 2);

        if ($thirdAndFourthNumber == "99") {
            // second method (10)
            $weighting = array(2, 3, 4, 5, 6, 7, 8, 9, 10);
            $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
            //the calculation of 10 is like 06
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

            return ($expectedCheckNumber == $calculatedCheckNumber);
        } else {
            // first method (33)
            $weighting = array(2, 3, 4, 5, 6, 0, 0, 0, 0, 0);
            $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
            //the calculation of 33 is like 06
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

            return ($expectedCheckNumber == $calculatedCheckNumber);
        }
    }

    /**
     * Checks the check number of bank account number with method '83'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod83($bankAccountNumber)
    {
        $kindOfBankAccount = substr($bankAccountNumber, 2, 2);
        // calculation method 51 if it is a "Sachkonten" (9)
        if (intval($kindOfBankAccount) == "99") {
            $weighting = array(2, 3, 4, 5, 6, 7, 8, 0, 0, 0);
            $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

            return ($expectedCheckNumber == $calculatedCheckNumber);
        }

        // first method (32)
        $weighting = array(2, 3, 4, 5, 6, 7, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod32($bankAccountNumber, $weighting);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        // return true if the check number is valid
        if ($isCheckNumberValid) {
            return true;
        }
        
        // second method (33)
        $weighting = array(2, 3, 4, 5, 6, 0, 0, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        //the calculation of 33 is like 06
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        // return true if the check number is valid after the first method
        if ($isCheckNumberValid) {
            return true;
        }

        // third method (33 % 7)
        $weighting = array(2, 3, 4, 5, 6, 0, 0, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        //the calculation of 33 is like 06
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06WithMod7($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '84'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod84($bankAccountNumber)
    {
        $kindOfBankAccount = substr($bankAccountNumber, 2, 1);
        // calculation method 51 if it is a "Sachkonten" (9)
        if (intval($kindOfBankAccount) == 9) {
            return (new self)->_isCheckNumberValidWithMethod51($bankAccountNumber);
        }

        // first method (06)
        $weighting = array(2, 3, 4, 5, 6, 0, 0, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        // return true if the check number is valid after the first method
        if ($isCheckNumberValid) {
            return true;
        }

        // second method (06)
        $weighting = array(2, 3, 4, 5, 6, 0, 0, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06WithMod7($bankAccountNumber, $weighting, true);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        // return true if the check number is valid after the second method
        if ($isCheckNumberValid) {
            return true;
        }

        // third method
        $weighting = array(2, 1, 2, 1, 2, 0, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber
            = $this->_calculateCheckNumberWithMethod06WithMod10($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '85'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod85($bankAccountNumber)
    {
        // calculation if the third and fourth number are 99
        $thirdAndFourthNumber = substr($bankAccountNumber, 2, 2);
        if ($thirdAndFourthNumber == "99") {
            $weighting = array(2, 3, 4, 5, 6, 7, 8, 0, 0, 0);
            $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod02($bankAccountNumber, $weighting);

            // if calculatedCheckNumber is false it is not possible to calculate a check number
            if (is_bool($calculatedCheckNumber)) {
                if (!$calculatedCheckNumber) {
                    return false;
                }
            }

            return ($expectedCheckNumber == $calculatedCheckNumber);
        }

        // first method (06)
        $weighting = array(2, 3, 4, 5, 6, 7, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        // return true if the check number is valid after the first method
        if ($isCheckNumberValid) {
            return true;
        }

        // second method (33)
        $weighting = array(2, 3, 4, 5, 6, 0, 0, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        //the calculation of 33 is like 06
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        // return true if the check nuber is valid after the first method
        if ($isCheckNumberValid) {
            return true;
        }

        //third method (33 mod 7)
        $lastNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);

        // if the last number is a 7, 8, 9 are invalid
        if (in_array($lastNumber, array("7", "8", "9"))) {
            return false;
        }

        $weighting = array(2, 3, 4, 5, 6, 0, 0, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        //the calculation of 33 is like 06
        $calculatedCheckNumber
            = $this->_calculateCheckNumberWithMethod06WithMod7($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '86'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod86($bankAccountNumber)
    {
        $kindOfBankAccount = substr($bankAccountNumber, 2, 1);
        // calculation method 51 if it is a "Sachkonten" (9)
        if (intval($kindOfBankAccount) == 9) {
            return (new self)->_isCheckNumberValidWithMethod51($bankAccountNumber);
        }

        // first method (00)
        $weighting = array(2, 1, 2, 1, 2, 1, 0, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        // if the check number is valid after the first method
        if ($isCheckNumberValid) {
            return true;
        }

        // second method (32)
        $weighting = array(2, 3, 4, 5, 6, 7, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod32($bankAccountNumber, $weighting);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '87'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod87($bankAccountNumber)
    {
        $kindOfBankAccount = substr($bankAccountNumber, 2, 1);
        // calculation method 51 if it is a "Sachkonten" (9)
        if (intval($kindOfBankAccount) == 9) {
            return (new self)->_isCheckNumberValidWithMethod51($bankAccountNumber);
        }

        // first method
        $tab1 = array(0 => 0, 1 => 4, 2 => 3, 3 => 2, 4 => 6);
        $tab2 = array(0 => 7, 1 => 1, 2 => 5, 3 => 9, 4 => 8);

        $bankAccountNumber2 = str_split($bankAccountNumber);

        $i = 3;
        do {
            $i++;
        } while ($bankAccountNumber2[$i] == 0);

        $c2 = ($i - 1) % 2;
        $d2 = 0;
        $a5 = 0;

        do {
            // modify bank account number
            switch($bankAccountNumber2[$i])
            {
            case 0:
                $bankAccountNumber2[$i] = 5;
                break;

            case 1:
                $bankAccountNumber2[$i] = 6;
                break;

            case 5:
                $bankAccountNumber2[$i] = 10;
                break;

            case 6:
                $bankAccountNumber2[$i] = 1;
                break;
            }

            // calculate the a5
            if ($c2 == $d2) {
                if ($bankAccountNumber2[$i] > 5) {
                    if ($c2 == 0 && $d2 == 0) {
                        $c2 = 1;
                        $d2 = 1;
                        $a5 = $a5 + 6 - ($bankAccountNumber2[$i] - 6);
                    } else {
                        $c2 = 0;
                        $d2 = 0;
                        $a5 = $a5 + $bankAccountNumber2[$i];
                    }
                } else {
                    if ($c2 == 0 && $d2 == 0) {
                        $c2 = 1;
                        $a5 = $a5 + $bankAccountNumber2[$i];
                    } else {
                        $c2 = 0;
                        $a5 = $a5 + $bankAccountNumber2[$i];
                    }
                }
            } else {
                if ($bankAccountNumber2[$i] > 5) {
                    if ($c2 == 0) {
                        $c2 = 1;
                        $d2 = 0;
                        $a5 = $a5 - 6 + ($bankAccountNumber2[$i] - 6);
                    } else {
                        $c2 = 0;
                        $d2 = 1;
                        $a5 = $a5 - $bankAccountNumber2[$i];
                    }
                } else {
                    if ($c2 == 0) {
                        $c2 = 1;
                        $a5 = $a5 - $bankAccountNumber2[$i];
                    } else {
                        $c2 = 0;
                        $a5 = $a5 - $bankAccountNumber2[$i];
                    }
                }
            }

            $i++;

        } while ($i < 9);

        // // convert every digits to a int
        foreach ($bankAccountNumber2 as &$value) {
            $value = intval($value);
        }

        // modify a5
        do {
            if ($a5 > 4) {
                $a5 = $a5 - 5;
            } else {
                $a5 = $a5 + 5;
            }
        } while ($a5 < 0 || $a5 > 4);

        $checkNumber = 0;
        if ($d2 == 0) {
            $checkNumber = $tab1[$a5];
        } else {
            $checkNumber = $tab2[$a5];
        }

        if ($checkNumber == $bankAccountNumber2[9]) {
            // return true if the check number is valid after the first method
            return true;
        } else {
            if ($bankAccountNumber2[3] == 0) {
                if ($checkNumber > 4) {
                    $checkNumber = $checkNumber - 5;
                } else {
                    $checkNumber = $checkNumber + 5;
                }

                if ($checkNumber == $bankAccountNumber2[9]) {
                    // return true if the check number is valid after the first method
                    return true;
                }
            }
        }

        // second method (33)
        $weighting = array(2, 3, 4, 5, 6, 0, 0, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        //the calculation of 33 is like 06
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        // return true if the check number is valid after the second method
        if ($isCheckNumberValid) {
            return true;
        }

        // third method (06 % 7)
        $weighting = array(2, 3, 4, 5, 6, 0, 0, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06WithMod7($bankAccountNumber, $weighting, true);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        // return true if the check number is valid after the third method
        if ($isCheckNumberValid) {
            return true;
        }

        // fourth method (06)
        $weighting = array(2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '88'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod88($bankAccountNumber)
    {
        $weighting = array(2, 3, 4, 5, 6, 7, 8);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod88($bankAccountNumber, $weighting);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '89'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod89($bankAccountNumber)
    {
        switch (strlen(strval(intval($bankAccountNumber))))
        {
        case 8:
        case 9:
            $weighting = array(2, 3, 4, 5, 6, 7, 8, 9, 10);
            $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
            //the calculation of 10 is like 06
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

            return ($expectedCheckNumber == $calculatedCheckNumber);
        case 7:
            $weighting = array(2, 3, 4, 5, 6, 7, 0, 0, 0, 0);
            $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod17Version2($bankAccountNumber, $weighting);

            return ($expectedCheckNumber == $calculatedCheckNumber);
        default:
            return false;
        }
    }

    /**
     * Checks the check number of bank account number with method '90'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod90($bankAccountNumber)
    {
        $kindOfBankAccount = substr($bankAccountNumber, 2, 1);
        // calculation method 51 if it is a "Sachkonten" (9)
        if (intval($kindOfBankAccount) == 9) {
            $weighting = array(2, 3, 4, 5, 6, 7, 8, 0, 0, 0);
            $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

            return ($expectedCheckNumber == $calculatedCheckNumber);
        }

        // first method (06)
        $weighting = array(2, 3, 4, 5, 6, 7, 0, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        // return true if the check number is valid after the first method
        if ($isCheckNumberValid) {
            return true;
        }

        // second method (06)
        $weighting = array(2, 3, 4, 5, 6, 0, 0, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        // return true if the check number is valid after the second method
        if ($isCheckNumberValid) {
            return true;
        }

        // third method (06 % 7)
        $weighting = array(2, 3, 4, 5, 6, 0, 0, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06WithMod7($bankAccountNumber, $weighting, true);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        // return true if the check number is valid after the third method
        if ($isCheckNumberValid && !in_array($expectedCheckNumber, array("7", "8", "9"))) {
            return true;
        }

        // fourth method (06 % 9)
        $weighting = array(2, 3, 4, 5, 6, 0, 0, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06WithMod9($bankAccountNumber, $weighting, true);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        // return true if the check number is valid after the fourth method
        if ($isCheckNumberValid) {
            return true;
        }

        // fifth method (06 % 10)
        $weighting = array(2, 1, 2, 1, 2, 0, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber
            = $this->_calculateCheckNumberWithMethod06WithMod10($bankAccountNumber, $weighting, true);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        // return true if the check number is valid after the fifth method
        if ($isCheckNumberValid) {
            return true;
        }

        // sixth method (06 % 7)
        $weighting = array(2, 1, 2, 1, 2, 1, 0, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06WithMod7($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '91'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod91($bankAccountNumber)
    {
        // first method (06)
        $weighting = array(0, 0, 0, 0, 2, 3, 4, 5, 6, 7, 8);
        $expectedCheckNumber = substr($bankAccountNumber, 6, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, false);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        //return true if the check number is valid after the first method
        if ($isCheckNumberValid) {
            return true;
        }

        // second method (06)
        $weighting = array(0, 0, 0, 0, 7, 6, 5, 4, 3, 2, 1);
        $expectedCheckNumber = substr($bankAccountNumber, 6, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, false);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        //return true if the check number is valid after the second method
        if ($isCheckNumberValid) {
            return true;
        }

        //third method (06)
        $weighting = array(2, 3, 4, 0, 5, 6, 7, 8, 9, 10);
        $expectedCheckNumber = substr($bankAccountNumber, 6, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, false);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        //return true if the check number is valid after the third method
        if ($isCheckNumberValid) {
            return true;
        }

        //fourth method (06)
        $weighting = array(0, 0, 0, 0, 2, 4, 8, 5, 10, 9);
        $expectedCheckNumber = substr($bankAccountNumber, 6, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, false);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '92'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod92($bankAccountNumber)
    {
        $weighting = array(3, 7, 1, 3, 7, 1, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod01($bankAccountNumber, $weighting);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '93'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod93($bankAccountNumber)
    {
        // first method (06)
        $begin = substr($bankAccountNumber, 0, 4);

        if ($begin == "0000") {
            $weighting = array(0, 2, 3, 4, 5, 6, 0, 0, 0, 0);
            $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, false);

            $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

            // return true if the check number is valid after the first method
            if ($isCheckNumberValid) {
                return true;
            }
        } else {
            $weighting = array(0, 0, 0, 0, 0, 2, 3, 4, 5, 6);
            $expectedCheckNumber = substr($bankAccountNumber, 5, 1);
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, false);

            $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

            // return true if the check number is valid after the first method
            if ($isCheckNumberValid) {
                return true;
            }
        }

        // second method
        if ($begin == "0000") {
            $weighting = array(0, 2, 3, 4, 5, 6, 0, 0, 0, 0);
            $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
            $calculatedCheckNumber
                = $this->_calculateCheckNumberWithMethod06WithMod7($bankAccountNumber, $weighting, false);

            return ($expectedCheckNumber == $calculatedCheckNumber);
        } else {
            $weighting = array(0, 0, 0, 0, 0, 2, 3, 4, 5, 6);
            $expectedCheckNumber = substr($bankAccountNumber, 5, 1);
            $calculatedCheckNumber
                = $this->_calculateCheckNumberWithMethod06WithMod7($bankAccountNumber, $weighting, false);

            return ($expectedCheckNumber == $calculatedCheckNumber);
        }
    }

    /**
     * Checks the check number of bank account number with method '94'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod94($bankAccountNumber)
    {
        $weighting = array(1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '95'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod95($bankAccountNumber)
    {
        // return true if the bank account number has no check number
        if ((intval($bankAccountNumber) >= 1 && intval($bankAccountNumber) <= 1999999)
            || (intval($bankAccountNumber) >= 9000000 && intval($bankAccountNumber) <= 25999999)
            || (intval($bankAccountNumber) >= 396000000 && intval($bankAccountNumber) <= 499999999)
            || (intval($bankAccountNumber) >= 700000000 && intval($bankAccountNumber) <= 799999999)
            || (intval($bankAccountNumber) >= 910000000 && intval($bankAccountNumber) <= 989999999)
        ) {
            return true;
        }

        $weighting = array(2, 3, 4, 5, 6, 7, 2, 3, 4, 5);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '96'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod96($bankAccountNumber)
    {
        //first method (19)
        $weighting = array(2, 3, 4, 5, 6, 7, 8, 9, 1, 2);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        //the calculation of 19 is like 06
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        //return true if the check number is valid after the first method
        if ($isCheckNumberValid) {
            return true;
        }

        //second method (00)
        $weighting = array(2, 1, 2, 1, 2, 1, 2, 1, 2, 1);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        if ($isCheckNumberValid) {
            return true;
        }

        // return true if the bank account number has no check number
        if ((intval($bankAccountNumber) > 1300000 && intval($bankAccountNumber) < 99399999)) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * Checks the check number of bank account number with method '97'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod97($bankAccountNumber)
    {
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod97($bankAccountNumber);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '99'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod98($bankAccountNumber)
    {
        // first method (01)
        $weighting = array(3, 1, 7, 3, 1, 7, 3, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod01($bankAccountNumber, $weighting);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        // return true if the check number is valid after the first method
        if ($isCheckNumberValid) {
            return true;
        }

        // second method (32)
        $weighting = array(2, 3, 4, 5, 6, 7, 8, 9);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod32($bankAccountNumber, $weighting);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method '99'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethod99($bankAccountNumber)
    {
        // return true if the bank account number has no check number
        if ((intval($bankAccountNumber) > 396000000 && intval($bankAccountNumber) < 499999999)) {
            return true;
        }

        $weighting = array(2, 3, 4, 5, 6, 7, 2, 3, 4, 5);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method 'A1'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethodA1($bankAccountNumber)
    {
        switch (strlen(strval(intval($bankAccountNumber))))
        {
        case 8:
        case 10:
            $weighting = array(2, 1, 2, 1, 2, 1, 2, 0, 0, 0);
            $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);
            return ($expectedCheckNumber == $calculatedCheckNumber);

        default:
            return false;
        }
    }

    /**
     * Checks the check number of bank account number with method 'A2'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethodA2($bankAccountNumber)
    {
        // first method (00)
        $weighting = array(2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        // return true if the check number is valid after the first method
        if ($isCheckNumberValid) {
            return true;
        }

        //second method (04)
        $weighting = array(2, 3, 4, 5, 6, 7, 2, 3, 4, 5);

        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        //the calculation of 04 is like 02
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod02($bankAccountNumber, $weighting);

        // if calculatedCheckNumber is false it is not possible to calculate a check number
        if (is_bool($calculatedCheckNumber)) {
            if (!$calculatedCheckNumber) {
                return false;
            }
        }

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method 'A3'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethodA3($bankAccountNumber)
    {
        // first method (00)
        $weighting = array(2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        // return true if the check number is valid after the first method
        if ($isCheckNumberValid) {
            return true;
        }

        //second method (10)
        $weighting = array(2, 3, 4, 5, 6, 7, 8, 9, 10);

        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        //the calculation of 10 is like 06
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method 'A4'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethodA4($bankAccountNumber)
    {
        $thirdAndFourthNumber = substr($bankAccountNumber, 2, 2);

        if ($thirdAndFourthNumber != "99") {
            // first method (06)
            $weighting = array(2, 3, 4, 5, 6, 7, 0, 0, 0, 0);
            $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

            $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

            // return true if the check number is valid after the first method
            if ($isCheckNumberValid) {
                return true;
            }

            // second method (06 % 7)
            $weighting = array(2, 3, 4, 5, 6, 7, 0, 0, 0, 0);
            $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
            $calculatedCheckNumber
                = $this->_calculateCheckNumberWithMethod06WithMod7($bankAccountNumber, $weighting, true);

            $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

            // return true if the check number is valid after the second method
            if ($isCheckNumberValid) {
                return true;
            }
        }

        // third method (06)
        $weighting = array(2, 3, 4, 5, 6, 0, 0, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        // return true if the check number is valid after the third method
        if ($isCheckNumberValid) {
            return true;
        }

        // fourth method (93)
        return (new self)->_isCheckNumberValidWithMethod93($bankAccountNumber);
    }

    /**
     * Checks the check number of bank account number with method 'A5'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethodA5($bankAccountNumber)
    {
        // first method (00)
        $weighting = array(2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        // return true if the check number is valid after the first method
        if ($isCheckNumberValid) {
            return true;
        }

        // return false if the check number is invalid after the first method
        // and the bank account number begins with "9"
        $begin = substr($bankAccountNumber, 0, 1);
        if (!$isCheckNumberValid && $begin == "9") {
            return false;
        }

        //second method (10)
        $weighting = array(2, 3, 4, 5, 6, 7, 8, 9, 10);

        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        //the calculation of 10 is like 06
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method 'A6'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethodA6($bankAccountNumber)
    {
        $kindOfBankAccount = substr($bankAccountNumber, 1, 1);
        if ($kindOfBankAccount == "8") {
            // first method (00)
            $weighting = array(2, 1, 2, 1, 2, 1, 2, 1, 2);
            $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

            return ($expectedCheckNumber == $calculatedCheckNumber);
        } else {
            // second method (01)
            $weighting = array(3, 7, 1, 3, 7, 1, 3, 7, 1);
            $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod01($bankAccountNumber, $weighting, true);

            return ($expectedCheckNumber == $calculatedCheckNumber);
        }
    }

    /**
     * Checks the check number of bank account number with method 'A7'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethodA7($bankAccountNumber)
    {
        // first method (00)
        $weighting = array(2, 1, 2, 1, 2, 1, 2, 1, 2, 1);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        // return true if the check number is valid after the first method
        if ($isCheckNumberValid) {
            return true;
        }

        //second method (03)
        $weighting = array(2, 1, 2, 1, 2, 1, 2, 1, 2, 1);

        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        //the calculation of 03 is like 01
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod01($bankAccountNumber, $weighting);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method 'A8'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethodA8($bankAccountNumber)
    {
        $kindOfBankAccount = substr($bankAccountNumber, 2, 1);
        // calculation method 51 if it is a "Sachkonten" (9)
        if (intval($kindOfBankAccount) == 9) {
            return (new self)->_isCheckNumberValidWithMethod51($bankAccountNumber);
        }

        // first method (06)
        $weighting = array(2, 3, 4, 5, 6, 7, 0, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        // return true if the check number is valid after the first method
        if ($isCheckNumberValid) {
            return true;
        }

        //second method (00)
        $weighting = array(2, 1, 2, 1, 2, 1, 0, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method 'A9'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethodA9($bankAccountNumber)
    {
        // first method (00)
        $weighting = array(3, 7, 1, 3, 7, 1, 3, 7, 1);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod01($bankAccountNumber, $weighting);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        // return true if the check number is valid after the first method
        if ($isCheckNumberValid) {
            return true;
        }

        //second method (06)
        $weighting = array(2, 3, 4, 5, 6, 7, 2, 3, 4);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method 'B0'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethodB0($bankAccountNumber)
    {
        $firstNumber = substr($bankAccountNumber, 0, 1);

        if (in_array($firstNumber, array("0", "8"))) {
            return false;
        }

        $eighthNumber = substr($bankAccountNumber, 7, 1);

        if (in_array($eighthNumber, array("1", "2", "3", "6"))) {
            // first method (09)
            return true;
        } else {
            // second method (06)
            $weighting = array(2, 3, 4, 5, 6, 7, 2, 3, 4);
            $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

            return ($expectedCheckNumber == $calculatedCheckNumber);
        }
    }

    /**
     * Checks the check number of bank account number with method 'B1'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethodB1($bankAccountNumber)
    {
        //first method (05)
        $weighting = array(7, 3, 1, 7, 3, 1, 7, 3, 1, 7);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        //the calculation of 05 is like 01
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod01($bankAccountNumber, $weighting);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        // return true if the check number is valid after the first method
        if ($isCheckNumberValid) {
            return true;
        }

        //second method (01)
        $weighting = array(3, 7, 1, 3, 7, 1, 3, 7, 1, 3);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod01($bankAccountNumber, $weighting);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        if ($isCheckNumberValid) {
            return true;
        }

        //third method (00)
        $weighting = array(2, 1, 2, 1, 2, 1, 2, 1, 2, 1);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method 'B2'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethodB2($bankAccountNumber)
    {
        $firstCharOfBankAccountNumber = substr($bankAccountNumber, 0, 1);

        if (in_array($firstCharOfBankAccountNumber, array("8", "9"))) {
            $weighting = array(2, 1, 2, 1, 2, 1, 2, 1, 2, 1);
            $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

            return ($expectedCheckNumber == $calculatedCheckNumber);
        } else {
            $weighting = array(2, 3, 4, 5, 6, 7, 8, 9, 2, 3);
            $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod02($bankAccountNumber, $weighting);

            // if calculatedCheckNumber is false it is not possible to calculate a check number
            if (is_bool($calculatedCheckNumber)) {
                if (!$calculatedCheckNumber) {
                    return false;
                }
            }
            return ($expectedCheckNumber == $calculatedCheckNumber);
        }
    }

    /**
     * Checks the check number of bank account number with method 'B3'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethodB3($bankAccountNumber)
    {
        $firstCharOfBankAccountNumber = substr($bankAccountNumber, 0, 1);

        if ($firstCharOfBankAccountNumber == "9") {

            $weighting = array(2, 3, 4, 5, 6, 7, 2, 3, 4, 5);
            $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

            return ($expectedCheckNumber == $calculatedCheckNumber);
        } else {

            $weighting = array(2, 3, 4, 5, 6, 7, 2, 3, 4, 5);
            $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod32($bankAccountNumber, $weighting);

            return ($expectedCheckNumber == $calculatedCheckNumber);
        }
    }

    /**
     * Checks the check number of bank account number with method 'B4'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethodB4($bankAccountNumber)
    {
        $firstNumber = substr($bankAccountNumber, 0, 1);

        if ($firstNumber == "9") {
            // first method (00)
            $weighting = array(2, 1, 2, 1, 2, 1, 2, 1, 2, 1);
            $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

            return ($expectedCheckNumber == $calculatedCheckNumber);

        } else {
            // second method (02)
            $weighting = array(2, 3, 4, 5, 6, 7, 8, 9, 10);
            $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod02($bankAccountNumber, $weighting);

            // if calculatedCheckNumber is false it is not possible to calculate a check number
            if (is_bool($calculatedCheckNumber)) {
                if (!$calculatedCheckNumber) {
                    return false;
                }
            }

            return ($expectedCheckNumber == $calculatedCheckNumber);
        }
    }

    /**
     * Checks the check number of bank account number with method 'B5'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethodB5($bankAccountNumber)
    {
        // first method (01)
        $weighting = array(7, 3, 1 ,7 , 3, 1, 7, 3, 1);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod01($bankAccountNumber, $weighting);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        // return true if the check number is valid after the first method
        if ($isCheckNumberValid) {
            return true;
        }

        $firstNumber = substr($bankAccountNumber, 0, 1);
        // if the first number is a 8 or 9 it is invalid
        if (in_array($firstNumber, array("8","9"))) {
            return false;
        }

        // second method (00)
        $weighting = array(2, 1, 2, 1, 2, 1, 2, 1, 2, 1);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method 'B6'
     *
     * @param $bankAccountNumber String bank account number to check
     * @param $bankCode          String bank code
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethodB6($bankAccountNumber, $bankCode)
    {
        $firstNumber = substr($bankAccountNumber, 0, 1);
        $firstFiveNumber = substr($bankAccountNumber, 0, 5);

        if (in_array($firstNumber, array("1", "2", "3", "4", "5", "6", "7", "8", "9"))
            || (intval($firstFiveNumber) >= 2691 && intval($firstFiveNumber) <= 2699)
        ) {
            // first method (20)
            $weighting = array(2, 3, 4, 5, 6, 7, 8, 9, 3);
            $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
            //the calculation of 20 is like 06
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

            return ($expectedCheckNumber == $calculatedCheckNumber);
        } else {
            return (new self)->_isCheckNumberValidWithMethod53($bankAccountNumber, $bankCode);
        }
    }

    /**
     * Checks the check number of bank account number with method 'B7'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethodB7($bankAccountNumber)
    {
        if ((intval($bankAccountNumber) >= 1000000 && intval($bankAccountNumber) <= 5999999)
            || (intval($bankAccountNumber) >= 700000000 && intval($bankAccountNumber) <= 899999999)
        ) {
            //method 01
            return (new self)->_isCheckNumberValidWithMethod01($bankAccountNumber);
        } else {
            // has no check number
            return true;
        }
    }

    /**
     * Checks the check number of bank account number with method 'B8'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethodB8($bankAccountNumber)
    {
        // first method (20)
        $weighting = array(2, 3, 4, 5, 6, 7, 8, 9, 3);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        //the calculation of 20 is like 06
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        // return true if the check number is valid after the first method
        if ($isCheckNumberValid) {
            return true;
        }

        // second method (29)
        $isCheckNumberValid = (new self)->_isCheckNumberValidWithMethod29($bankAccountNumber);

        // return true if the check number is valid after the second method
        if ($isCheckNumberValid) {
            return true;
        }

        // third method (09)
        if ((intval($bankAccountNumber) >= 5100000000 && intval($bankAccountNumber) <= 5999999999)
            || (intval($bankAccountNumber) >= 9010000000 && intval($bankAccountNumber) <= 9109999999)
        ) {
            return true;
        }
    }

    /**
     * Checks the check number of bank account number with method 'B9'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethodB9($bankAccountNumber)
    {
        $firstTwoNumbers = substr($bankAccountNumber, 0, 2);
        $firstThreeNumbers = substr($bankAccountNumber, 0, 3);

        if ($firstThreeNumbers == "000") {
            // second method
            $weighting = array(1, 2, 3, 4, 5, 6, 0, 0, 0, 0);
            $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod35($bankAccountNumber, $weighting);

            $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

            // return true if the check number is valid
            if ($isCheckNumberValid) {
                return true;
            }

            $calculatedCheckNumber = $calculatedCheckNumber + 5;

            $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

            // return true if the check number is valid
            if ($isCheckNumberValid) {
                return true;
            }

            if ($calculatedCheckNumber >= 10) {
                $calculatedCheckNumber = $calculatedCheckNumber - 10;
            }

            return ($expectedCheckNumber == $calculatedCheckNumber);
        } else {
            if ($firstTwoNumbers == "00") {
                // first method
                $weighting = array(1, 3, 2, 1, 3, 2, 1, 0, 0, 0);
                $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
                $calculatedCheckNumber = $this->_calculateCheckNumberWithMethodB9($bankAccountNumber, $weighting);

                $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

                // return true if the check number is valid
                if ($isCheckNumberValid) {
                    return true;
                }

                $calculatedCheckNumber = $calculatedCheckNumber + 5;

                $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

                // return true if the check number is valid
                if ($isCheckNumberValid) {
                    return true;
                }

                if ($calculatedCheckNumber >= 10) {
                    $calculatedCheckNumber = $calculatedCheckNumber - 10;
                }

                return ($expectedCheckNumber == $calculatedCheckNumber);
            }
        }

        return false;
    }

    /**
     * Checks the check number of bank account number with method 'C0'
     *
     * @param $bankAccountNumber String bank account number to check
     * @param $bankCode          String bank code
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethodC0($bankAccountNumber, $bankCode)
    {
        // first method (52)
        if (strlen($bankAccountNumber) < 10) {
            $offSet = 10 - strlen($bankAccountNumber);
            $begin = "";
            for ($i = 0; $i < $offSet; $i++) {
                $begin .= "0";
            }

            $bankAccountNumber = $begin . $bankAccountNumber;
        }

        $firstTwoChars = substr($bankAccountNumber, 0, 2);
        $firstThreeChars = substr($bankAccountNumber, 0, 3);

        if ($firstTwoChars == "00" && $firstThreeChars != "000") {
            $isCheckNumberValid = (new self)->_isCheckNumberValidWithMethod52($bankAccountNumber, $bankCode);
            // return true if the check number is valid after the first method
            if ($isCheckNumberValid) {
                return true;
            }
        }

        //second method (06)
        $weighting = array(2, 3, 4, 5, 6, 7, 8, 9, 3);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method 'C1'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethodC1($bankAccountNumber)
    {
        $begin = substr($bankAccountNumber, 0, 1);
        if ($begin == "5") {
            // first method
            $weighting = array(1, 2, 1, 2, 1, 2, 1, 2, 1);
            $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod17Version2($bankAccountNumber, $weighting);

            return ($expectedCheckNumber == $calculatedCheckNumber);
        } else {
            // second method (17)
            $weighting = array(2, 1, 2, 1, 2, 1);
            $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 3, 1);
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod17Version1($bankAccountNumber, $weighting);

            return ($expectedCheckNumber == $calculatedCheckNumber);
        }
    }

    /**
     * Checks the check number of bank account number with method 'C2'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethodC2($bankAccountNumber)
    {
        //first method (22)
        $weighting = array(3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod22($bankAccountNumber, $weighting, true);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        // return true if the check number is valid after the first method
        if ($isCheckNumberValid) {
            return true;
        }

        // second method (00)
        $weighting = array(2, 1, 2, 1, 2, 1, 2, 1, 2, 1);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        //return true if the check number is valid after the first method
        if ($isCheckNumberValid) {
            return true;
        }

        //third method (04)
        $weighting = array(2, 3, 4, 5, 6, 7, 2, 3, 4, 5);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        //the calculation of 04 is like 02
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod02($bankAccountNumber, $weighting);

        // if calculatedCheckNumber is false it is not possible to calculate a check number
        if (is_bool($calculatedCheckNumber)) {
            if (!$calculatedCheckNumber) {
                return false;
            }
        }

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method 'C3'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethodC3($bankAccountNumber)
    {
        $firstNumber = substr($bankAccountNumber, 0, 1);

        if ($firstNumber == "9") {
            //method 58
            $weighting = array(2, 3, 4, 5, 6, 0, 0, 0, 0);
            $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
            //method 58 is like 02
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod02($bankAccountNumber, $weighting);

            // if calculatedCheckNumber is false it is not possible to calculate a check number
            if (is_bool($calculatedCheckNumber)) {
                if (!$calculatedCheckNumber) {
                    return false;
                }
            }

            return ($expectedCheckNumber == $calculatedCheckNumber);
        } else {
            // methode 00
            $weighting = array(2, 1, 2, 1, 2, 1, 2, 1, 2, 1);
            $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

            return ($expectedCheckNumber == $calculatedCheckNumber);
        }
    }

    /**
     * Checks the check number of bank account number with method 'C4'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethodC4($bankAccountNumber)
    {
        $firstNumber = substr($bankAccountNumber, 0, 1);

        if ($firstNumber == "9") {
            // second method (58)
            $weighting = array(2, 3, 4, 5, 6, 0, 0, 0, 0);
            $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
            // method 58 is like 02
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod02($bankAccountNumber, $weighting);

            // if calculatedCheckNumber is false it is not possible to calculate a check number
            if (is_bool($calculatedCheckNumber)) {
                if (!$calculatedCheckNumber) {
                    return false;
                }
            }

            return ($expectedCheckNumber == $calculatedCheckNumber);
        } else {
            // first method (15)
            $weighting = array(2, 3, 4, 5, 0, 0, 0, 0, 0, 0);
            $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

            return ($expectedCheckNumber == $calculatedCheckNumber);
        }
    }

    /**
     * Checks the check number of bank account number with method 'C5'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethodC5($bankAccountNumber)
    {
        // first methode (75) 5 numbers
        if (intval($bankAccountNumber) >= 100000 && intval($bankAccountNumber) <= 899999) {
            return (new self)->_isCheckNumberValidWithMethod75($bankAccountNumber);
        }

        // first method (75) 9 numbers
        if (intval($bankAccountNumber) >= 100000000 && intval($bankAccountNumber) <= 899999999) {
            return (new self)->_isCheckNumberValidWithMethod75($bankAccountNumber);
        }

        // second method (29)
        if ((intval($bankAccountNumber) >= 1000000000 && intval($bankAccountNumber) <= 1999999999)
            || (intval($bankAccountNumber) >= 4000000000 && intval($bankAccountNumber) <= 6999999999)
            || (intval($bankAccountNumber) >= 9000000000 && intval($bankAccountNumber) <= 9999999999)
        ) {
            return (new self)->_isCheckNumberValidWithMethod29($bankAccountNumber);
        }

        // third method (00) 10 numbers
        if (intval($bankAccountNumber) >= 3000000000 && intval($bankAccountNumber) <= 3999999999) {
            return (new self)->_isCheckNumberValidWithMethod00($bankAccountNumber);
        }

        // fourth method (09) 8 numbers
        if (intval($bankAccountNumber) >= 30000000 && intval($bankAccountNumber) <= 59999999) {
            return true;
        }

        // fourth method (09) 10 numbers
        if (intval($bankAccountNumber) >= 7000000000 && intval($bankAccountNumber) <= 7099999999
            || (intval($bankAccountNumber) >= 8500000000 && intval($bankAccountNumber) <= 8599999999)
        ) {
            return true;
        }

        return false;
    }

    /**
     * Checks the check number of bank account number with method 'C6'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethodC6($bankAccountNumber)
    {
        // replace first number of bank account number
        $firstNumber = substr($bankAccountNumber, 0, 1);
        $constant = 0;
        switch (intval($firstNumber))
        {
        case 0;
            $constant = 4451970;
            break;

        case 1;
            $constant = 4451981;
            break;

        case 2;
            $constant = 4451992;
            break;

        case 3;
            $constant = 4451993;
            break;

        case 4;
            $constant = 4344992;
            break;

        case 5;
            $constant = 4344990;
            break;

        case 6;
            $constant = 4344991;
            break;

        case 7;
            $constant = 5499570;
            break;

        case 8;
            $constant = 4451994;
            break;

        case 9;
            $constant = 5499579;
            break;
        }
        $bankAccountNumber = $constant . substr($bankAccountNumber, 1, strlen($bankAccountNumber) -1);

        $weighting = array(2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method 'C7'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethodC7($bankAccountNumber)
    {
        // first method (63)
        $weighting = array(2, 1, 2, 1, 2, 1, 2, 1, 2, 1);

        $begin = substr($bankAccountNumber, 0, 3);
        $expectedCheckNumber = -1;
        if ($begin != "000") {
            $expectedCheckNumber = substr($bankAccountNumber, 7, 1);
        } else {
            $expectedCheckNumber = substr($bankAccountNumber, 9, 1);
        }

        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod63($bankAccountNumber, $weighting);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        // return true if the check number is valid after the first method
        if ($isCheckNumberValid) {
                return true;
        }

        //second method (06)
        $weighting = array(2, 3, 4, 5, 6, 7, 2, 3);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method 'C8'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethodC8($bankAccountNumber)
    {
        //first method (00)
        $weighting = array(2, 1, 2, 1, 2, 1, 2, 1, 2);

        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        // return true if the check number is valid after the first method
        if ($isCheckNumberValid) {
            return true;
        }

        //second method (04)
        $weighting = array(2, 3, 4, 5, 6, 7, 2, 3, 4, 5);

        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        //the calculation of 04 is like 02
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod02($bankAccountNumber, $weighting);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        // return true if the check number is valid after the second method
        if ($isCheckNumberValid) {
            return true;
        }

        // third method (07)
        $weighting = array(2, 3, 4, 5, 6, 7, 8, 9, 10);

        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        //the calculation of 07 is like 02
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod02($bankAccountNumber, $weighting);

        // if calculatedCheckNumber is false it is not possible to calculate a check number
        if (is_bool($calculatedCheckNumber)) {
            if (!$calculatedCheckNumber) {
                return false;
            }
        }

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method 'C9'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethodC9($bankAccountNumber)
    {
        //first method (00)
        $weighting = array(2, 1, 2, 1, 2, 1, 2, 1, 2);

        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        // return true if the check number is valid after the first method
        if ($isCheckNumberValid) {
            return true;
        }

        //second method ()
        $weighting = array(2, 3, 4, 5, 6, 7, 8, 9, 10);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        //the calculation of 07 is like 02
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod02($bankAccountNumber, $weighting);

        // if calculatedCheckNumber is false it is not possible to calculate a check number
        if (is_bool($calculatedCheckNumber)) {
            if (!$calculatedCheckNumber) {
                return false;
            }
        }

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method 'D0'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethodD0($bankAccountNumber)
    {
        $firstTwoNumbers = substr($bankAccountNumber, 0, 2);

        if ($firstTwoNumbers == "57") {
            // second method (09)
            if (intval($bankAccountNumber) >= 5700000000 && intval($bankAccountNumber) <= 5799999999) {
                return true;
            } else {
                return false;
            }

        } else {
            // first method (20)
            $weighting = array(2, 3, 4, 5, 6, 7, 8, 9, 3);
            $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
            //the calculation of 20 is like 06
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

            return ($expectedCheckNumber == $calculatedCheckNumber);
        }
    }

    /**
     * Checks the check number of bank account number with method 'D1'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethodD1($bankAccountNumber)
    {
        // replace first number of bank account number
        $firstNumber = substr($bankAccountNumber, 0, 1);
        $constant = 0;
        switch (intval($firstNumber))
        {
        case 0;
            $constant = 4363380;
            break;

        case 1;
            $constant = 4363381;
            break;

        case 2;
            $constant = 4363382;
            break;

        case 3;
            $constant = 4363383;
            break;

        case 4;
            $constant = 4363384;
            break;

        case 5;
            $constant = 4363385;
            break;

        case 6;
            $constant = 4363386;
            break;

        case 7;
            $constant = 4363387;
            break;

        case 8;
            // if the bank account number starts with 8 it is invalid
            return false;

        case 9;
            $constant = 4363389;
            break;
        }
        $bankAccountNumber = $constant . substr($bankAccountNumber, 1, strlen($bankAccountNumber) -1);

        $weighting = array(2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method 'D2'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethodD2($bankAccountNumber)
    {
        // first method (95)
        $isCheckNumberValid = (new self)->_isCheckNumberValidWithMethod95($bankAccountNumber);

        // return true if the check number is valid after the first method
        if ($isCheckNumberValid) {
            return true;
        }

        // second method (00)
        $weighting = array(2, 1, 2, 1, 2, 1, 2, 1, 2, 1);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        // return true if the check number is valid after the first method
        if ($isCheckNumberValid) {
            return true;
        }

        // third method (68)
        return (new self)->_isCheckNumberValidWithMethod68($bankAccountNumber);
    }

    /**
     * Checks the check number of bank account number with method 'D3'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethodD3($bankAccountNumber)
    {
        // first method (00)
        $weighting = array(2, 1, 2, 1, 2, 1, 2, 1, 2, 1);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        // return true if the check number is valid after the first method
        if ($isCheckNumberValid) {
            return true;
        }

        // second method (27)
        return (new self)->_isCheckNumberValidWithMethod27($bankAccountNumber);
    }

    /**
     * Checks the check number of bank account number with method 'D4'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethodD4($bankAccountNumber)
    {
        // if the first number is 0 the bank account number is invalid
        $firstNumber = substr($bankAccountNumber, 0, 1);
        if ($firstNumber == "0") {
            return false;
        }

        $bankAccountNumber = "428259" . $bankAccountNumber;

        $weighting = array(2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method 'D5'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethodD5($bankAccountNumber)
    {
        $ThirdAndFourthNumber = substr($bankAccountNumber, 2, 2);

        if ($ThirdAndFourthNumber == "99") {
            // first method (06)
            $weighting = array(2, 3, 4, 5, 6, 7, 8, 0, 0, 0);
            $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

            return ($expectedCheckNumber == $calculatedCheckNumber);
        }

        // second method(06)
        $weighting = array(2, 3, 4, 5, 6, 7, 8, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        // return true if the check number is valid after the second method
        if ($isCheckNumberValid) {
            return true;
        }

        // third method (06 % 7)
        $weighting = array(2, 3, 4, 5, 6, 7, 8, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06WithMod7($bankAccountNumber, $weighting, true);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        // return true if the check number is valid after the third method
        if ($isCheckNumberValid) {
            return true;
        }

        // fourth method (06 % 10)
        $weighting = array(2, 3, 4, 5, 6, 7, 8, 0, 0, 0);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber
            = $this->_calculateCheckNumberWithMethod06WithMod10($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method 'D6'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethodD6($bankAccountNumber)
    {
        // first method (07)
        $isCheckNumberValid = (new self)->_isCheckNumberValidWithMethod07($bankAccountNumber);

        // return true if the check number is valid after the first method
        if ($isCheckNumberValid) {
            return true;
        }

        // second method (03)
        $weighting = array(2, 1, 2, 1, 2, 1, 2, 1, 2, 1);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        //the calculation of 03 is like 01
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod01($bankAccountNumber, $weighting);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        // return true if the check number is valid after the second method
        if ($isCheckNumberValid) {
            return true;
        }

        // third method (00)
        $weighting = array(2, 1, 2, 1, 2, 1, 2, 1, 2, 1);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method 'D7'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethodD7($bankAccountNumber)
    {
        $weighting = array(2, 1, 2, 1, 2, 1, 2, 1, 2, 1);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethodD7($bankAccountNumber, $weighting);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method 'D8'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethodD8($bankAccountNumber)
    {
        if (intval($bankAccountNumber) >= 1000000000 && intval($bankAccountNumber) <= 9999999999) {
            $weighting = array(2, 1, 2, 1, 2, 1, 2, 1, 2, 1);
            $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
            $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

            return ($expectedCheckNumber == $calculatedCheckNumber);
        }

        if (intval($bankAccountNumber) >= 10000000 && intval($bankAccountNumber) <= 99999999) {
            return true;
        }

        return false;
    }

    /**
     * Checks the check number of bank account number with method 'D9'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethodD9($bankAccountNumber)
    {
        // first method (00)
        $weighting = array(2, 1, 2, 1, 2, 1, 2, 1, 2);

        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        // return true if the check number is valid after the first method
        if ($isCheckNumberValid) {
            return true;
        }

        //second method (10)
        $weighting = array(2, 3, 4, 5, 6, 7, 8, 9, 10);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        //the calculation of 10 is like 06
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, true);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        //return true if the check number is valid after the second method
        if ($isCheckNumberValid) {
            return true;
        }

        // third method (18)
        $weighting = array(3, 9, 7, 1, 3, 9, 7, 1, 3, 9, 7);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        //the calculation of 18 is like 01
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod01($bankAccountNumber, $weighting);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method 'E0'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethodE0($bankAccountNumber)
    {
        $weighting = array(2, 1, 2, 1, 2, 1, 2, 1, 2, 1);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethodE0($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method 'E1'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethodE1($bankAccountNumber)
    {
        $weighting = array(1, 2, 3, 4, 5, 6, 11, 10, 9);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethodE1($bankAccountNumber, $weighting);

        // if calculatedCheckNumber is false it is not possible to calculate a check number
        if (is_bool($calculatedCheckNumber)) {
            if (!$calculatedCheckNumber) {
                return false;
            }
        }

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method 'E2'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethodE2($bankAccountNumber)
    {
        // replace first number of bank account number
        $firstNumber = substr($bankAccountNumber, 0, 1);
        $constant = 0;
        switch (intval($firstNumber))
        {
        case 0;
            $constant = 4383200;
            break;

        case 1;
            $constant = 4383201;
            break;

        case 2;
            $constant = 4383202;
            break;

        case 3;
            $constant = 4383203;
            break;

        case 4;
            $constant = 4383204;
            break;

        case 5;
            $constant = 4383205;
            break;

        case 6;
        case 7;
        case 8;
        case 9;
            // if the bank account number starts with 6, 7, 8, 9 it is invalid
            return false;
        }
        $bankAccountNumber = $constant . substr($bankAccountNumber, 1, strlen($bankAccountNumber) -1);

        $weighting = array(2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method 'E3'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethodE3($bankAccountNumber)
    {
        // first method (00)
        $weighting = array(2, 1, 2, 1, 2, 1, 2, 1, 2);

        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

        $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);

        // return true if the check number is valid after the first method
        if ($isCheckNumberValid) {
            return true;
        }

        //second method (21)
        $weighting = array(2, 1, 2, 1, 2, 1, 2, 1, 2);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod21($bankAccountNumber, $weighting);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * Checks the check number of bank account number with method 'E4'
     *
     * @param $bankAccountNumber String bank account number to check
     *
     * @return boolean true if the check number is valid else false
     */
    function _isCheckNumberValidWithMethodE4($bankAccountNumber)
    {
        // first method (02)
        $weighting = array(2, 3, 4, 5, 6, 7, 8, 9, 2, 3);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod02($bankAccountNumber, $weighting);

        // if calculatedCheckNumber is false it is not possible to calculate a check number
        if (is_bool($calculatedCheckNumber)) {
            if (!$calculatedCheckNumber) {
                // nothing
            }
        } else {
            $isCheckNumberValid = ($expectedCheckNumber == $calculatedCheckNumber);
            // return true if the check number is valid after the first method
            if ($isCheckNumberValid) {
                return true;
            }
        }

        // second method (00)
        $weighting = array(2, 1, 2, 1, 2, 1, 2, 1, 2, 1);
        $expectedCheckNumber = substr($bankAccountNumber, strlen($bankAccountNumber) - 1, 1);
        $calculatedCheckNumber = $this->_calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, true);

        return ($expectedCheckNumber == $calculatedCheckNumber);
    }

    /**
     * 1. This function removes the check number of the bank account number and turn it around.
     * 2. Every bank account digit will be multiplied by the weighting.
     * 3. If one of the multiplications will be higher than 9 the check sum will be calculated.
     * 4. Then all results are added up
     * 5. Then the modulo is calculated.
     * 6. The rest of the modulo is subtracted from 10 and that will be the check number
     *    (if it is 10 the check number will be 0)
     *
     * @param String  $bankAccountNumber to check
     * @param array   $weighting         the weighting of each letter of the bank account number
     * @param boolean $removeCheckNumber true if the last char (check number) should remove for the calculation
     *
     * @return       int                       the check number
     * @noinspection DuplicatedCode
     */
    function _calculateCheckNumberWithMethod00($bankAccountNumber, $weighting, $removeCheckNumber)
    {
        $bankAccountNumberWithoutCheckNumber = $bankAccountNumber;
        // remove check number
        if ($removeCheckNumber) {
            $bankAccountNumberWithoutCheckNumber = substr($bankAccountNumber, 0, -1);
        }

        // turn around the bank account number
        $bankAccountNumberWithoutCheckNumberReverse = strrev($bankAccountNumberWithoutCheckNumber);

        // split the bank account number
        $bankAccountNumberWithoutCheckNumberReverseSplitted = str_split($bankAccountNumberWithoutCheckNumberReverse);

        // convert every digits to a int
        foreach ($bankAccountNumberWithoutCheckNumberReverseSplitted as &$value) {
            $value = intval($value);
        }

        // multiply with the weighting
        $toCalculationArray = [];
        for ($i = 0; $i < count($bankAccountNumberWithoutCheckNumberReverseSplitted); $i++) {
            $toCalculationArray[] = $bankAccountNumberWithoutCheckNumberReverseSplitted[$i] * $weighting[$i];
        }

        // calculate the check sum if a product is bigger than 9
        foreach ($toCalculationArray as &$value) {
            if ($value >= 10) {
                $value = $this->_calculateCheckSum($value);
            }
        }

        // add up all the numbers
        $sum = array_sum($toCalculationArray);

        // calculate the modulo
        $rest = $sum % 10;

        // subtracted from 10
        $calculationCheckNumber = 10 - $rest;

        // if it is 10 the check number will be 0
        if ($calculationCheckNumber == 10) {
            $calculationCheckNumber = 0;
        }

        return $calculationCheckNumber;
    }

    /**
     * 1. This function removes the check number of the bank account number and turn it around.
     * 2. Every bank account digit will be multiplied by the weighting.
     * 3. If one of the multiplications will be higher than 9 the check  will be calculated.
     * 4. Then all results are added up
     * 5. Then the modulo is calculated.
     * 6. The rest of the modulo is subtracted from 5 and that will be the check number
     *
     * @param String $bankAccountNumber to check
     * @param array  $weighting         the weighting of each letter of the bank account number
     *
     * @return       int                       the check number
     * @noinspection DuplicatedCode
     */
    function _calculateCheckNumberWithMethod00Modulo5($bankAccountNumber, $weighting)
    {
        // remove check number
        $bankAccountNumberWithoutCheckNumber = substr($bankAccountNumber, 0, -1);

        // turn around the bank account number
        $bankAccountNumberWithoutCheckNumberReverse = strrev($bankAccountNumberWithoutCheckNumber);

        // split the bank account number
        $bankAccountNumberWithoutCheckNumberReverseSplitted = str_split($bankAccountNumberWithoutCheckNumberReverse);

        // convert every digits to a int
        foreach ($bankAccountNumberWithoutCheckNumberReverseSplitted as &$value) {
            $value = intval($value);
        }

        // multiply with the weighting
        $toCalculationArray = [];
        for ($i = 0; $i < count($bankAccountNumberWithoutCheckNumberReverseSplitted); $i++) {
            $toCalculationArray[] = $bankAccountNumberWithoutCheckNumberReverseSplitted[$i] * $weighting[$i];
        }

        // calculate the check sum if a product is bigger than 9
        foreach ($toCalculationArray as &$value) {
            if ($value >= 10) {
                $value = $this->_calculateCheckSum($value);
            }
        }

        // add up all the numbers
        $sum = array_sum($toCalculationArray);

        // calculate the modulo
        $rest = $sum % 5;

        if ($rest == 0) {
            return 0;
        }

        // subtracted from 5
        $calculationCheckNumber = 5 - $rest;

        return $calculationCheckNumber;
    }

    /**
     * 1. This function removes the check number of the bank account number and turn it around.
     * 2. Every bank account digit will be multiplied by the weighting.
     * 3. If one of the multiplications will be higher than 9 the checksum will be calculated.
     * 4. Then all results are added up
     * 5. Then the modulo is calculated.
     * 6. The rest of the modulo is subtracted from 7 and that will be the check number
     *
     * @param String $bankAccountNumber to check
     * @param array  $weighting         the weighting of each letter of the bank account number
     *
     * @return       int                       the check number
     * @noinspection DuplicatedCode
     */
    function _calculateCheckNumberWithMethod00Modulo7($bankAccountNumber, $weighting)
    {
        // remove check number
        $bankAccountNumberWithoutCheckNumber = substr($bankAccountNumber, 0, -1);

        // turn around the bank account number
        $bankAccountNumberWithoutCheckNumberReverse = strrev($bankAccountNumberWithoutCheckNumber);

        // split the bank account number
        $bankAccountNumberWithoutCheckNumberReverseSplitted = str_split($bankAccountNumberWithoutCheckNumberReverse);

        // convert every digits to a int
        foreach ($bankAccountNumberWithoutCheckNumberReverseSplitted as &$value) {
            $value = intval($value);
        }

        // multiply with the weighting
        $toCalculationArray = [];
        for ($i = 0; $i < count($bankAccountNumberWithoutCheckNumberReverseSplitted); $i++) {
            $toCalculationArray[] = $bankAccountNumberWithoutCheckNumberReverseSplitted[$i] * $weighting[$i];
        }

        // calculate the check sum if a product is bigger than 9
        foreach ($toCalculationArray as &$value) {
            if ($value >= 10) {
                $value = $this->_calculateCheckSum($value);
            }
        }

        // add up all the numbers
        $sum = array_sum($toCalculationArray);

        // calculate the modulo
        $rest = $sum % 7;

        if ($rest == 0) {
            return 0;
        }

        // subtracted from 7
        $calculationCheckNumber = 7 - $rest;

        return $calculationCheckNumber;
    }

    /**
     * 1. This function removes the check number of the bank account number and turn it around.
     * 2. Every bank account digit will be multiplied by the weighting.
     * 3. Then all results are added up
     * 4. Then the modulo is calculated.
     * 5. The rest of the modulo is subtracted from 10 and that will be the check number
     *    (if it is 10 the check number will be 0)
     *
     * @param String $bankAccountNumber to check
     * @param array  $weighting         the weighting of each letter of the bank account number
     *
     * @return int the check number
     *
     * @noinspection DuplicatedCode
     */
    function _calculateCheckNumberWithMethod01($bankAccountNumber, $weighting)
    {
        // remove check number
        $bankAccountNumberWithoutCheckNumber = substr($bankAccountNumber, 0, -1);

        // turn around the bank account number
        $bankAccountNumberWithoutCheckNumberReverse = strrev($bankAccountNumberWithoutCheckNumber);

        // split the bank account number
        $bankAccountNumberWithoutCheckNumberReverseSplitted = str_split($bankAccountNumberWithoutCheckNumberReverse);

        // convert every digits to a int
        foreach ($bankAccountNumberWithoutCheckNumberReverseSplitted as &$value) {
            $value = intval($value);
        }

        // multiply with the weighting
        $toCalculationArray = [];
        for ($i = 0; $i < count($bankAccountNumberWithoutCheckNumberReverseSplitted); $i++) {
            $toCalculationArray[] = $bankAccountNumberWithoutCheckNumberReverseSplitted[$i] * $weighting[$i];
        }

        // add up all the numbers
        $sum = array_sum($toCalculationArray);

        // calculate the modulo
        $rest = $sum % 10;

        // subtracted from 10
        $calculationCheckNumber = 10 - $rest;

        // if it is 10 the check number will be 0
        if ($calculationCheckNumber == 10) {
            $calculationCheckNumber = 0;
        }

        return $calculationCheckNumber;
    }

    /**
     * 1. This function removes the check number of the bank account number and turn it around.
     * 2. Every bank account digit will be multiplied by the weighting.
     * 3. Then all results are added up
     * 4. Then the modulo is calculated.
     * 5. The rest of the modulo is subtracted from 11 and that will be the check number
     *    (if the rest of the modulo is 1 the check number has 2 digits and is invalid)
     *
     * @param String $bankAccountNumber to check
     * @param array  $weighting         the weighting of each letter of the bank account number
     *
     * @return false|int the check number or false if the check number has 2 digits and is invalid
     *
     * @noinspection DuplicatedCode
     */
    function _calculateCheckNumberWithMethod02($bankAccountNumber, $weighting)
    {
        // remove check number
        $bankAccountNumberWithoutCheckNumber = substr($bankAccountNumber, 0, -1);

        // turn around the bank account number
        $bankAccountNumberWithoutCheckNumberReverse = strrev($bankAccountNumberWithoutCheckNumber);

        // split the bank account number
        $bankAccountNumberWithoutCheckNumberReverseSplitted = str_split($bankAccountNumberWithoutCheckNumberReverse);

        // convert every digits to a int
        foreach ($bankAccountNumberWithoutCheckNumberReverseSplitted as &$value) {
            $value = intval($value);
        }

        // multiply with the weighting
        $toCalculationArray = [];
        for ($i = 0; $i < count($bankAccountNumberWithoutCheckNumberReverseSplitted); $i++) {
            $toCalculationArray[] = $bankAccountNumberWithoutCheckNumberReverseSplitted[$i] * $weighting[$i];
        }

        // add up all the numbers
        $sum = array_sum($toCalculationArray);

        // calculate the modulo
        $rest = $sum % 11;
        if ($rest == 0) {
            return 0;
        }

        if ($rest == 1) {
            return false;
        }

        // subtracted from 11
        $calculationCheckNumber = 11 - $rest;

        return $calculationCheckNumber;
    }

    /**
     * 1. This function removes the check number of the bank account number if needed
     * 2. Than turn around the bank account number
     * 3. Every bank account digit will be multiplied by the weighting.
     * 4. Then all results are added up
     * 5. Then the modulo is calculated.
     * 6. The rest of the modulo is subtracted from 11 and that will be the check number
     *    (if it is 1 the check number 0)
     *    (if the rest after modulo is 0 the check number is 0!!!!)
     *
     * @param String  $bankAccountNumber to check
     * @param array   $weighting         the weighting of each letter of the bank account number
     * @param boolean $removeCheckNumber true if the last char (check number) should remove for the calculation
     *
     * @return int the check number or false if the check number has 2 digits and is invalid
     *
     * @noinspection DuplicatedCode
     */
    function _calculateCheckNumberWithMethod06($bankAccountNumber, $weighting, $removeCheckNumber)
    {
        // remove check number
        $bankAccountNumberWithoutCheckNumber = "";
        if ($removeCheckNumber) {
            $bankAccountNumberWithoutCheckNumber = substr($bankAccountNumber, 0, -1);
        } else {
            $bankAccountNumberWithoutCheckNumber = $bankAccountNumber;
        }

        // turn around the bank account number
        $bankAccountNumberWithoutCheckNumberReverse = strrev($bankAccountNumberWithoutCheckNumber);

        // split the bank account number
        $bankAccountNumberWithoutCheckNumberReverseSplitted = str_split($bankAccountNumberWithoutCheckNumberReverse);

        // convert every digits to a int
        foreach ($bankAccountNumberWithoutCheckNumberReverseSplitted as &$value) {
            $value = intval($value);
        }

        // multiply with the weighting
        $toCalculationArray = [];
        for ($i = 0; $i < count($bankAccountNumberWithoutCheckNumberReverseSplitted); $i++) {
                $toCalculationArray[] = $bankAccountNumberWithoutCheckNumberReverseSplitted[$i] * $weighting[$i];
        }

        // add up all the numbers
        $sum = array_sum($toCalculationArray);

        // calculate the modulo
        $rest = $sum % 11;

        if ($rest == 0) {
            return 0;
        }

        // subtracted from 11
        if ($rest == 1) {
            $calculationCheckNumber = 0;
        } else {
            $calculationCheckNumber = 11 - $rest;
        }

        // if it is 1 the check number is 0
        if ($calculationCheckNumber == 10) {
            $calculationCheckNumber = 0;
        }

        return $calculationCheckNumber;
    }

    /**
     * 1. This function removes the check number of the bank account number if needed
     * 2. Than turn around the bank account number
     * 3. Every bank account digit will be multiplied by the weighting.
     * 4. Then all results are added up
     * 5. Then the modulo is calculated.
     * 6. The rest of the modulo is subtracted from 7 and that will be the check number
     *    (if the rest after modulo is 0 the check number is 0!!!!)
     *
     * @param String  $bankAccountNumber to check
     * @param array   $weighting         the weighting of each letter of the bank account number
     * @param boolean $removeCheckNumber true if the last char (check number) should remove for the calculation
     *
     * @return int the check number or false if the check number has 2 digits and is invalid
     *
     * @noinspection DuplicatedCode
     */
    function _calculateCheckNumberWithMethod06WithMod7($bankAccountNumber, $weighting, $removeCheckNumber)
    {
        // remove check number
        $bankAccountNumberWithoutCheckNumber = "";
        if ($removeCheckNumber) {
            $bankAccountNumberWithoutCheckNumber = substr($bankAccountNumber, 0, -1);
        } else {
            $bankAccountNumberWithoutCheckNumber = $bankAccountNumber;
        }

        // turn around the bank account number
        $bankAccountNumberWithoutCheckNumberReverse = strrev($bankAccountNumberWithoutCheckNumber);

        // split the bank account number
        $bankAccountNumberWithoutCheckNumberReverseSplitted = str_split($bankAccountNumberWithoutCheckNumberReverse);

        // convert every digits to a int
        foreach ($bankAccountNumberWithoutCheckNumberReverseSplitted as &$value) {
            $value = intval($value);
        }

        // multiply with the weighting
        $toCalculationArray = [];
        for ($i = 0; $i < count($bankAccountNumberWithoutCheckNumberReverseSplitted); $i++) {
            $toCalculationArray[] = $bankAccountNumberWithoutCheckNumberReverseSplitted[$i] * $weighting[$i];
        }

        // add up all the numbers
        $sum = array_sum($toCalculationArray);

        // calculate the modulo
        $rest = $sum % 7;

        if ($rest == 0) {
            return 0;
        }

        $calculationCheckNumber = 7 - $rest;

        return $calculationCheckNumber;
    }

    /**
     * 1. This function removes the check number of the bank account number if needed
     * 2. Than turn around the bank account number
     * 3. Every bank account digit will be multiplied by the weighting.
     * 4. Then all results are added up
     * 5. Then the modulo is calculated.
     * 6. The rest of the modulo is subtracted from 9 and that will be the check number
     *    (if the rest after modulo is 0 the check number is 0!!!!)
     *
     * @param String  $bankAccountNumber to check
     * @param array   $weighting         the weighting of each letter of the bank account number
     * @param boolean $removeCheckNumber true if the last char (check number) should remove for the calculation
     *
     * @return int the check number or false if the check number has 2 digits and is invalid
     *
     * @noinspection DuplicatedCode
     */
    function _calculateCheckNumberWithMethod06WithMod9($bankAccountNumber, $weighting, $removeCheckNumber)
    {
        // remove check number
        $bankAccountNumberWithoutCheckNumber = "";
        if ($removeCheckNumber) {
            $bankAccountNumberWithoutCheckNumber = substr($bankAccountNumber, 0, -1);
        } else {
            $bankAccountNumberWithoutCheckNumber = $bankAccountNumber;
        }

        // turn around the bank account number
        $bankAccountNumberWithoutCheckNumberReverse = strrev($bankAccountNumberWithoutCheckNumber);

        // split the bank account number
        $bankAccountNumberWithoutCheckNumberReverseSplitted = str_split($bankAccountNumberWithoutCheckNumberReverse);

        // convert every digits to a int
        foreach ($bankAccountNumberWithoutCheckNumberReverseSplitted as &$value) {
            $value = intval($value);
        }

        // multiply with the weighting
        $toCalculationArray = [];
        for ($i = 0; $i < count($bankAccountNumberWithoutCheckNumberReverseSplitted); $i++) {
            $toCalculationArray[] = $bankAccountNumberWithoutCheckNumberReverseSplitted[$i] * $weighting[$i];
        }

        // add up all the numbers
        $sum = array_sum($toCalculationArray);

        // calculate the modulo
        $rest = $sum % 9;

        if ($rest == 0) {
            return 0;
        }

        $calculationCheckNumber = 9 - $rest;

        return $calculationCheckNumber;
    }

    /**
     * 1. This function removes the check number of the bank account number if needed
     * 2. Than turn around the bank account number
     * 3. Every bank account digit will be multiplied by the weighting.
     * 4. Then all results are added up
     * 5. Then the modulo is calculated.
     * 6. The rest of the modulo is subtracted from 11 and that will be the check number
     *    (if it is 1 the check number 0)
     *    (if the rest after modulo is 0 the check number is 0!!!!)
     *
     * @param String  $bankAccountNumber to check
     * @param array   $weighting         the weighting of each letter of the bank account number
     * @param boolean $removeCheckNumber true if the last char (check number) should remove for the calculation
     *
     * @return int the check number or false if the check number has 2 digits and is invalid
     *
     * @noinspection DuplicatedCode
     */
    function _calculateCheckNumberWithMethod06WithMod10($bankAccountNumber, $weighting, $removeCheckNumber)
    {
        // remove check number
        $bankAccountNumberWithoutCheckNumber = "";
        if ($removeCheckNumber) {
            $bankAccountNumberWithoutCheckNumber = substr($bankAccountNumber, 0, -1);
        } else {
            $bankAccountNumberWithoutCheckNumber = $bankAccountNumber;
        }

        // turn around the bank account number
        $bankAccountNumberWithoutCheckNumberReverse = strrev($bankAccountNumberWithoutCheckNumber);

        // split the bank account number
        $bankAccountNumberWithoutCheckNumberReverseSplitted = str_split($bankAccountNumberWithoutCheckNumberReverse);

        // convert every digits to a int
        foreach ($bankAccountNumberWithoutCheckNumberReverseSplitted as &$value) {
            $value = intval($value);
        }

        // multiply with the weighting
        $toCalculationArray = [];
        for ($i = 0; $i < count($bankAccountNumberWithoutCheckNumberReverseSplitted); $i++) {
            $toCalculationArray[] = $bankAccountNumberWithoutCheckNumberReverseSplitted[$i] * $weighting[$i];
        }

        // add up all the numbers
        $sum = array_sum($toCalculationArray);

        // calculate the modulo
        $rest = $sum % 10;

        if ($rest == 0) {
            return 0;
        }

        // subtracted from 10
        if ($rest == 1) {
            $calculationCheckNumber = 0;
        } else {
            $calculationCheckNumber = 10 - $rest;
        }

        // if it is 1 the check number is 0
        if ($calculationCheckNumber == 10) {
            $calculationCheckNumber = 0;
        }

        return $calculationCheckNumber;
    }

    /**
     * 1. This function removes the check number of the bank account number if needed
     * 2. Than turn around the bank account number
     * 3. Every bank account digit will be multiplied by the weighting.
     * 4. Then all results are added up
     * 5. Then the modulo is calculated.
     * 6. The rest of the modulo is subtracted from 11 and that will be the check number
     *    (if it is 10 the check number is 9)
     *    (if the rest after modulo is 0 the check number is 0!!!!)
     *
     * @param String  $bankAccountNumber to check
     * @param array   $weighting         the weighting of each letter of the bank account number
     * @param boolean $removeCheckNumber true if the last char (check number) should remove for the calculation
     *
     * @return int the check number or false if the check number has 2 digits and is invalid
     *
     * @noinspection DuplicatedCode
     */
    function _calculateCheckNumberWithMethod11($bankAccountNumber, $weighting, $removeCheckNumber)
    {
        // remove check number
        $bankAccountNumberWithoutCheckNumber = "";
        if ($removeCheckNumber) {
            $bankAccountNumberWithoutCheckNumber = substr($bankAccountNumber, 0, -1);
        } else {
            $bankAccountNumberWithoutCheckNumber = $bankAccountNumber;
        }

        // turn around the bank account number
        $bankAccountNumberWithoutCheckNumberReverse = strrev($bankAccountNumberWithoutCheckNumber);

        // split the bank account number
        $bankAccountNumberWithoutCheckNumberReverseSplitted = str_split($bankAccountNumberWithoutCheckNumberReverse);

        // convert every digits to a int
        foreach ($bankAccountNumberWithoutCheckNumberReverseSplitted as &$value) {
            $value = intval($value);
        }

        // multiply with the weighting
        $toCalculationArray = [];
        for ($i = 0; $i < count($bankAccountNumberWithoutCheckNumberReverseSplitted); $i++) {
            $toCalculationArray[] = $bankAccountNumberWithoutCheckNumberReverseSplitted[$i] * $weighting[$i];
        }

        // add up all the numbers
        $sum = array_sum($toCalculationArray);

        // calculate the modulo
        $rest = $sum % 11;

        if ($rest == 0) {
            return 0;
        }

        // subtracted from 11
        if ($rest == 1) {
            $calculationCheckNumber = 0;
        } else {
            $calculationCheckNumber = 11 - $rest;
        }

        // if it is 10 the check number is 9
        if ($calculationCheckNumber == 10) {
            $calculationCheckNumber = 9;
        }

        return $calculationCheckNumber;
    }

    /**
     * 1. This function removes the check number of the bank account number and turn it around.
     * 2. Every bank account digit will be multiplied by the weighting.
     * 3. If one of the multiplications will be higher than 9 the checksum will be calculated.
     * 4. Then all results are added up
     * 5. Then the modulo is calculated.
     * 6. The rest of the modulo is subtracted from 10 and that will be the check number
     *    (if it is 10 the check number will be 0)
     *
     * @param String $bankAccountNumber to check
     * @param array  $weighting         the weighting of each letter of the bank account number
     *
     * @return       int                       the check number
     * @noinspection DuplicatedCode
     */
    function _calculateCheckNumberWithMethod13($bankAccountNumber, $weighting)
    {
        // extract the ground bank account number
        $bankAccountNumberWithoutCheckNumber = substr($bankAccountNumber, 1, 6);

        // turn around the bank account number
        $bankAccountNumberWithoutCheckNumberReverse = strrev($bankAccountNumberWithoutCheckNumber);

        // split the bank account number
        $bankAccountNumberWithoutCheckNumberReverseSplitted = str_split($bankAccountNumberWithoutCheckNumberReverse);

        // convert every digits to a int
        foreach ($bankAccountNumberWithoutCheckNumberReverseSplitted as &$value) {
            $value = intval($value);
        }

        // multiply with the weighting
        $toCalculationArray = [];
        for ($i = 0; $i < count($bankAccountNumberWithoutCheckNumberReverseSplitted); $i++) {
            $toCalculationArray[] = $bankAccountNumberWithoutCheckNumberReverseSplitted[$i] * $weighting[$i];
        }

        // calculate the check sum if a product is bigger than 9
        foreach ($toCalculationArray as &$value) {
            if ($value >= 10) {
                $value = $this->_calculateCheckSum($value);
            }
        }

        // add up all the numbers
        $sum = array_sum($toCalculationArray);

        // calculate the modulo
        $rest = $sum % 10;

        // subtracted from 10
        $calculationCheckNumber = 10 - $rest;

        // if it is 10 the check number will be 0
        if ($calculationCheckNumber == 10) {
            $calculationCheckNumber = 0;
        }

        return $calculationCheckNumber;
    }

    /**
     * 1. This function removes the check number of the bank account number if needed
     * 2. Than turn around the bank account number
     * 3. Every bank account digit will be multiplied by the weighting.
     * 4. Then all results are added up
     * 5. Then the modulo is calculated.
     * 6. The rest of the modulo is subtracted from 11 and that will be the check number
     *    (if it is 1 the check number 0)
     *    (if the rest after modulo is 0 the check number is 0!!!!)
     *    (return true if the rest is 1 and the 2 last numbers are the same)
     *
     * @param String $bankAccountNumber to check
     * @param array  $weighting         the weighting of each letter of the bank account number
     *
     * @return int the check number or false if the check number has 2 digits and is invalid
     *
     * @noinspection DuplicatedCode
     */
    function _calculateCheckNumberWithMethod16($bankAccountNumber, $weighting)
    {
        // remove check number
        $bankAccountNumberWithoutCheckNumber = substr($bankAccountNumber, 0, -1);

        // turn around the bank account number
        $bankAccountNumberWithoutCheckNumberReverse = strrev($bankAccountNumberWithoutCheckNumber);

        // split the bank account number
        $bankAccountNumberWithoutCheckNumberReverseSplitted = str_split($bankAccountNumberWithoutCheckNumberReverse);

        // convert every digits to a int
        foreach ($bankAccountNumberWithoutCheckNumberReverseSplitted as &$value) {
            $value = intval($value);
        }

        // multiply with the weighting
        $toCalculationArray = [];
        for ($i = 0; $i < count($bankAccountNumberWithoutCheckNumberReverseSplitted); $i++) {
            $toCalculationArray[] = $bankAccountNumberWithoutCheckNumberReverseSplitted[$i] * $weighting[$i];
        }

        // add up all the numbers
        $sum = array_sum($toCalculationArray);

        // calculate the modulo
        $rest = $sum % 11;

        if ($rest == 0) {
            return 0;
        }

        $lastNumber = substr($bankAccountNumber, 9, 1);
        $penultimateNumber = substr($bankAccountNumber, 8, 1);
        //return true if the rest is 1 and the 2 last numbers are the same
        if ($rest == 1 && ($lastNumber == $penultimateNumber)) {
            return true;
        }

        // subtracted from 11
        if ($rest == 1) {
            $calculationCheckNumber = 0;
        } else {
            $calculationCheckNumber = 11 - $rest;
        }

        // if it is 1 the check number is 0
        if ($calculationCheckNumber == 10) {
            $calculationCheckNumber = 0;
        }

        return $calculationCheckNumber;
    }

    /**
     * 1. This function removes the check number of the bank account number and turn it around.
     * 2. Every bank account digit will be multiplied by the weighting.
     * 3. If one of the multiplications will be higher than 9 the check sum will be calculated.
     * 4. Then all results are added up and subtract 1
     * 5. Then the modulo is calculated.
     * 6. The rest of the modulo is subtracted from 10 and that will be the check number
     *    (if the rest of the modulo is 0 the check number is 0)
     *
     * @param String $bankAccountNumber to check
     * @param array  $weighting         the weighting of each letter of the bank account number
     *
     * @return       int                       the check number
     * @noinspection DuplicatedCode
     */
    function _calculateCheckNumberWithMethod17Version1($bankAccountNumber, $weighting)
    {
        // remove check number
        $bankAccountNumberWithoutCheckNumber = substr($bankAccountNumber, 1, -3);

        // turn around the bank account number
        $bankAccountNumberWithoutCheckNumberReverse = strrev($bankAccountNumberWithoutCheckNumber);

        // split the bank account number
        $bankAccountNumberWithoutCheckNumberReverseSplitted = str_split($bankAccountNumberWithoutCheckNumberReverse);

        // convert every digits to a int
        foreach ($bankAccountNumberWithoutCheckNumberReverseSplitted as &$value) {
            $value = intval($value);
        }

        // multiply with the weighting
        $toCalculationArray = [];
        for ($i = 0; $i < count($bankAccountNumberWithoutCheckNumberReverseSplitted); $i++) {
            $toCalculationArray[] = $bankAccountNumberWithoutCheckNumberReverseSplitted[$i] * $weighting[$i];
        }

        // calculate the check sum and subtract 1 if a product is bigger than 9
        foreach ($toCalculationArray as &$value) {
            if ($value >= 10) {
                $value = $this->_calculateCheckSum($value);
            }
        }

        // add up all the numbers
        $sum = array_sum($toCalculationArray) -1;

        // calculate the modulo
        $rest = $sum % 11;

        if ($rest == 0) {
            return 0;
        }

        // subtracted from 10
        $calculationCheckNumber = 10 - $rest;

        return $calculationCheckNumber;
    }

    /**
     * 1. This function removes the check number of the bank account number and turn it around.
     * 2. Every bank account digit will be multiplied by the weighting.
     * 3. If one of the multiplications will be higher than 9 the check sum will be calculated.
     * 4. Then all results are added up and subtract 1
     * 5. Then the modulo is calculated.
     * 6. The rest of the modulo is subtracted from 10 and that will be the check number
     *    (if the rest of the modulo is 0 the check number is 0)
     *
     * @param String $bankAccountNumber to check
     * @param array  $weighting         the weighting of each letter of the bank account number
     *
     * @return       int                       the check number
     * @noinspection DuplicatedCode
     */
    function _calculateCheckNumberWithMethod17Version2($bankAccountNumber, $weighting)
    {
        // remove check number
        $bankAccountNumberWithoutCheckNumber = substr($bankAccountNumber, 0, -1);

        // turn around the bank account number
        $bankAccountNumberWithoutCheckNumberReverse = strrev($bankAccountNumberWithoutCheckNumber);

        // split the bank account number
        $bankAccountNumberWithoutCheckNumberReverseSplitted = str_split($bankAccountNumberWithoutCheckNumberReverse);

        // convert every digits to a int
        foreach ($bankAccountNumberWithoutCheckNumberReverseSplitted as &$value) {
            $value = intval($value);
        }

        // multiply with the weighting
        $toCalculationArray = [];
        for ($i = 0; $i < count($bankAccountNumberWithoutCheckNumberReverseSplitted); $i++) {
            $toCalculationArray[] = $bankAccountNumberWithoutCheckNumberReverseSplitted[$i] * $weighting[$i];
        }

        // calculate the check sum and subtract 1 if a product is bigger than 9
        foreach ($toCalculationArray as &$value) {
            if ($value >= 10) {
                $value = $this->_calculateCheckSum($value);
            }
        }

        // add up all the numbers
        $sum = array_sum($toCalculationArray) -1;

        // calculate the modulo
        $rest = $sum % 11;

        if ($rest == 0) {
            return 0;
        }

        // subtracted from 10
        $calculationCheckNumber = 10 - $rest;

        return $calculationCheckNumber;
    }

    /**
     * 1. This function removes the check number of the bank account number and turn it around.
     * 2. Every bank account digit will be multiplied by the weighting.
     * 3. If one of the multiplications will be higher than 9 the check sum will be calculated.
     * 4. Then all results are added up
     * 5. Then the check sum is calculated.
     * 6. The rest of the modulo is subtracted from 10 and that will be the check number
     *
     * @param String $bankAccountNumber to check
     * @param array  $weighting         the weighting of each letter of the bank account number
     *
     * @return       int                       the check number
     * @noinspection DuplicatedCode
     */
    function _calculateCheckNumberWithMethod21($bankAccountNumber, $weighting)
    {
        // remove check number
        $bankAccountNumberWithoutCheckNumber = substr($bankAccountNumber, 0, -1);

        // turn around the bank account number
        $bankAccountNumberWithoutCheckNumberReverse = strrev($bankAccountNumberWithoutCheckNumber);

        // split the bank account number
        $bankAccountNumberWithoutCheckNumberReverseSplitted = str_split($bankAccountNumberWithoutCheckNumberReverse);

        // convert every digits to a int
        foreach ($bankAccountNumberWithoutCheckNumberReverseSplitted as &$value) {
            $value = intval($value);
        }

        // multiply with the weighting
        $toCalculationArray = [];
        for ($i = 0; $i < count($bankAccountNumberWithoutCheckNumberReverseSplitted); $i++) {
            $toCalculationArray[] = $bankAccountNumberWithoutCheckNumberReverseSplitted[$i] * $weighting[$i];
        }

        // calculate the check sum if a product is bigger than 9
        foreach ($toCalculationArray as &$value) {
            if ($value >= 10) {
                $value = $this->_calculateCheckSum($value);
            }
        }

        // add up all the numbers
        $sum = array_sum($toCalculationArray);

        // calculate the check sum
        do {
            $sum = $this->_calculateCheckSum($sum);
        } while ($sum >= 10);

        // subtracted from 10
        $calculationCheckNumber = 10 - $sum;

        return $calculationCheckNumber;
    }

    /**
     * 1. This function removes the check number of the bank account number and turn it around.
     * 2. Every bank account digit will be multiplied by the weighting.
     * 3. If one of the multiplications will be higher than 9 only the one place are used
     * 4. Then all results are added up
     * 5. Then the modulo is calculated.
     * 6. The rest of the modulo is subtracted from 10 and that will be the check number
     *
     * @param String $bankAccountNumber to check
     * @param array  $weighting         the weighting of each letter of the bank account number
     *
     * @return       int                       the check number
     * @noinspection DuplicatedCode
     */
    function _calculateCheckNumberWithMethod22($bankAccountNumber, $weighting)
    {
        // remove check number
        $bankAccountNumberWithoutCheckNumber = substr($bankAccountNumber, 0, -1);

        // turn around the bank account number
        $bankAccountNumberWithoutCheckNumberReverse = strrev($bankAccountNumberWithoutCheckNumber);

        // split the bank account number
        $bankAccountNumberWithoutCheckNumberReverseSplitted = str_split($bankAccountNumberWithoutCheckNumberReverse);

        // convert every digits to a int
        foreach ($bankAccountNumberWithoutCheckNumberReverseSplitted as &$value) {
            $value = intval($value);
        }

        // multiply with the weighting
        $toCalculationArray = [];
        for ($i = 0; $i < count($bankAccountNumberWithoutCheckNumberReverseSplitted); $i++) {
            $toCalculationArray[] = $bankAccountNumberWithoutCheckNumberReverseSplitted[$i] * $weighting[$i];
        }

        // calculate the modulo if a product is bigger than 9
        foreach ($toCalculationArray as &$value) {
            if ($value >= 10) {
                $value = $value % 10;
            }
        }

        // add up all the numbers
        $sum = array_sum($toCalculationArray);

        // calculate the modulo
        $rest = $sum % 10;

        if ($rest == 0) {
            return 0;
        }

        // subtracted from 10
        $calculationCheckNumber = 10 - $rest;

        return $calculationCheckNumber;
    }

    /**
     * 1. This function removes the check number of the bank account number
     * 2. Add some beginning "0" if the bank account number starts with 3,4,5,6 or 9
     * 3. Remove the beginning "0"
     * 4. Every bank account digit will be multiplied by the weighting and added the weighting.
     * 5. If one of the multiplications will be higher than 9 the checksum will be calculated.
     * 6. Then all results are added up
     * 7. Then the modulo is calculated and that will be the check number
     *
     * @param String $bankAccountNumber to check
     * @param array  $weighting         the weighting of each letter of the bank account number
     *
     * @return       int                       the check number
     * @noinspection DuplicatedCode
     */
    function _calculateCheckNumberWithMethod24($bankAccountNumber, $weighting)
    {
        // remove check number
        $bankAccountNumberWithoutCheckNumber = substr($bankAccountNumber, 0, -1);

        //add beginning "0"
        $begin = substr($bankAccountNumberWithoutCheckNumber, 0, 1);
        if (in_array($begin, array("3", "4", "5", "6"))) {
            $bankAccountNumberWithoutCheckNumber = "0" . substr($bankAccountNumberWithoutCheckNumber, 1);
        }

        if ($begin == "9") {
            $bankAccountNumberWithoutCheckNumber = "000" . substr($bankAccountNumberWithoutCheckNumber, 3);
        }

        // remove beginning 0
        $bankAccountNumberWithoutCheckNumber = strval(intval($bankAccountNumberWithoutCheckNumber));

        // split the bank account number
        $bankAccountNumberWithoutCheckNumberReverseSplitted = str_split($bankAccountNumberWithoutCheckNumber);

        // convert every digits to a int
        foreach ($bankAccountNumberWithoutCheckNumberReverseSplitted as &$value) {
            $value = intval($value);
        }

        // multiply with the weighting and add the weighting
        $toCalculationArray = [];
        for ($i = 0; $i < count($bankAccountNumberWithoutCheckNumberReverseSplitted); $i++) {
            $toCalculationArray[]
                = ($bankAccountNumberWithoutCheckNumberReverseSplitted[$i] * $weighting[$i]) + $weighting[$i];
        }

        // calculate the modulo if a product is bigger than 9
        foreach ($toCalculationArray as &$value) {
            if ($value >= 10) {
                $value = $value % 11;
            }
        }

        // add up all the numbers
        $sum = array_sum($toCalculationArray);

        // calculate the modulo
        $calculationCheckNumber = $sum % 10;

        return $calculationCheckNumber;
    }

    /**
     * 1. This function extract the ground bank account number and turn it around.
     * 2. Every bank account digit will be multiplied by the weighting.
     * 3. Then all results are added up
     * 4. Then the modulo is calculated.
     * 5. The rest of the modulo is subtracted from 11 and that will be the check number
     *    (if it is 1 the check number 0)
     *    (if the rest after modulo is 0 the check number is 0!!!!)
     *
     * @param String $bankAccountNumber to check
     * @param array  $weighting         the weighting of each letter of the bank account number
     *
     * @return int the check number or false if the check number has 2 digits and is invalid
     *
     * @noinspection DuplicatedCode
     */
    function _calculateCheckNumberWithMethod28($bankAccountNumber, $weighting)
    {
        // extract the ground bank account
        $bankAccountNumberWithoutCheckNumber = substr($bankAccountNumber, 0, 7);

        // turn around the bank account number
        $bankAccountNumberWithoutCheckNumberReverse = strrev($bankAccountNumberWithoutCheckNumber);

        // split the bank account number
        $bankAccountNumberWithoutCheckNumberReverseSplitted = str_split($bankAccountNumberWithoutCheckNumberReverse);

        // convert every digits to a int
        foreach ($bankAccountNumberWithoutCheckNumberReverseSplitted as &$value) {
            $value = intval($value);
        }

        // multiply with the weighting
        $toCalculationArray = [];
        for ($i = 0; $i < count($bankAccountNumberWithoutCheckNumberReverseSplitted); $i++) {
            $toCalculationArray[] = $bankAccountNumberWithoutCheckNumberReverseSplitted[$i] * $weighting[$i];
        }

        // add up all the numbers
        $sum = array_sum($toCalculationArray);

        // calculate the modulo
        $rest = $sum % 11;

        // subtracted from 11
        if ($rest == 0) {
            $calculationCheckNumber = 0;
        } else {
            $calculationCheckNumber = 11 - $rest;
        }

        // if it is 1 the check number is 0
        if ($calculationCheckNumber == 10) {
            $calculationCheckNumber = 0;
        }

        return $calculationCheckNumber;
    }

    /**
     * 1. This function removes the check number of the bank account number
     * 2. Every bank account digit will be multiplied by the weighting.
     * 3. If one of the multiplications will be higher than 9 the check sum will be calculated.
     * 4. Then all results are added up
     * 5. Then the modulo is calculated.
     * 6. The rest of the modulo is subtracted from 10 and that will be the check number
     *    (if it is 10 the check number will be 0)
     *
     * @param String $bankAccountNumber to check
     * @param array  $weighting         the weighting of each letter of the bank account number
     *
     * @return       int                       the check number
     * @noinspection DuplicatedCode
     */
    function _calculateCheckNumberWithMethod30($bankAccountNumber, $weighting)
    {
        // remove check number
        $bankAccountNumberWithoutCheckNumber = substr($bankAccountNumber, 0, -1);

        // turn around the bank account number
        $bankAccountNumberWithoutCheckNumberReverse = strrev($bankAccountNumberWithoutCheckNumber);

        // split the bank account number
        $bankAccountNumberWithoutCheckNumberReverseSplitted = str_split($bankAccountNumberWithoutCheckNumberReverse);

        // convert every digits to a int
        foreach ($bankAccountNumberWithoutCheckNumberReverseSplitted as &$value) {
            $value = intval($value);
        }

        // multiply with the weighting
        $toCalculationArray = [];
        for ($i = 0; $i < count($bankAccountNumberWithoutCheckNumberReverseSplitted); $i++) {
            $toCalculationArray[] = $bankAccountNumberWithoutCheckNumberReverseSplitted[$i] * $weighting[$i];
        }

        // add up all the numbers
        $sum = array_sum($toCalculationArray);

        // calculate the modulo
        $rest = $sum % 10;

        // subtracted from 10
        $calculationCheckNumber = 10 - $rest;

        // if it is 10 the check number will be 0
        if ($calculationCheckNumber == 10) {
            $calculationCheckNumber = 0;
        }

        return $calculationCheckNumber;
    }

    /**
     * 1. This function removes the check number of the bank account number and turn it around.
     * 3. Every bank account digit will be multiplied by the weighting.
     * 4. If one of the multiplications will be higher than 9 the checksum will be calculated.
     * 5. Then all results are added up
     * 6. Then the modulo is calculated.
     * 7. The rest of the modulo is subtracted from 10 and that will be the check number
     *    (if it is 10 the check number will be 0)
     *
     * @param String $bankAccountNumber to check
     * @param array  $weighting         the weighting of each letter of the bank account number
     *
     * @return       int                       the check number
     * @noinspection DuplicatedCode
     */
    function _calculateCheckNumberWithMethod31($bankAccountNumber, $weighting)
    {
        // extract the ground bank account
        $bankAccountNumberWithoutCheckNumber = substr($bankAccountNumber, 0, -1);

        // turn around the bank account number
        $bankAccountNumberWithoutCheckNumberReverse = strrev($bankAccountNumberWithoutCheckNumber);

        // split the bank account number
        $bankAccountNumberWithoutCheckNumberReverseSplitted = str_split($bankAccountNumberWithoutCheckNumberReverse);

        // convert every digits to a int
        foreach ($bankAccountNumberWithoutCheckNumberReverseSplitted as &$value) {
            $value = intval($value);
        }

        // multiply with the weighting
        $toCalculationArray = [];
        for ($i = 0; $i < count($bankAccountNumberWithoutCheckNumberReverseSplitted); $i++) {
            $toCalculationArray[] = $bankAccountNumberWithoutCheckNumberReverseSplitted[$i] * $weighting[$i];
        }

        // add up all the numbers
        $sum = array_sum($toCalculationArray);

        // calculate the modulo
        $calculationCheckNumber = $sum % 11;

        // if it is 10 its invalid
        if ($calculationCheckNumber == 10) {
            return false;
        }

        return $calculationCheckNumber;
    }

    /**
     * 1. This function extract the ground bank account number and turn it around.
     * 2. Every bank account digit will be multiplied by the weighting.
     * 3. Then all results are added up
     * 4. Then the modulo is calculated.
     * 5. The rest of the modulo is subtracted from 11 and that will be the check number
     *    (if it is 1 the check number 0)
     *    (if the rest after modulo is 0 the check number is 0!!!!)
     *
     * @param String $bankAccountNumber to check
     * @param array  $weighting         the weighting of each letter of the bank account number
     *
     * @return int the check number or false if the check number has 2 digits and is invalid
     *
     * @noinspection DuplicatedCode
     */
    function _calculateCheckNumberWithMethod32($bankAccountNumber, $weighting)
    {
        // extract the ground bank account
        $bankAccountNumberWithoutCheckNumber = substr($bankAccountNumber, 3, 6);

        // turn around the bank account number
        $bankAccountNumberWithoutCheckNumberReverse = strrev($bankAccountNumberWithoutCheckNumber);

        // split the bank account number
        $bankAccountNumberWithoutCheckNumberReverseSplitted = str_split($bankAccountNumberWithoutCheckNumberReverse);

        // convert every digits to a int
        foreach ($bankAccountNumberWithoutCheckNumberReverseSplitted as &$value) {
            $value = intval($value);
        }

        // multiply with the weighting
        $toCalculationArray = [];
        for ($i = 0; $i < count($bankAccountNumberWithoutCheckNumberReverseSplitted); $i++) {
            $toCalculationArray[] = $bankAccountNumberWithoutCheckNumberReverseSplitted[$i] * $weighting[$i];
        }

        // add up all the numbers
        $sum = array_sum($toCalculationArray);

        // calculate the modulo
        $rest = $sum % 11;

        // subtracted from 11
        if ($rest == 0) {
            $calculationCheckNumber = 0;
        } else {
            $calculationCheckNumber = 11 - $rest;
        }

        // if it is 1 the check number is 0
        if ($calculationCheckNumber == 10) {
            $calculationCheckNumber = 0;
        }

        return $calculationCheckNumber;
    }

    /**
     * 1. This function removes the check number of the bank account number and turn it around.
     * 3. Every bank account digit will be multiplied by the weighting.
     * 4. If one of the multiplications will be higher than 9 the checksum will be calculated.
     * 5. Then all results are added up
     * 6. Then the modulo is calculated.
     * 7. The rest of the modulo is subtracted from 10 and that will be the check number
     *    (if it is 10 the check number will be 0)
     *
     * @param String $bankAccountNumber to check
     * @param array  $weighting         the weighting of each letter of the bank account number
     *
     * @return       int                       the check number
     * @noinspection DuplicatedCode
     */
    function _calculateCheckNumberWithMethod35($bankAccountNumber, $weighting)
    {
        // extract the ground bank account
        $bankAccountNumberWithoutCheckNumber = substr($bankAccountNumber, 0, -1);

        // turn around the bank account number
        $bankAccountNumberWithoutCheckNumberReverse = strrev($bankAccountNumberWithoutCheckNumber);

        // split the bank account number
        $bankAccountNumberWithoutCheckNumberReverseSplitted = str_split($bankAccountNumberWithoutCheckNumberReverse);

        // convert every digits to a int
        foreach ($bankAccountNumberWithoutCheckNumberReverseSplitted as &$value) {
            $value = intval($value);
        }

        // multiply with the weighting
        $toCalculationArray = [];
        for ($i = 0; $i < count($bankAccountNumberWithoutCheckNumberReverseSplitted); $i++) {
            $toCalculationArray[] = $bankAccountNumberWithoutCheckNumberReverseSplitted[$i] * $weighting[$i];
        }

        // add up all the numbers
        $sum = array_sum($toCalculationArray);

        // calculate the modulo
        $calculationCheckNumber = $sum % 11;

        return $calculationCheckNumber;
    }

    /**
     * 1. This function removes the check number of the bank account number and turn it around.
     * 2. Every bank account digit will be multiplied by the weighting.
     * 3. Then all results are added up
     * 4. Then the modulo is calculated.
     * 5. ...
     *
     * @param String $bankAccountNumber to check
     * @param array  $weighting         the weighting of each letter of the bank account number
     *
     * @return       int                       the check number
     * @noinspection DuplicatedCode
     */
    function _calculateCheckNumberWithMethod52($bankAccountNumber, $weighting)
    {
        // turn around the bank account number
        $bankAccountNumberWithoutCheckNumberReverse = strrev($bankAccountNumber);

        // split the bank account number
        $bankAccountNumberWithoutCheckNumberReverseSplitted = str_split($bankAccountNumberWithoutCheckNumberReverse);

        // convert every digits to a int
        foreach ($bankAccountNumberWithoutCheckNumberReverseSplitted as &$value) {
            $value = intval($value);
        }

        // multiply with the weighting
        $toCalculationArray = [];
        for ($i = 0; $i < count($bankAccountNumberWithoutCheckNumberReverseSplitted); $i++) {
            $toCalculationArray[] = $bankAccountNumberWithoutCheckNumberReverseSplitted[$i] * $weighting[$i];
        }

        // add up all the numbers
        $sum = array_sum($toCalculationArray);

        // calculate the modulo
        $rest = $sum % 11;

        // calculate the check number
        for ($i = 0; $i <= 10; $i++) {
            $temp = $rest + ($i * 10);
            $rest2 = $temp % 11;

            if ($rest2 == 10) {
                return $i;
            }
        }
        return false;
    }

    /**
     * 1. This function removes the check number of the bank account number if needed
     * 2. Than turn around the bank account number
     * 3. Every bank account digit will be multiplied by the weighting.
     * 4. Then all results are added up
     * 5. Then the modulo is calculated.
     * 6. The rest of the modulo is subtracted from 11 and that will be the check number
     *    (if the rest after modulo is 0 or 1 the check number is invalid!!!!)
     *
     * @param String $bankAccountNumber to check
     * @param array  $weighting         the weighting of each letter of the bank account number
     *
     * @return int the check number or false if the check number has 2 digits and is invalid
     *
     * @noinspection DuplicatedCode
     */
    function _calculateCheckNumberWithMethod54($bankAccountNumber, $weighting)
    {
        // remove check number
        $bankAccountNumberWithoutCheckNumber = substr($bankAccountNumber, 0, -1);

        // turn around the bank account number
        $bankAccountNumberWithoutCheckNumberReverse = strrev($bankAccountNumberWithoutCheckNumber);

        // split the bank account number
        $bankAccountNumberWithoutCheckNumberReverseSplitted = str_split($bankAccountNumberWithoutCheckNumberReverse);

        // convert every digits to a int
        foreach ($bankAccountNumberWithoutCheckNumberReverseSplitted as &$value) {
            $value = intval($value);
        }

        // multiply with the weighting
        $toCalculationArray = [];
        for ($i = 0; $i < count($bankAccountNumberWithoutCheckNumberReverseSplitted); $i++) {
            $toCalculationArray[] = $bankAccountNumberWithoutCheckNumberReverseSplitted[$i] * $weighting[$i];
        }

        // add up all the numbers
        $sum = array_sum($toCalculationArray);

        // calculate the modulo
        $rest = $sum % 11;

        if ($rest == 0) {
            return false;
        }

        if ($rest == 1) {
            return false;
        }

        // subtracted from 11
        $calculationCheckNumber = 11 - $rest;

        return $calculationCheckNumber;
    }

    /**
     * 1. This function removes the check number of the bank account number and turn it around.
     * 2. Every bank account digit will be multiplied by the weighting.
     * 3. Then all results are added up
     * 4. Then the modulo is calculated.
     * 5. The rest of the modulo is subtracted from 11 and that will be the check number
     *
     * @param String $bankAccountNumber to check
     * @param array  $weighting         the weighting of each letter of the bank account number
     *
     * @return false|int the check number or false if the check number has 2 digits and is invalid
     *
     * @noinspection DuplicatedCode
     */
    function _calculateCheckNumberWithMethod56($bankAccountNumber, $weighting)
    {
        // remove check number
        $bankAccountNumberWithoutCheckNumber = substr($bankAccountNumber, 0, -1);

        // turn around the bank account number
        $bankAccountNumberWithoutCheckNumberReverse = strrev($bankAccountNumberWithoutCheckNumber);

        // split the bank account number
        $bankAccountNumberWithoutCheckNumberReverseSplitted = str_split($bankAccountNumberWithoutCheckNumberReverse);

        // convert every digits to a int
        foreach ($bankAccountNumberWithoutCheckNumberReverseSplitted as &$value) {
            $value = intval($value);
        }

        // multiply with the weighting
        $toCalculationArray = [];
        for ($i = 0; $i < count($bankAccountNumberWithoutCheckNumberReverseSplitted); $i++) {
            $toCalculationArray[] = $bankAccountNumberWithoutCheckNumberReverseSplitted[$i] * $weighting[$i];
        }

        // add up all the numbers
        $sum = array_sum($toCalculationArray);

        // calculate the modulo
        $rest = $sum % 11;

        // subtracted from 11
        $calculationCheckNumber = 11 - $rest;

        return $calculationCheckNumber;
    }

    /**
     * 1. This function extract the ground bank account number and turn it around.
     * 2. Every bank account digit will be multiplied by the weighting.
     * 3. If one of the multiplications will be higher than 9 the checksum will be calculated.
     * 4. Then all results are added up
     * 5. Then the modulo is calculated.
     * 6. The rest of the modulo is subtracted from 10 and that will be the check number
     *    (if it is 10 the check number will be 0)
     *
     * @param String $bankAccountNumber to check
     * @param array  $weighting         the weighting of each letter of the bank account number
     *
     * @return       int                       the check number
     * @noinspection DuplicatedCode
     */
    function _calculateCheckNumberWithMethod61($bankAccountNumber, $weighting)
    {
        // extract the ground bank account number
        $kindOfBankAccount = substr($bankAccountNumber, -2);
        $bankAccountNumberWithoutCheckNumber = -1;
        if ($kindOfBankAccount == 8) {
            $bankAccountNumberWithoutCheckNumber = substr($bankAccountNumber, 0, 7) + substr($bankAccountNumber, 8, 2);
        } else {
            $bankAccountNumberWithoutCheckNumber = substr($bankAccountNumber, 0, 7);
        }

        // turn around the bank account number
        $bankAccountNumberWithoutCheckNumberReverse = strrev($bankAccountNumberWithoutCheckNumber);

        // split the bank account number
        $bankAccountNumberWithoutCheckNumberReverseSplitted = str_split($bankAccountNumberWithoutCheckNumberReverse);

        // convert every digits to a int
        foreach ($bankAccountNumberWithoutCheckNumberReverseSplitted as &$value) {
            $value = intval($value);
        }

        // multiply with the weighting
        $toCalculationArray = [];
        for ($i = 0; $i < count($bankAccountNumberWithoutCheckNumberReverseSplitted); $i++) {
            $toCalculationArray[] = $bankAccountNumberWithoutCheckNumberReverseSplitted[$i] * $weighting[$i];
        }

        // calculate the check sum if a product is bigger than 9
        foreach ($toCalculationArray as &$value) {
            if ($value >= 10) {
                $value = $this->_calculateCheckSum($value);
            }
        }

        // add up all the numbers
        $sum = array_sum($toCalculationArray);

        // calculate the modulo
        $rest = $sum % 10;

        // subtracted from 10
        $calculationCheckNumber = 10 - $rest;

        // if it is 10 the check number will be 0
        if ($calculationCheckNumber == 10) {
            $calculationCheckNumber = 0;
        }

        return $calculationCheckNumber;
    }

    /**
     * 1. If the first char is not "0" it is invalid
     * 2. This function extract the ground bank account number and turn it around.
     * 3. Every bank account digit will be multiplied by the weighting.
     * 4. If one of the multiplications will be higher than 9 the checksum will be calculated.
     * 5. Then all results are added up
     * 6. Then the modulo is calculated.
     * 7. The rest of the modulo is subtracted from 10 and that will be the check number
     *    (if it is 10 the check number will be 0)
     *
     * @param String $bankAccountNumber to check
     * @param array  $weighting         the weighting of each letter of the bank account number
     *
     * @return       int                       the check number
     * @noinspection DuplicatedCode
     */
    function _calculateCheckNumberWithMethod63($bankAccountNumber, $weighting)
    {
        // if the first char is not '0' than its invalid
        $firstChar = substr($bankAccountNumber, 0, 1);
        if ($firstChar != 0) {
            return false;
        }

        // extract the ground bank account number
        $begin = substr($bankAccountNumber, 0, 3);
        $bankAccountNumberWithoutCheckNumber = -1;
        if ($begin != "000") {
            $bankAccountNumberWithoutCheckNumber = substr($bankAccountNumber, 1, 6);
        } else {
            $bankAccountNumberWithoutCheckNumber = substr($bankAccountNumber, 3, 6);
        }

        // turn around the bank account number
        $bankAccountNumberWithoutCheckNumberReverse = strrev($bankAccountNumberWithoutCheckNumber);

        // split the bank account number
        $bankAccountNumberWithoutCheckNumberReverseSplitted = str_split($bankAccountNumberWithoutCheckNumberReverse);

        // convert every digits to a int
        foreach ($bankAccountNumberWithoutCheckNumberReverseSplitted as &$value) {
            $value = intval($value);
        }

        // multiply with the weighting
        $toCalculationArray = [];
        for ($i = 0; $i < count($bankAccountNumberWithoutCheckNumberReverseSplitted); $i++) {
            $toCalculationArray[] = $bankAccountNumberWithoutCheckNumberReverseSplitted[$i] * $weighting[$i];
        }

        // calculate the check sum if a product is bigger than 9
        foreach ($toCalculationArray as &$value) {
            if ($value >= 10) {
                $value = $this->_calculateCheckSum($value);
            }
        }

        // add up all the numbers
        $sum = array_sum($toCalculationArray);

        // calculate the modulo
        $rest = $sum % 10;

        // subtracted from 10
        $calculationCheckNumber = 10 - $rest;

        // if it is 10 the check number will be 0
        if ($calculationCheckNumber == 10) {
            $calculationCheckNumber = 0;
        }

        return $calculationCheckNumber;
    }

    /**
     * 1. This function removes the check number of the bank account number if needed
     * 3. Every bank account digit will be multiplied by the weighting.
     * 4. Then all results are added up
     * 5. Then the modulo is calculated.
     * 6. The rest of the modulo is subtracted from 11 and that will be the check number
     *    (if it is 1 the check number 0)
     *    (if the rest after modulo is 0 the check number is 0!!!!)
     *
     * @param String $bankAccountNumber to check
     * @param array  $weighting         the weighting of each letter of the bank account number
     *
     * @return int the check number or false if the check number has 2 digits and is invalid
     *
     * @noinspection DuplicatedCode
     */
    function _calculateCheckNumberWithMethod64($bankAccountNumber, $weighting)
    {
        // remove check number
        $bankAccountNumberWithoutCheckNumber = substr($bankAccountNumber, 0, -1);

        // split the bank account number
        $bankAccountNumberWithoutCheckNumberReverseSplitted = str_split($bankAccountNumberWithoutCheckNumber);

        // convert every digits to a int
        foreach ($bankAccountNumberWithoutCheckNumberReverseSplitted as &$value) {
            $value = intval($value);
        }

        // multiply with the weighting
        $toCalculationArray = [];
        for ($i = 0; $i < count($bankAccountNumberWithoutCheckNumberReverseSplitted); $i++) {
            $toCalculationArray[] = $bankAccountNumberWithoutCheckNumberReverseSplitted[$i] * $weighting[$i];
        }

        // add up all the numbers
        $sum = array_sum($toCalculationArray);

        // calculate the modulo
        $rest = $sum % 11;

        if ($rest == 0) {
            return 0;
        }

        // subtracted from 11
        if ($rest == 1) {
            $calculationCheckNumber = 0;
        } else {
            $calculationCheckNumber = 11 - $rest;
        }

        // if it is 1 the check number is 0
        if ($calculationCheckNumber == 10) {
            $calculationCheckNumber = 0;
        }

        return $calculationCheckNumber;
    }

    /**
     * 1. This function removes the check number of the bank account number if needed
     * 2. Than turn around the bank account number
     * 3. Every bank account digit will be multiplied by the weighting.
     * 4. Then all results are added up
     * 5. Then the modulo is calculated.
     * 6. The rest of the modulo is subtracted from 11 and that will be the check number
     *    (if it is 1 the check number 0)
     *    (if the rest after modulo is 0 the check number is 0!!!!)
     *
     * @param String $bankAccountNumber to check
     * @param array  $weighting         the weighting of each letter of the bank account number
     *
     * @return int the check number or false if the check number has 2 digits and is invalid
     *
     * @noinspection DuplicatedCode
     */
    function _calculateCheckNumberWithMethod66($bankAccountNumber, $weighting)
    {
        // remove check number
        $bankAccountNumberWithoutCheckNumber = substr($bankAccountNumber, 0, -1);

        // turn around the bank account number
        $bankAccountNumberWithoutCheckNumberReverse = strrev($bankAccountNumberWithoutCheckNumber);

        // split the bank account number
        $bankAccountNumberWithoutCheckNumberReverseSplitted = str_split($bankAccountNumberWithoutCheckNumberReverse);

        // convert every digits to a int
        foreach ($bankAccountNumberWithoutCheckNumberReverseSplitted as &$value) {
            $value = intval($value);
        }

        // multiply with the weighting
        $toCalculationArray = [];
        for ($i = 0; $i < count($bankAccountNumberWithoutCheckNumberReverseSplitted); $i++) {
            $toCalculationArray[] = $bankAccountNumberWithoutCheckNumberReverseSplitted[$i] * $weighting[$i];
        }

        // add up all the numbers
        $sum = array_sum($toCalculationArray);

        // calculate the modulo
        $rest = $sum % 11;

        if ($rest == 0) {
            return 1;
        }

        if ($rest == 1) {
            return 0;
        }

        // subtracted from 11
        $calculationCheckNumber = 11 - $rest;

        return $calculationCheckNumber;
    }

    /**
     * 1. This function removes the check number of the bank account number
     * 2. Every bank account digit will be multiplied by the weighting.
     * 3. Then all results are added up
     * 4. Then the modulo is calculated.
     * 5. The rest of the modulo is subtracted from 11 and that will be the check number
     *    (if the rest of the modulo is 1 the check number has 2 digits and is invalid)
     *
     * @param String $bankAccountNumber to check
     * @param array  $weighting         the weighting of each letter of the bank account number
     *
     * @return false|int the check number or false if the check number has 2 digits and is invalid
     *
     * @noinspection DuplicatedCode
     */
    function _calculateCheckNumberWithMethod71($bankAccountNumber, $weighting)
    {
        // remove check number
        $bankAccountNumberWithoutCheckNumber = substr($bankAccountNumber, 1, -3);

        // split the bank account number
        $bankAccountNumberWithoutCheckNumberReverseSplitted = str_split($bankAccountNumberWithoutCheckNumber);

        // convert every digits to a int
        foreach ($bankAccountNumberWithoutCheckNumberReverseSplitted as &$value) {
            $value = intval($value);
        }

        // multiply with the weighting
        $toCalculationArray = [];
        for ($i = 0; $i < count($bankAccountNumberWithoutCheckNumberReverseSplitted); $i++) {
            $toCalculationArray[] = $bankAccountNumberWithoutCheckNumberReverseSplitted[$i] * $weighting[$i];
        }

        // add up all the numbers
        $sum = array_sum($toCalculationArray);

        // calculate the modulo
        $rest = $sum % 11;
        if ($rest == 0) {
            return 0;
        }

        if ($rest == 1) {
            return 1;
        }

        // subtracted from 11
        $calculationCheckNumber = 11 - $rest;

        return $calculationCheckNumber;
    }

    /**
     * 1. If the kind of bank account is not 0, 4, 6, 7, 8 or 9 it is invalid
     * 2. This function extract the ground bank account number and turn it around.
     * 3. Every bank account digit will be multiplied by the weighting.
     * 4. If one of the multiplications will be higher than 9 the checksum will be calculated.
     * 5. Then all results are added up
     * 6. Then the modulo is calculated.
     * 7. The rest of the modulo is subtracted from 10 and that will be the check number
     *    (if it is 10 the check number will be 0)
     *
     * @param String $bankAccountNumber to check
     * @param array  $weighting         the weighting of each letter of the bank account number
     *
     * @return       int                       the check number
     * @noinspection DuplicatedCode
     */
    function _calculateCheckNumberWithMethod76($bankAccountNumber, $weighting)
    {
        // if the kind of bank account is not 0, 4, 6, 7, 8 or 9 it is invalid
        $firstChar = substr($bankAccountNumber, 1, 1);
        if (!in_array($firstChar, array(0, 4, 6, 7, 8, 9))) {
            return false;
        }

        // extract the ground bank account
        $bankAccountNumberWithoutCheckNumber = substr($bankAccountNumber, 1, 6);

        // turn around the bank account number
        $bankAccountNumberWithoutCheckNumberReverse = strrev($bankAccountNumberWithoutCheckNumber);

        // split the bank account number
        $bankAccountNumberWithoutCheckNumberReverseSplitted = str_split($bankAccountNumberWithoutCheckNumberReverse);

        // convert every digits to a int
        foreach ($bankAccountNumberWithoutCheckNumberReverseSplitted as &$value) {
            $value = intval($value);
        }

        // multiply with the weighting
        $toCalculationArray = [];
        for ($i = 0; $i < count($bankAccountNumberWithoutCheckNumberReverseSplitted); $i++) {
            $toCalculationArray[] = $bankAccountNumberWithoutCheckNumberReverseSplitted[$i] * $weighting[$i];
        }

        // add up all the numbers
        $sum = array_sum($toCalculationArray);

        // calculate the modulo
        $calculationCheckNumber = $sum % 11;

        // if it is 10 its invalid
        if ($calculationCheckNumber == 10) {
            return false;
        }

        return $calculationCheckNumber;
    }

    /**
     * 1. This function removes the check number of the bank account number and turn it around.
     * 2. the part 4-9 or 3-9 if the third part is a '9' will be multiplied by the weighting.
     * 3. Then all results are added up
     * 4. Then the modulo is calculated.
     * 5. The rest of the modulo is subtracted from 11 and that will be the check number
     *    (if it is 1 the check number 0)
     *    (if the rest after modulo is 0 the check number is 0!!!!)
     *
     * @param String $bankAccountNumber to check
     * @param array  $weighting         the weighting of each letter of the bank account number
     *
     * @return int the check number or false if the check number has 2 digits and is invalid
     *
     * @noinspection DuplicatedCode
     */
    function _calculateCheckNumberWithMethod88($bankAccountNumber, $weighting)
    {
        // remove check number
        $bankAccountNumberWithoutCheckNumber = substr($bankAccountNumber, 2, 7);

        // turn around the bank account number
        $bankAccountNumberWithoutCheckNumberReverse = strrev($bankAccountNumberWithoutCheckNumber);

        // split the bank account number
        $bankAccountNumberWithoutCheckNumberReverseSplitted = str_split($bankAccountNumberWithoutCheckNumberReverse);

        // convert every digits to a int
        foreach ($bankAccountNumberWithoutCheckNumberReverseSplitted as &$value) {
            $value = intval($value);
        }

        // multiply with the weighting
        $toCalculationArray = [];
        for ($i = 0; $i < count($bankAccountNumberWithoutCheckNumberReverseSplitted); $i++) {
            if ($i != count($bankAccountNumberWithoutCheckNumberReverseSplitted)-1) {
                $toCalculationArray[] = $bankAccountNumberWithoutCheckNumberReverseSplitted[$i] * $weighting[$i];
            } else {
                if ($bankAccountNumberWithoutCheckNumberReverseSplitted[$i] == 9) {
                    $toCalculationArray[] = $bankAccountNumberWithoutCheckNumberReverseSplitted[$i] * $weighting[$i];
                }
            }
        }

        // add up all the numbers
        $sum = array_sum($toCalculationArray);

        // calculate the modulo
        $rest = $sum % 11;

        // subtracted from 11
        if ($rest == 0) {
            $calculationCheckNumber = 0;
        } else {
            $calculationCheckNumber = 11 - $rest;
        }

        // if it is 10 the check number is 0
        if ($calculationCheckNumber == 10) {
            $calculationCheckNumber = 0;
        }

        return $calculationCheckNumber;
    }

    /**
     * 1. This function extract the ground bank account number and remove starting 0
     * 2. Then the modulo is calculated
     * 3. The check number is the subtraction of 11 and the rest
     *
     * @param String $bankAccountNumber to check
     *
     * @return       int                       the check number
     * @noinspection DuplicatedCode
     */
    function _calculateCheckNumberWithMethod97($bankAccountNumber)
    {
        // remove check number
        $bankAccountNumberWithoutCheckNumber = substr($bankAccountNumber, 0, -1);

        // remove starting 0
        $bankAccountNumberWithoutCheckNumber = intval($bankAccountNumberWithoutCheckNumber);

        $calculationCheckNumber = $bankAccountNumberWithoutCheckNumber % 11;

        return $calculationCheckNumber;
    }

    /**
     * 1. This function removes the check number of the bank account number
     * 2. Every bank account digit will be multiplied by the weighting and added the weighting.
     * 3. The rest of modulo 11 are all added up
     * 4. Then the modulo is calculated and that rest will be the check number
     *
     * @param String $bankAccountNumber to check
     * @param array  $weighting         the weighting of each letter of the bank account number
     *
     * @return       int                       the check number
     * @noinspection DuplicatedCode
     */
    function _calculateCheckNumberWithMethodB9($bankAccountNumber, $weighting)
    {
        // remove check number
        $bankAccountNumberWithoutCheckNumber = substr($bankAccountNumber, 0, -1);

        // turn around the bank account number
        $bankAccountNumberWithoutCheckNumberReverse = strrev($bankAccountNumberWithoutCheckNumber);

        // split the bank account number
        $bankAccountNumberWithoutCheckNumberReverseSplitted = str_split($bankAccountNumberWithoutCheckNumberReverse);

        // convert every digits to a int
        foreach ($bankAccountNumberWithoutCheckNumberReverseSplitted as &$value) {
            $value = intval($value);
        }

        // multiply with the weighting and add the weighting
        $toCalculationArray = [];
        for ($i = 0; $i < count($bankAccountNumberWithoutCheckNumberReverseSplitted); $i++) {
            $temp = ($bankAccountNumberWithoutCheckNumberReverseSplitted[$i] * $weighting[$i]) + $weighting[$i];
            $toCalculationArray[] = $temp % 11;
        }

        // add up all the numbers
        $sum = array_sum($toCalculationArray);

        // calculate the modulo
        $calculationCheckNumber = $sum % 10;

        return $calculationCheckNumber;
    }

    /**
     * 1. This function removes the check number of the bank account number
     * 4. Every bank account digit will be multiplied by the weighting and added the weighting.
     * 5. If one of the multiplications will be higher than 9 the checksum will be calculated.
     * 6. Then all results are added up
     * 7. Then the modulo is calculated and that will be the check number
     *
     * @param String $bankAccountNumber to check
     * @param array  $weighting         the weighting of each letter of the bank account number
     *
     * @return       int                       the check number
     * @noinspection DuplicatedCode
     */
    function _calculateCheckNumberWithMethodD7($bankAccountNumber, $weighting)
    {
        // remove check number
        $bankAccountNumberWithoutCheckNumber = substr($bankAccountNumber, 0, -1);

        // split the bank account number
        $bankAccountNumberWithoutCheckNumberReverseSplitted = str_split($bankAccountNumberWithoutCheckNumber);

        // convert every digits to a int
        foreach ($bankAccountNumberWithoutCheckNumberReverseSplitted as &$value) {
            $value = intval($value);
        }

        // multiply with the weighting and add the weighting
        $toCalculationArray = [];
        for ($i = 0; $i < count($bankAccountNumberWithoutCheckNumberReverseSplitted); $i++) {
            $toCalculationArray[] = ($bankAccountNumberWithoutCheckNumberReverseSplitted[$i] * $weighting[$i]);
        }

        // calculate the modulo if a product is bigger than 9
        foreach ($toCalculationArray as &$value) {
            if ($value >= 10) {
                $value = $this->_calculateCheckSum($value);
            }
        }

        // add up all the numbers
        $sum = array_sum($toCalculationArray);

        // calculate the modulo
        $calculationCheckNumber = $sum % 10;

        return $calculationCheckNumber;
    }

    /**
     * 1. This function removes the check number of the bank account number and turn it around.
     * 2. Every bank account digit will be multiplied by the weighting.
     * 3. If one of the multiplications will be higher than 9 the check sum will be calculated.
     * 4. Then all results are added up and + 7
     * 5. Then the modulo is calculated.
     * 6. The rest of the modulo is subtracted from 10 and that will be the check number
     *    (if it is 10 the check number will be 0)
     *
     * @param String $bankAccountNumber to check
     * @param array  $weighting         the weighting of each letter of the bank account number
     *
     * @return       int                       the check number
     * @noinspection DuplicatedCode
     */
    function _calculateCheckNumberWithMethodE0($bankAccountNumber, $weighting)
    {
        $bankAccountNumberWithoutCheckNumber = substr($bankAccountNumber, 0, -1);

        // turn around the bank account number
        $bankAccountNumberWithoutCheckNumberReverse = strrev($bankAccountNumberWithoutCheckNumber);

        // split the bank account number
        $bankAccountNumberWithoutCheckNumberReverseSplitted = str_split($bankAccountNumberWithoutCheckNumberReverse);

        // convert every digits to a int
        foreach ($bankAccountNumberWithoutCheckNumberReverseSplitted as &$value) {
            $value = intval($value);
        }

        // multiply with the weighting
        $toCalculationArray = [];
        for ($i = 0; $i < count($bankAccountNumberWithoutCheckNumberReverseSplitted); $i++) {
            $toCalculationArray[] = $bankAccountNumberWithoutCheckNumberReverseSplitted[$i] * $weighting[$i];
        }

        // calculate the check sum if a product is bigger than 9
        foreach ($toCalculationArray as &$value) {
            if ($value >= 10) {
                $value = $this->_calculateCheckSum($value);
            }
        }

        // add up all the numbers
        $sum = array_sum($toCalculationArray) + 7;

        // calculate the modulo
        $rest = $sum % 10;

        // subtracted from 10
        $calculationCheckNumber = 10 - $rest;

        // if it is 10 the check number will be 0
        if ($calculationCheckNumber == 10) {
            $calculationCheckNumber = 0;
        }

        return $calculationCheckNumber;
    }

    /**
     * 1. This function removes the check number of the bank account number and turn it around.
     * 2. The numbers are replaced by the ascii value
     * 3. Every bank account digit will be multiplied by the weighting.
     * 4. If one of the multiplications will be higher than 9 the check sum will be calculated.
     * 5. Then all results are added up and + 7
     * 6. Then the modulo is calculated.
     * 7. The rest of the modulo is subtracted from 10 and that will be the check number
     *    (if it is 10 the check number will be 0)
     *
     * @param String $bankAccountNumber to check
     * @param array  $weighting         the weighting of each letter of the bank account number
     *
     * @return       int                       the check number
     * @noinspection DuplicatedCode
     */
    function _calculateCheckNumberWithMethodE1($bankAccountNumber, $weighting)
    {
        $bankAccountNumberWithoutCheckNumber = substr($bankAccountNumber, 0, -1);

        // turn around the bank account number
        $bankAccountNumberWithoutCheckNumberReverse = strrev($bankAccountNumberWithoutCheckNumber);

        // split the bank account number
        $bankAccountNumberWithoutCheckNumberReverseSplitted = str_split($bankAccountNumberWithoutCheckNumberReverse);

        // convert every digits to a int
        foreach ($bankAccountNumberWithoutCheckNumberReverseSplitted as &$value) {
            $value = intval($value);
        }

        //replace the numbers
        $ascii = array(0 => 48, 1 => 49, 2 => 50, 3 => 51, 4 => 52, 5 => 53, 6 => 54, 7 => 55, 8 => 56, 9 => 57);
        foreach ($bankAccountNumberWithoutCheckNumberReverseSplitted as &$value) {
            $value = $ascii[$value];
        }

        // multiply with the weighting
        $toCalculationArray = [];
        for ($i = 0; $i < count($bankAccountNumberWithoutCheckNumberReverseSplitted); $i++) {
            $toCalculationArray[] = $bankAccountNumberWithoutCheckNumberReverseSplitted[$i] * $weighting[$i];
        }

        // add up all the numbers
        $sum = array_sum($toCalculationArray);

        // calculate the modulo
        $calculationCheckNumber = $sum % 11;

        // if it is 10 the check number will be 0
        if ($calculationCheckNumber == 10) {
            return false;
        }

        return $calculationCheckNumber;
    }

    /**
     * 1. This function removes the check number of the bank account number
     * 2. transform the bank account number with the transformation table
     * 3. Then all numbers are added up
     * 4. Then the modulo is calculated.
     * 5. The rest of the modulo is subtracted from 10 and that will be the check number
     *
     * @param String $bankAccountNumber    to check
     * @param array  $transmormationsTable the transformations table
     * @param String $transformationsRows  the transformations rows for the transformations table
     *
     * @return int the check number
     *
     * @noinspection DuplicatedCode
     */
    function _calculateCheckNumberWithMethodM10H($bankAccountNumber, $transmormationsTable, $transformationsRows)
    {
        // remove check number
        $bankAccountNumberWithoutCheckNumber = substr($bankAccountNumber, 0, -1);

        // split the bank account number
        $bankAccountNumberWithoutCheckNumberSplitted = str_split($bankAccountNumberWithoutCheckNumber);

        // convert every digits to a int
        foreach ($bankAccountNumberWithoutCheckNumberSplitted as &$value) {
            $value = intval($value);
        }

        //transform bank account
        $transformedBankAccount = array();
        for ($i = 0; $i < count($bankAccountNumberWithoutCheckNumberSplitted); $i++) {
            $transformationsTableIndex = $transformationsRows[$i];
            $transformationsRow = $transmormationsTable[$transformationsTableIndex];
            $transformedBankAccount[$i] = $transformationsRow[$bankAccountNumberWithoutCheckNumberSplitted[$i]];
        }

        // add up all the numbers
        $sum = array_sum($transformedBankAccount);

        // calculate the modulo
        $rest = $sum % 10;

        // subtracted from 10
        $calculationCheckNumber = 10 - $rest;

        return $calculationCheckNumber;
    }

    /**
     * Calculate the check sum
     *
     * @param $digits int a number
     *
     * @return int|string sum of the digits
     */
    function _calculateCheckSum($digits)
    {
        $strDigits = (string) $digits;

        for ($intCrossFoot = $i = 0; $i < strlen($strDigits); $i++) {
            $intCrossFoot += intval($strDigits[$i]);
        }

        return $intCrossFoot;
    }
}
